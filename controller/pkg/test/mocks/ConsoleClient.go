// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	gqlclient "github.com/pluralsh/console-client-go"
	mock "github.com/stretchr/testify/mock"
)

// ConsoleClient is an autogenerated mock type for the ConsoleClient type
type ConsoleClient struct {
	mock.Mock
}

// CreateRepository provides a mock function with given fields: url, privateKey, passphrase, username, password
func (_m *ConsoleClient) CreateRepository(url string, privateKey *string, passphrase *string, username *string, password *string) (*gqlclient.CreateGitRepository, error) {
	ret := _m.Called(url, privateKey, passphrase, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *gqlclient.CreateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *string, *string, *string) (*gqlclient.CreateGitRepository, error)); ok {
		return rf(url, privateKey, passphrase, username, password)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *string, *string, *string) *gqlclient.CreateGitRepository); ok {
		r0 = rf(url, privateKey, passphrase, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.CreateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *string, *string, *string) error); ok {
		r1 = rf(url, privateKey, passphrase, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepository provides a mock function with given fields: id
func (_m *ConsoleClient) DeleteRepository(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRepository provides a mock function with given fields: url
func (_m *ConsoleClient) GetRepository(url *string) (*gqlclient.GetGitRepository, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *gqlclient.GetGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*gqlclient.GetGitRepository, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(*string) *gqlclient.GetGitRepository); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GetGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: id
func (_m *ConsoleClient) GetService(id string) (*gqlclient.ServiceDeploymentExtended, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *gqlclient.ServiceDeploymentExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.ServiceDeploymentExtended, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.ServiceDeploymentExtended); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ServiceDeploymentExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields:
func (_m *ConsoleClient) GetServices() ([]*gqlclient.ServiceDeploymentBaseFragment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []*gqlclient.ServiceDeploymentBaseFragment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*gqlclient.ServiceDeploymentBaseFragment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*gqlclient.ServiceDeploymentBaseFragment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gqlclient.ServiceDeploymentBaseFragment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositories provides a mock function with given fields:
func (_m *ConsoleClient) ListRepositories() (*gqlclient.ListGitRepositories, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 *gqlclient.ListGitRepositories
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gqlclient.ListGitRepositories, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gqlclient.ListGitRepositories); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ListGitRepositories)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComponents provides a mock function with given fields: id, components, errs
func (_m *ConsoleClient) UpdateComponents(id string, components []*gqlclient.ComponentAttributes, errs []*gqlclient.ServiceErrorAttributes) error {
	ret := _m.Called(id, components, errs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*gqlclient.ComponentAttributes, []*gqlclient.ServiceErrorAttributes) error); ok {
		r0 = rf(id, components, errs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRepository provides a mock function with given fields: id, attrs
func (_m *ConsoleClient) UpdateRepository(id string, attrs gqlclient.GitAttributes) (*gqlclient.UpdateGitRepository, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepository")
	}

	var r0 *gqlclient.UpdateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.GitAttributes) (*gqlclient.UpdateGitRepository, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.GitAttributes) *gqlclient.UpdateGitRepository); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.UpdateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.GitAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsoleClient creates a new instance of ConsoleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsoleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsoleClient {
	mock := &ConsoleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
