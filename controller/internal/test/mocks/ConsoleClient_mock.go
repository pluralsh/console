// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gqlclient "github.com/pluralsh/console-client-go"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/pluralsh/console/controller/api/v1alpha1"
)

// ConsoleClientMock is an autogenerated mock type for the ConsoleClient type
type ConsoleClientMock struct {
	mock.Mock
}

type ConsoleClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsoleClientMock) EXPECT() *ConsoleClientMock_Expecter {
	return &ConsoleClientMock_Expecter{mock: &_m.Mock}
}

// CreateCluster provides a mock function with given fields: attrs
func (_m *ConsoleClientMock) CreateCluster(attrs gqlclient.ClusterAttributes) (*gqlclient.ClusterFragment, error) {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *gqlclient.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(gqlclient.ClusterAttributes) (*gqlclient.ClusterFragment, error)); ok {
		return rf(attrs)
	}
	if rf, ok := ret.Get(0).(func(gqlclient.ClusterAttributes) *gqlclient.ClusterFragment); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(gqlclient.ClusterAttributes) error); ok {
		r1 = rf(attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type ConsoleClientMock_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
//   - attrs gqlclient.ClusterAttributes
func (_e *ConsoleClientMock_Expecter) CreateCluster(attrs interface{}) *ConsoleClientMock_CreateCluster_Call {
	return &ConsoleClientMock_CreateCluster_Call{Call: _e.mock.On("CreateCluster", attrs)}
}

func (_c *ConsoleClientMock_CreateCluster_Call) Run(run func(attrs gqlclient.ClusterAttributes)) *ConsoleClientMock_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gqlclient.ClusterAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateCluster_Call) Return(_a0 *gqlclient.ClusterFragment, _a1 error) *ConsoleClientMock_CreateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateCluster_Call) RunAndReturn(run func(gqlclient.ClusterAttributes) (*gqlclient.ClusterFragment, error)) *ConsoleClientMock_CreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterRestore provides a mock function with given fields: backupId
func (_m *ConsoleClientMock) CreateClusterRestore(backupId string) (*gqlclient.ClusterRestoreFragment, error) {
	ret := _m.Called(backupId)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterRestore")
	}

	var r0 *gqlclient.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.ClusterRestoreFragment, error)); ok {
		return rf(backupId)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.ClusterRestoreFragment); ok {
		r0 = rf(backupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(backupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterRestore'
type ConsoleClientMock_CreateClusterRestore_Call struct {
	*mock.Call
}

// CreateClusterRestore is a helper method to define mock.On call
//   - backupId string
func (_e *ConsoleClientMock_Expecter) CreateClusterRestore(backupId interface{}) *ConsoleClientMock_CreateClusterRestore_Call {
	return &ConsoleClientMock_CreateClusterRestore_Call{Call: _e.mock.On("CreateClusterRestore", backupId)}
}

func (_c *ConsoleClientMock_CreateClusterRestore_Call) Run(run func(backupId string)) *ConsoleClientMock_CreateClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateClusterRestore_Call) Return(_a0 *gqlclient.ClusterRestoreFragment, _a1 error) *ConsoleClientMock_CreateClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateClusterRestore_Call) RunAndReturn(run func(string) (*gqlclient.ClusterRestoreFragment, error)) *ConsoleClientMock_CreateClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGlobalService provides a mock function with given fields: serviceID, attributes
func (_m *ConsoleClientMock) CreateGlobalService(serviceID string, attributes gqlclient.GlobalServiceAttributes) (*gqlclient.GlobalServiceFragment, error) {
	ret := _m.Called(serviceID, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalService")
	}

	var r0 *gqlclient.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.GlobalServiceAttributes) (*gqlclient.GlobalServiceFragment, error)); ok {
		return rf(serviceID, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.GlobalServiceAttributes) *gqlclient.GlobalServiceFragment); ok {
		r0 = rf(serviceID, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.GlobalServiceAttributes) error); ok {
		r1 = rf(serviceID, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGlobalService'
type ConsoleClientMock_CreateGlobalService_Call struct {
	*mock.Call
}

// CreateGlobalService is a helper method to define mock.On call
//   - serviceID string
//   - attributes gqlclient.GlobalServiceAttributes
func (_e *ConsoleClientMock_Expecter) CreateGlobalService(serviceID interface{}, attributes interface{}) *ConsoleClientMock_CreateGlobalService_Call {
	return &ConsoleClientMock_CreateGlobalService_Call{Call: _e.mock.On("CreateGlobalService", serviceID, attributes)}
}

func (_c *ConsoleClientMock_CreateGlobalService_Call) Run(run func(serviceID string, attributes gqlclient.GlobalServiceAttributes)) *ConsoleClientMock_CreateGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.GlobalServiceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateGlobalService_Call) Return(_a0 *gqlclient.GlobalServiceFragment, _a1 error) *ConsoleClientMock_CreateGlobalService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateGlobalService_Call) RunAndReturn(run func(string, gqlclient.GlobalServiceAttributes) (*gqlclient.GlobalServiceFragment, error)) *ConsoleClientMock_CreateGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrAutomation provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreatePrAutomation(ctx context.Context, attributes gqlclient.PrAutomationAttributes) (*gqlclient.PrAutomationFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrAutomation")
	}

	var r0 *gqlclient.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gqlclient.PrAutomationAttributes) (*gqlclient.PrAutomationFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gqlclient.PrAutomationAttributes) *gqlclient.PrAutomationFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gqlclient.PrAutomationAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreatePrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrAutomation'
type ConsoleClientMock_CreatePrAutomation_Call struct {
	*mock.Call
}

// CreatePrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes gqlclient.PrAutomationAttributes
func (_e *ConsoleClientMock_Expecter) CreatePrAutomation(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreatePrAutomation_Call {
	return &ConsoleClientMock_CreatePrAutomation_Call{Call: _e.mock.On("CreatePrAutomation", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreatePrAutomation_Call) Run(run func(ctx context.Context, attributes gqlclient.PrAutomationAttributes)) *ConsoleClientMock_CreatePrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gqlclient.PrAutomationAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreatePrAutomation_Call) Return(_a0 *gqlclient.PrAutomationFragment, _a1 error) *ConsoleClientMock_CreatePrAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreatePrAutomation_Call) RunAndReturn(run func(context.Context, gqlclient.PrAutomationAttributes) (*gqlclient.PrAutomationFragment, error)) *ConsoleClientMock_CreatePrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProvider provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateProvider(ctx context.Context, attributes gqlclient.ClusterProviderAttributes) (*gqlclient.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvider")
	}

	var r0 *gqlclient.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gqlclient.ClusterProviderAttributes) (*gqlclient.ClusterProviderFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gqlclient.ClusterProviderAttributes) *gqlclient.ClusterProviderFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gqlclient.ClusterProviderAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProvider'
type ConsoleClientMock_CreateProvider_Call struct {
	*mock.Call
}

// CreateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes gqlclient.ClusterProviderAttributes
func (_e *ConsoleClientMock_Expecter) CreateProvider(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateProvider_Call {
	return &ConsoleClientMock_CreateProvider_Call{Call: _e.mock.On("CreateProvider", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateProvider_Call) Run(run func(ctx context.Context, attributes gqlclient.ClusterProviderAttributes)) *ConsoleClientMock_CreateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gqlclient.ClusterProviderAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateProvider_Call) Return(_a0 *gqlclient.ClusterProviderFragment, _a1 error) *ConsoleClientMock_CreateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateProvider_Call) RunAndReturn(run func(context.Context, gqlclient.ClusterProviderAttributes) (*gqlclient.ClusterProviderFragment, error)) *ConsoleClientMock_CreateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepository provides a mock function with given fields: url, privateKey, passphrase, username, password
func (_m *ConsoleClientMock) CreateRepository(url string, privateKey *string, passphrase *string, username *string, password *string) (*gqlclient.CreateGitRepository, error) {
	ret := _m.Called(url, privateKey, passphrase, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *gqlclient.CreateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *string, *string, *string) (*gqlclient.CreateGitRepository, error)); ok {
		return rf(url, privateKey, passphrase, username, password)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *string, *string, *string) *gqlclient.CreateGitRepository); ok {
		r0 = rf(url, privateKey, passphrase, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.CreateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *string, *string, *string) error); ok {
		r1 = rf(url, privateKey, passphrase, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepository'
type ConsoleClientMock_CreateRepository_Call struct {
	*mock.Call
}

// CreateRepository is a helper method to define mock.On call
//   - url string
//   - privateKey *string
//   - passphrase *string
//   - username *string
//   - password *string
func (_e *ConsoleClientMock_Expecter) CreateRepository(url interface{}, privateKey interface{}, passphrase interface{}, username interface{}, password interface{}) *ConsoleClientMock_CreateRepository_Call {
	return &ConsoleClientMock_CreateRepository_Call{Call: _e.mock.On("CreateRepository", url, privateKey, passphrase, username, password)}
}

func (_c *ConsoleClientMock_CreateRepository_Call) Run(run func(url string, privateKey *string, passphrase *string, username *string, password *string)) *ConsoleClientMock_CreateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*string), args[2].(*string), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateRepository_Call) Return(_a0 *gqlclient.CreateGitRepository, _a1 error) *ConsoleClientMock_CreateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateRepository_Call) RunAndReturn(run func(string, *string, *string, *string, *string) (*gqlclient.CreateGitRepository, error)) *ConsoleClientMock_CreateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScmConnection provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateScmConnection(ctx context.Context, attributes gqlclient.ScmConnectionAttributes) (*gqlclient.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateScmConnection")
	}

	var r0 *gqlclient.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gqlclient.ScmConnectionAttributes) (*gqlclient.ScmConnectionFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gqlclient.ScmConnectionAttributes) *gqlclient.ScmConnectionFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gqlclient.ScmConnectionAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScmConnection'
type ConsoleClientMock_CreateScmConnection_Call struct {
	*mock.Call
}

// CreateScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes gqlclient.ScmConnectionAttributes
func (_e *ConsoleClientMock_Expecter) CreateScmConnection(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateScmConnection_Call {
	return &ConsoleClientMock_CreateScmConnection_Call{Call: _e.mock.On("CreateScmConnection", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateScmConnection_Call) Run(run func(ctx context.Context, attributes gqlclient.ScmConnectionAttributes)) *ConsoleClientMock_CreateScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gqlclient.ScmConnectionAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateScmConnection_Call) Return(_a0 *gqlclient.ScmConnectionFragment, _a1 error) *ConsoleClientMock_CreateScmConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateScmConnection_Call) RunAndReturn(run func(context.Context, gqlclient.ScmConnectionAttributes) (*gqlclient.ScmConnectionFragment, error)) *ConsoleClientMock_CreateScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: clusterId, attributes
func (_m *ConsoleClientMock) CreateService(clusterId *string, attributes gqlclient.ServiceDeploymentAttributes) (*gqlclient.ServiceDeploymentExtended, error) {
	ret := _m.Called(clusterId, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *gqlclient.ServiceDeploymentExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, gqlclient.ServiceDeploymentAttributes) (*gqlclient.ServiceDeploymentExtended, error)); ok {
		return rf(clusterId, attributes)
	}
	if rf, ok := ret.Get(0).(func(*string, gqlclient.ServiceDeploymentAttributes) *gqlclient.ServiceDeploymentExtended); ok {
		r0 = rf(clusterId, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ServiceDeploymentExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, gqlclient.ServiceDeploymentAttributes) error); ok {
		r1 = rf(clusterId, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type ConsoleClientMock_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - clusterId *string
//   - attributes gqlclient.ServiceDeploymentAttributes
func (_e *ConsoleClientMock_Expecter) CreateService(clusterId interface{}, attributes interface{}) *ConsoleClientMock_CreateService_Call {
	return &ConsoleClientMock_CreateService_Call{Call: _e.mock.On("CreateService", clusterId, attributes)}
}

func (_c *ConsoleClientMock_CreateService_Call) Run(run func(clusterId *string, attributes gqlclient.ServiceDeploymentAttributes)) *ConsoleClientMock_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(gqlclient.ServiceDeploymentAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateService_Call) Return(_a0 *gqlclient.ServiceDeploymentExtended, _a1 error) *ConsoleClientMock_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateService_Call) RunAndReturn(run func(*string, gqlclient.ServiceDeploymentAttributes) (*gqlclient.ServiceDeploymentExtended, error)) *ConsoleClientMock_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeleteCluster(id string) (*gqlclient.ClusterFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *gqlclient.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.ClusterFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.ClusterFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type ConsoleClientMock_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteCluster(id interface{}) *ConsoleClientMock_DeleteCluster_Call {
	return &ConsoleClientMock_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", id)}
}

func (_c *ConsoleClientMock_DeleteCluster_Call) Run(run func(id string)) *ConsoleClientMock_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteCluster_Call) Return(_a0 *gqlclient.ClusterFragment, _a1 error) *ConsoleClientMock_DeleteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_DeleteCluster_Call) RunAndReturn(run func(string) (*gqlclient.ClusterFragment, error)) *ConsoleClientMock_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGlobalService provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeleteGlobalService(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobalService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGlobalService'
type ConsoleClientMock_DeleteGlobalService_Call struct {
	*mock.Call
}

// DeleteGlobalService is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteGlobalService(id interface{}) *ConsoleClientMock_DeleteGlobalService_Call {
	return &ConsoleClientMock_DeleteGlobalService_Call{Call: _e.mock.On("DeleteGlobalService", id)}
}

func (_c *ConsoleClientMock_DeleteGlobalService_Call) Run(run func(id string)) *ConsoleClientMock_DeleteGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteGlobalService_Call) Return(_a0 error) *ConsoleClientMock_DeleteGlobalService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteGlobalService_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DeleteGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipeline provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeletePipeline(id string) (*gqlclient.PipelineFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 *gqlclient.PipelineFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.PipelineFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.PipelineFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PipelineFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_DeletePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipeline'
type ConsoleClientMock_DeletePipeline_Call struct {
	*mock.Call
}

// DeletePipeline is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeletePipeline(id interface{}) *ConsoleClientMock_DeletePipeline_Call {
	return &ConsoleClientMock_DeletePipeline_Call{Call: _e.mock.On("DeletePipeline", id)}
}

func (_c *ConsoleClientMock_DeletePipeline_Call) Run(run func(id string)) *ConsoleClientMock_DeletePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeletePipeline_Call) Return(_a0 *gqlclient.PipelineFragment, _a1 error) *ConsoleClientMock_DeletePipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_DeletePipeline_Call) RunAndReturn(run func(string) (*gqlclient.PipelineFragment, error)) *ConsoleClientMock_DeletePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrAutomation provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeletePrAutomation(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrAutomation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeletePrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrAutomation'
type ConsoleClientMock_DeletePrAutomation_Call struct {
	*mock.Call
}

// DeletePrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeletePrAutomation(ctx interface{}, id interface{}) *ConsoleClientMock_DeletePrAutomation_Call {
	return &ConsoleClientMock_DeletePrAutomation_Call{Call: _e.mock.On("DeletePrAutomation", ctx, id)}
}

func (_c *ConsoleClientMock_DeletePrAutomation_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeletePrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeletePrAutomation_Call) Return(_a0 error) *ConsoleClientMock_DeletePrAutomation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeletePrAutomation_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeletePrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvider provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteProvider(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvider'
type ConsoleClientMock_DeleteProvider_Call struct {
	*mock.Call
}

// DeleteProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteProvider(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteProvider_Call {
	return &ConsoleClientMock_DeleteProvider_Call{Call: _e.mock.On("DeleteProvider", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteProvider_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteProvider_Call) Return(_a0 error) *ConsoleClientMock_DeleteProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteProvider_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepository provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeleteRepository(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepository'
type ConsoleClientMock_DeleteRepository_Call struct {
	*mock.Call
}

// DeleteRepository is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteRepository(id interface{}) *ConsoleClientMock_DeleteRepository_Call {
	return &ConsoleClientMock_DeleteRepository_Call{Call: _e.mock.On("DeleteRepository", id)}
}

func (_c *ConsoleClientMock_DeleteRepository_Call) Run(run func(id string)) *ConsoleClientMock_DeleteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteRepository_Call) Return(_a0 error) *ConsoleClientMock_DeleteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteRepository_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DeleteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScmConnection provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteScmConnection(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScmConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScmConnection'
type ConsoleClientMock_DeleteScmConnection_Call struct {
	*mock.Call
}

// DeleteScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteScmConnection(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteScmConnection_Call {
	return &ConsoleClientMock_DeleteScmConnection_Call{Call: _e.mock.On("DeleteScmConnection", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteScmConnection_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteScmConnection_Call) Return(_a0 error) *ConsoleClientMock_DeleteScmConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteScmConnection_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: serviceId
func (_m *ConsoleClientMock) DeleteService(serviceId string) error {
	ret := _m.Called(serviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type ConsoleClientMock_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - serviceId string
func (_e *ConsoleClientMock_Expecter) DeleteService(serviceId interface{}) *ConsoleClientMock_DeleteService_Call {
	return &ConsoleClientMock_DeleteService_Call{Call: _e.mock.On("DeleteService", serviceId)}
}

func (_c *ConsoleClientMock_DeleteService_Call) Run(run func(serviceId string)) *ConsoleClientMock_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteService_Call) Return(_a0 error) *ConsoleClientMock_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteService_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetCluster(id *string) (*gqlclient.ClusterFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *gqlclient.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*gqlclient.ClusterFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*string) *gqlclient.ClusterFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type ConsoleClientMock_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - id *string
func (_e *ConsoleClientMock_Expecter) GetCluster(id interface{}) *ConsoleClientMock_GetCluster_Call {
	return &ConsoleClientMock_GetCluster_Call{Call: _e.mock.On("GetCluster", id)}
}

func (_c *ConsoleClientMock_GetCluster_Call) Run(run func(id *string)) *ConsoleClientMock_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetCluster_Call) Return(_a0 *gqlclient.ClusterFragment, _a1 error) *ConsoleClientMock_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetCluster_Call) RunAndReturn(run func(*string) (*gqlclient.ClusterFragment, error)) *ConsoleClientMock_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackup provides a mock function with given fields: clusterId, namespace, name
func (_m *ConsoleClientMock) GetClusterBackup(clusterId *string, namespace *string, name *string) (*gqlclient.ClusterBackupFragment, error) {
	ret := _m.Called(clusterId, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackup")
	}

	var r0 *gqlclient.ClusterBackupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string, *string) (*gqlclient.ClusterBackupFragment, error)); ok {
		return rf(clusterId, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(*string, *string, *string) *gqlclient.ClusterBackupFragment); ok {
		r0 = rf(clusterId, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterBackupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string, *string) error); ok {
		r1 = rf(clusterId, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetClusterBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackup'
type ConsoleClientMock_GetClusterBackup_Call struct {
	*mock.Call
}

// GetClusterBackup is a helper method to define mock.On call
//   - clusterId *string
//   - namespace *string
//   - name *string
func (_e *ConsoleClientMock_Expecter) GetClusterBackup(clusterId interface{}, namespace interface{}, name interface{}) *ConsoleClientMock_GetClusterBackup_Call {
	return &ConsoleClientMock_GetClusterBackup_Call{Call: _e.mock.On("GetClusterBackup", clusterId, namespace, name)}
}

func (_c *ConsoleClientMock_GetClusterBackup_Call) Run(run func(clusterId *string, namespace *string, name *string)) *ConsoleClientMock_GetClusterBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetClusterBackup_Call) Return(_a0 *gqlclient.ClusterBackupFragment, _a1 error) *ConsoleClientMock_GetClusterBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetClusterBackup_Call) RunAndReturn(run func(*string, *string, *string) (*gqlclient.ClusterBackupFragment, error)) *ConsoleClientMock_GetClusterBackup_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterByHandle provides a mock function with given fields: handle
func (_m *ConsoleClientMock) GetClusterByHandle(handle *string) (*gqlclient.ClusterFragment, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterByHandle")
	}

	var r0 *gqlclient.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*gqlclient.ClusterFragment, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(*string) *gqlclient.ClusterFragment); ok {
		r0 = rf(handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetClusterByHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterByHandle'
type ConsoleClientMock_GetClusterByHandle_Call struct {
	*mock.Call
}

// GetClusterByHandle is a helper method to define mock.On call
//   - handle *string
func (_e *ConsoleClientMock_Expecter) GetClusterByHandle(handle interface{}) *ConsoleClientMock_GetClusterByHandle_Call {
	return &ConsoleClientMock_GetClusterByHandle_Call{Call: _e.mock.On("GetClusterByHandle", handle)}
}

func (_c *ConsoleClientMock_GetClusterByHandle_Call) Run(run func(handle *string)) *ConsoleClientMock_GetClusterByHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetClusterByHandle_Call) Return(_a0 *gqlclient.ClusterFragment, _a1 error) *ConsoleClientMock_GetClusterByHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetClusterByHandle_Call) RunAndReturn(run func(*string) (*gqlclient.ClusterFragment, error)) *ConsoleClientMock_GetClusterByHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestore provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetClusterRestore(id string) (*gqlclient.ClusterRestoreFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestore")
	}

	var r0 *gqlclient.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.ClusterRestoreFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.ClusterRestoreFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestore'
type ConsoleClientMock_GetClusterRestore_Call struct {
	*mock.Call
}

// GetClusterRestore is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) GetClusterRestore(id interface{}) *ConsoleClientMock_GetClusterRestore_Call {
	return &ConsoleClientMock_GetClusterRestore_Call{Call: _e.mock.On("GetClusterRestore", id)}
}

func (_c *ConsoleClientMock_GetClusterRestore_Call) Run(run func(id string)) *ConsoleClientMock_GetClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetClusterRestore_Call) Return(_a0 *gqlclient.ClusterRestoreFragment, _a1 error) *ConsoleClientMock_GetClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetClusterRestore_Call) RunAndReturn(run func(string) (*gqlclient.ClusterRestoreFragment, error)) *ConsoleClientMock_GetClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalService provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetGlobalService(id string) (*gqlclient.GlobalServiceFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalService")
	}

	var r0 *gqlclient.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.GlobalServiceFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.GlobalServiceFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalService'
type ConsoleClientMock_GetGlobalService_Call struct {
	*mock.Call
}

// GetGlobalService is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) GetGlobalService(id interface{}) *ConsoleClientMock_GetGlobalService_Call {
	return &ConsoleClientMock_GetGlobalService_Call{Call: _e.mock.On("GetGlobalService", id)}
}

func (_c *ConsoleClientMock_GetGlobalService_Call) Run(run func(id string)) *ConsoleClientMock_GetGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetGlobalService_Call) Return(_a0 *gqlclient.GlobalServiceFragment, _a1 error) *ConsoleClientMock_GetGlobalService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetGlobalService_Call) RunAndReturn(run func(string) (*gqlclient.GlobalServiceFragment, error)) *ConsoleClientMock_GetGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: name
func (_m *ConsoleClientMock) GetGroup(name string) (*gqlclient.GroupFragment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *gqlclient.GroupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.GroupFragment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.GroupFragment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GroupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type ConsoleClientMock_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - name string
func (_e *ConsoleClientMock_Expecter) GetGroup(name interface{}) *ConsoleClientMock_GetGroup_Call {
	return &ConsoleClientMock_GetGroup_Call{Call: _e.mock.On("GetGroup", name)}
}

func (_c *ConsoleClientMock_GetGroup_Call) Run(run func(name string)) *ConsoleClientMock_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetGroup_Call) Return(_a0 *gqlclient.GroupFragment, _a1 error) *ConsoleClientMock_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetGroup_Call) RunAndReturn(run func(string) (*gqlclient.GroupFragment, error)) *ConsoleClientMock_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipeline provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetPipeline(id string) (*gqlclient.PipelineFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPipeline")
	}

	var r0 *gqlclient.PipelineFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.PipelineFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.PipelineFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PipelineFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipeline'
type ConsoleClientMock_GetPipeline_Call struct {
	*mock.Call
}

// GetPipeline is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) GetPipeline(id interface{}) *ConsoleClientMock_GetPipeline_Call {
	return &ConsoleClientMock_GetPipeline_Call{Call: _e.mock.On("GetPipeline", id)}
}

func (_c *ConsoleClientMock_GetPipeline_Call) Run(run func(id string)) *ConsoleClientMock_GetPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPipeline_Call) Return(_a0 *gqlclient.PipelineFragment, _a1 error) *ConsoleClientMock_GetPipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPipeline_Call) RunAndReturn(run func(string) (*gqlclient.PipelineFragment, error)) *ConsoleClientMock_GetPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrAutomation provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetPrAutomation(ctx context.Context, id string) (*gqlclient.PrAutomationFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPrAutomation")
	}

	var r0 *gqlclient.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gqlclient.PrAutomationFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gqlclient.PrAutomationFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrAutomation'
type ConsoleClientMock_GetPrAutomation_Call struct {
	*mock.Call
}

// GetPrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetPrAutomation(ctx interface{}, id interface{}) *ConsoleClientMock_GetPrAutomation_Call {
	return &ConsoleClientMock_GetPrAutomation_Call{Call: _e.mock.On("GetPrAutomation", ctx, id)}
}

func (_c *ConsoleClientMock_GetPrAutomation_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetPrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomation_Call) Return(_a0 *gqlclient.PrAutomationFragment, _a1 error) *ConsoleClientMock_GetPrAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomation_Call) RunAndReturn(run func(context.Context, string) (*gqlclient.PrAutomationFragment, error)) *ConsoleClientMock_GetPrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrAutomationByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetPrAutomationByName(ctx context.Context, name string) (*gqlclient.PrAutomationFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPrAutomationByName")
	}

	var r0 *gqlclient.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gqlclient.PrAutomationFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gqlclient.PrAutomationFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPrAutomationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrAutomationByName'
type ConsoleClientMock_GetPrAutomationByName_Call struct {
	*mock.Call
}

// GetPrAutomationByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetPrAutomationByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetPrAutomationByName_Call {
	return &ConsoleClientMock_GetPrAutomationByName_Call{Call: _e.mock.On("GetPrAutomationByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetPrAutomationByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetPrAutomationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomationByName_Call) Return(_a0 *gqlclient.PrAutomationFragment, _a1 error) *ConsoleClientMock_GetPrAutomationByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomationByName_Call) RunAndReturn(run func(context.Context, string) (*gqlclient.PrAutomationFragment, error)) *ConsoleClientMock_GetPrAutomationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetProvider(ctx context.Context, id string) (*gqlclient.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 *gqlclient.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gqlclient.ClusterProviderFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gqlclient.ClusterProviderFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type ConsoleClientMock_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetProvider(ctx interface{}, id interface{}) *ConsoleClientMock_GetProvider_Call {
	return &ConsoleClientMock_GetProvider_Call{Call: _e.mock.On("GetProvider", ctx, id)}
}

func (_c *ConsoleClientMock_GetProvider_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetProvider_Call) Return(_a0 *gqlclient.ClusterProviderFragment, _a1 error) *ConsoleClientMock_GetProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetProvider_Call) RunAndReturn(run func(context.Context, string) (*gqlclient.ClusterProviderFragment, error)) *ConsoleClientMock_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderByCloud provides a mock function with given fields: ctx, cloud
func (_m *ConsoleClientMock) GetProviderByCloud(ctx context.Context, cloud v1alpha1.CloudProvider) (*gqlclient.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, cloud)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByCloud")
	}

	var r0 *gqlclient.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.CloudProvider) (*gqlclient.ClusterProviderFragment, error)); ok {
		return rf(ctx, cloud)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.CloudProvider) *gqlclient.ClusterProviderFragment); ok {
		r0 = rf(ctx, cloud)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1alpha1.CloudProvider) error); ok {
		r1 = rf(ctx, cloud)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetProviderByCloud_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderByCloud'
type ConsoleClientMock_GetProviderByCloud_Call struct {
	*mock.Call
}

// GetProviderByCloud is a helper method to define mock.On call
//   - ctx context.Context
//   - cloud v1alpha1.CloudProvider
func (_e *ConsoleClientMock_Expecter) GetProviderByCloud(ctx interface{}, cloud interface{}) *ConsoleClientMock_GetProviderByCloud_Call {
	return &ConsoleClientMock_GetProviderByCloud_Call{Call: _e.mock.On("GetProviderByCloud", ctx, cloud)}
}

func (_c *ConsoleClientMock_GetProviderByCloud_Call) Run(run func(ctx context.Context, cloud v1alpha1.CloudProvider)) *ConsoleClientMock_GetProviderByCloud_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1alpha1.CloudProvider))
	})
	return _c
}

func (_c *ConsoleClientMock_GetProviderByCloud_Call) Return(_a0 *gqlclient.ClusterProviderFragment, _a1 error) *ConsoleClientMock_GetProviderByCloud_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetProviderByCloud_Call) RunAndReturn(run func(context.Context, v1alpha1.CloudProvider) (*gqlclient.ClusterProviderFragment, error)) *ConsoleClientMock_GetProviderByCloud_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with given fields: url
func (_m *ConsoleClientMock) GetRepository(url *string) (*gqlclient.GetGitRepository, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *gqlclient.GetGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*gqlclient.GetGitRepository, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(*string) *gqlclient.GetGitRepository); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GetGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type ConsoleClientMock_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - url *string
func (_e *ConsoleClientMock_Expecter) GetRepository(url interface{}) *ConsoleClientMock_GetRepository_Call {
	return &ConsoleClientMock_GetRepository_Call{Call: _e.mock.On("GetRepository", url)}
}

func (_c *ConsoleClientMock_GetRepository_Call) Run(run func(url *string)) *ConsoleClientMock_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetRepository_Call) Return(_a0 *gqlclient.GetGitRepository, _a1 error) *ConsoleClientMock_GetRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetRepository_Call) RunAndReturn(run func(*string) (*gqlclient.GetGitRepository, error)) *ConsoleClientMock_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetScmConnection provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetScmConnection(ctx context.Context, id string) (*gqlclient.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetScmConnection")
	}

	var r0 *gqlclient.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gqlclient.ScmConnectionFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gqlclient.ScmConnectionFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScmConnection'
type ConsoleClientMock_GetScmConnection_Call struct {
	*mock.Call
}

// GetScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetScmConnection(ctx interface{}, id interface{}) *ConsoleClientMock_GetScmConnection_Call {
	return &ConsoleClientMock_GetScmConnection_Call{Call: _e.mock.On("GetScmConnection", ctx, id)}
}

func (_c *ConsoleClientMock_GetScmConnection_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetScmConnection_Call) Return(_a0 *gqlclient.ScmConnectionFragment, _a1 error) *ConsoleClientMock_GetScmConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetScmConnection_Call) RunAndReturn(run func(context.Context, string) (*gqlclient.ScmConnectionFragment, error)) *ConsoleClientMock_GetScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetScmConnectionByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetScmConnectionByName(ctx context.Context, name string) (*gqlclient.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetScmConnectionByName")
	}

	var r0 *gqlclient.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*gqlclient.ScmConnectionFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *gqlclient.ScmConnectionFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetScmConnectionByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScmConnectionByName'
type ConsoleClientMock_GetScmConnectionByName_Call struct {
	*mock.Call
}

// GetScmConnectionByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetScmConnectionByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetScmConnectionByName_Call {
	return &ConsoleClientMock_GetScmConnectionByName_Call{Call: _e.mock.On("GetScmConnectionByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetScmConnectionByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetScmConnectionByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetScmConnectionByName_Call) Return(_a0 *gqlclient.ScmConnectionFragment, _a1 error) *ConsoleClientMock_GetScmConnectionByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetScmConnectionByName_Call) RunAndReturn(run func(context.Context, string) (*gqlclient.ScmConnectionFragment, error)) *ConsoleClientMock_GetScmConnectionByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: clusterID, serviceName
func (_m *ConsoleClientMock) GetService(clusterID string, serviceName string) (*gqlclient.ServiceDeploymentExtended, error) {
	ret := _m.Called(clusterID, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *gqlclient.ServiceDeploymentExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*gqlclient.ServiceDeploymentExtended, error)); ok {
		return rf(clusterID, serviceName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *gqlclient.ServiceDeploymentExtended); ok {
		r0 = rf(clusterID, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ServiceDeploymentExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clusterID, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type ConsoleClientMock_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - clusterID string
//   - serviceName string
func (_e *ConsoleClientMock_Expecter) GetService(clusterID interface{}, serviceName interface{}) *ConsoleClientMock_GetService_Call {
	return &ConsoleClientMock_GetService_Call{Call: _e.mock.On("GetService", clusterID, serviceName)}
}

func (_c *ConsoleClientMock_GetService_Call) Run(run func(clusterID string, serviceName string)) *ConsoleClientMock_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetService_Call) Return(_a0 *gqlclient.ServiceDeploymentExtended, _a1 error) *ConsoleClientMock_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetService_Call) RunAndReturn(run func(string, string) (*gqlclient.ServiceDeploymentExtended, error)) *ConsoleClientMock_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceContext provides a mock function with given fields: name
func (_m *ConsoleClientMock) GetServiceContext(name string) (*gqlclient.ServiceContextFragment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceContext")
	}

	var r0 *gqlclient.ServiceContextFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.ServiceContextFragment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.ServiceContextFragment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ServiceContextFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetServiceContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceContext'
type ConsoleClientMock_GetServiceContext_Call struct {
	*mock.Call
}

// GetServiceContext is a helper method to define mock.On call
//   - name string
func (_e *ConsoleClientMock_Expecter) GetServiceContext(name interface{}) *ConsoleClientMock_GetServiceContext_Call {
	return &ConsoleClientMock_GetServiceContext_Call{Call: _e.mock.On("GetServiceContext", name)}
}

func (_c *ConsoleClientMock_GetServiceContext_Call) Run(run func(name string)) *ConsoleClientMock_GetServiceContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetServiceContext_Call) Return(_a0 *gqlclient.ServiceContextFragment, _a1 error) *ConsoleClientMock_GetServiceContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetServiceContext_Call) RunAndReturn(run func(string) (*gqlclient.ServiceContextFragment, error)) *ConsoleClientMock_GetServiceContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields:
func (_m *ConsoleClientMock) GetServices() ([]*gqlclient.ServiceDeploymentBaseFragment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []*gqlclient.ServiceDeploymentBaseFragment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*gqlclient.ServiceDeploymentBaseFragment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*gqlclient.ServiceDeploymentBaseFragment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gqlclient.ServiceDeploymentBaseFragment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type ConsoleClientMock_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) GetServices() *ConsoleClientMock_GetServices_Call {
	return &ConsoleClientMock_GetServices_Call{Call: _e.mock.On("GetServices")}
}

func (_c *ConsoleClientMock_GetServices_Call) Run(run func()) *ConsoleClientMock_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_GetServices_Call) Return(_a0 []*gqlclient.ServiceDeploymentBaseFragment, _a1 error) *ConsoleClientMock_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetServices_Call) RunAndReturn(run func() ([]*gqlclient.ServiceDeploymentBaseFragment, error)) *ConsoleClientMock_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: email
func (_m *ConsoleClientMock) GetUser(email string) (*gqlclient.UserFragment, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *gqlclient.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*gqlclient.UserFragment, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *gqlclient.UserFragment); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type ConsoleClientMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - email string
func (_e *ConsoleClientMock_Expecter) GetUser(email interface{}) *ConsoleClientMock_GetUser_Call {
	return &ConsoleClientMock_GetUser_Call{Call: _e.mock.On("GetUser", email)}
}

func (_c *ConsoleClientMock_GetUser_Call) Run(run func(email string)) *ConsoleClientMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetUser_Call) Return(_a0 *gqlclient.UserFragment, _a1 error) *ConsoleClientMock_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetUser_Call) RunAndReturn(run func(string) (*gqlclient.UserFragment, error)) *ConsoleClientMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterDeleting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsClusterDeleting(id *string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterDeleting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsClusterDeleting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterDeleting'
type ConsoleClientMock_IsClusterDeleting_Call struct {
	*mock.Call
}

// IsClusterDeleting is a helper method to define mock.On call
//   - id *string
func (_e *ConsoleClientMock_Expecter) IsClusterDeleting(id interface{}) *ConsoleClientMock_IsClusterDeleting_Call {
	return &ConsoleClientMock_IsClusterDeleting_Call{Call: _e.mock.On("IsClusterDeleting", id)}
}

func (_c *ConsoleClientMock_IsClusterDeleting_Call) Run(run func(id *string)) *ConsoleClientMock_IsClusterDeleting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsClusterDeleting_Call) Return(_a0 bool) *ConsoleClientMock_IsClusterDeleting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsClusterDeleting_Call) RunAndReturn(run func(*string) bool) *ConsoleClientMock_IsClusterDeleting_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterExisting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsClusterExisting(id *string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterExisting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsClusterExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterExisting'
type ConsoleClientMock_IsClusterExisting_Call struct {
	*mock.Call
}

// IsClusterExisting is a helper method to define mock.On call
//   - id *string
func (_e *ConsoleClientMock_Expecter) IsClusterExisting(id interface{}) *ConsoleClientMock_IsClusterExisting_Call {
	return &ConsoleClientMock_IsClusterExisting_Call{Call: _e.mock.On("IsClusterExisting", id)}
}

func (_c *ConsoleClientMock_IsClusterExisting_Call) Run(run func(id *string)) *ConsoleClientMock_IsClusterExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsClusterExisting_Call) Return(_a0 bool) *ConsoleClientMock_IsClusterExisting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsClusterExisting_Call) RunAndReturn(run func(*string) bool) *ConsoleClientMock_IsClusterExisting_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterRestoreExisting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsClusterRestoreExisting(id string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterRestoreExisting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsClusterRestoreExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterRestoreExisting'
type ConsoleClientMock_IsClusterRestoreExisting_Call struct {
	*mock.Call
}

// IsClusterRestoreExisting is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) IsClusterRestoreExisting(id interface{}) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	return &ConsoleClientMock_IsClusterRestoreExisting_Call{Call: _e.mock.On("IsClusterRestoreExisting", id)}
}

func (_c *ConsoleClientMock_IsClusterRestoreExisting_Call) Run(run func(id string)) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsClusterRestoreExisting_Call) Return(_a0 bool) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsClusterRestoreExisting_Call) RunAndReturn(run func(string) bool) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	_c.Call.Return(run)
	return _c
}

// IsPipelineExisting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsPipelineExisting(id string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsPipelineExisting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsPipelineExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPipelineExisting'
type ConsoleClientMock_IsPipelineExisting_Call struct {
	*mock.Call
}

// IsPipelineExisting is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) IsPipelineExisting(id interface{}) *ConsoleClientMock_IsPipelineExisting_Call {
	return &ConsoleClientMock_IsPipelineExisting_Call{Call: _e.mock.On("IsPipelineExisting", id)}
}

func (_c *ConsoleClientMock_IsPipelineExisting_Call) Run(run func(id string)) *ConsoleClientMock_IsPipelineExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsPipelineExisting_Call) Return(_a0 bool) *ConsoleClientMock_IsPipelineExisting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsPipelineExisting_Call) RunAndReturn(run func(string) bool) *ConsoleClientMock_IsPipelineExisting_Call {
	_c.Call.Return(run)
	return _c
}

// IsPrAutomationExists provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsPrAutomationExists(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsPrAutomationExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsPrAutomationExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPrAutomationExists'
type ConsoleClientMock_IsPrAutomationExists_Call struct {
	*mock.Call
}

// IsPrAutomationExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsPrAutomationExists(ctx interface{}, id interface{}) *ConsoleClientMock_IsPrAutomationExists_Call {
	return &ConsoleClientMock_IsPrAutomationExists_Call{Call: _e.mock.On("IsPrAutomationExists", ctx, id)}
}

func (_c *ConsoleClientMock_IsPrAutomationExists_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsPrAutomationExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExists_Call) Return(_a0 bool) *ConsoleClientMock_IsPrAutomationExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExists_Call) RunAndReturn(run func(context.Context, string) bool) *ConsoleClientMock_IsPrAutomationExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsPrAutomationExistsByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) IsPrAutomationExistsByName(ctx context.Context, name string) bool {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsPrAutomationExistsByName")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsPrAutomationExistsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPrAutomationExistsByName'
type ConsoleClientMock_IsPrAutomationExistsByName_Call struct {
	*mock.Call
}

// IsPrAutomationExistsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) IsPrAutomationExistsByName(ctx interface{}, name interface{}) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	return &ConsoleClientMock_IsPrAutomationExistsByName_Call{Call: _e.mock.On("IsPrAutomationExistsByName", ctx, name)}
}

func (_c *ConsoleClientMock_IsPrAutomationExistsByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExistsByName_Call) Return(_a0 bool) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExistsByName_Call) RunAndReturn(run func(context.Context, string) bool) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	_c.Call.Return(run)
	return _c
}

// IsProviderDeleting provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsProviderDeleting(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsProviderDeleting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsProviderDeleting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProviderDeleting'
type ConsoleClientMock_IsProviderDeleting_Call struct {
	*mock.Call
}

// IsProviderDeleting is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsProviderDeleting(ctx interface{}, id interface{}) *ConsoleClientMock_IsProviderDeleting_Call {
	return &ConsoleClientMock_IsProviderDeleting_Call{Call: _e.mock.On("IsProviderDeleting", ctx, id)}
}

func (_c *ConsoleClientMock_IsProviderDeleting_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsProviderDeleting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsProviderDeleting_Call) Return(_a0 bool) *ConsoleClientMock_IsProviderDeleting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsProviderDeleting_Call) RunAndReturn(run func(context.Context, string) bool) *ConsoleClientMock_IsProviderDeleting_Call {
	_c.Call.Return(run)
	return _c
}

// IsProviderExists provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsProviderExists(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsProviderExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsProviderExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProviderExists'
type ConsoleClientMock_IsProviderExists_Call struct {
	*mock.Call
}

// IsProviderExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsProviderExists(ctx interface{}, id interface{}) *ConsoleClientMock_IsProviderExists_Call {
	return &ConsoleClientMock_IsProviderExists_Call{Call: _e.mock.On("IsProviderExists", ctx, id)}
}

func (_c *ConsoleClientMock_IsProviderExists_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsProviderExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsProviderExists_Call) Return(_a0 bool) *ConsoleClientMock_IsProviderExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsProviderExists_Call) RunAndReturn(run func(context.Context, string) bool) *ConsoleClientMock_IsProviderExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsScmConnectionExists provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) IsScmConnectionExists(ctx context.Context, name string) bool {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsScmConnectionExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsScmConnectionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsScmConnectionExists'
type ConsoleClientMock_IsScmConnectionExists_Call struct {
	*mock.Call
}

// IsScmConnectionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) IsScmConnectionExists(ctx interface{}, name interface{}) *ConsoleClientMock_IsScmConnectionExists_Call {
	return &ConsoleClientMock_IsScmConnectionExists_Call{Call: _e.mock.On("IsScmConnectionExists", ctx, name)}
}

func (_c *ConsoleClientMock_IsScmConnectionExists_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_IsScmConnectionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsScmConnectionExists_Call) Return(_a0 bool) *ConsoleClientMock_IsScmConnectionExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsScmConnectionExists_Call) RunAndReturn(run func(context.Context, string) bool) *ConsoleClientMock_IsScmConnectionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields:
func (_m *ConsoleClientMock) ListClusters() (*gqlclient.ListClusters, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *gqlclient.ListClusters
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gqlclient.ListClusters, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gqlclient.ListClusters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ListClusters)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type ConsoleClientMock_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) ListClusters() *ConsoleClientMock_ListClusters_Call {
	return &ConsoleClientMock_ListClusters_Call{Call: _e.mock.On("ListClusters")}
}

func (_c *ConsoleClientMock_ListClusters_Call) Run(run func()) *ConsoleClientMock_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_ListClusters_Call) Return(_a0 *gqlclient.ListClusters, _a1 error) *ConsoleClientMock_ListClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_ListClusters_Call) RunAndReturn(run func() (*gqlclient.ListClusters, error)) *ConsoleClientMock_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function with given fields:
func (_m *ConsoleClientMock) ListPipelines() (*gqlclient.GetPipelines, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *gqlclient.GetPipelines
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gqlclient.GetPipelines, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gqlclient.GetPipelines); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GetPipelines)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type ConsoleClientMock_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) ListPipelines() *ConsoleClientMock_ListPipelines_Call {
	return &ConsoleClientMock_ListPipelines_Call{Call: _e.mock.On("ListPipelines")}
}

func (_c *ConsoleClientMock_ListPipelines_Call) Run(run func()) *ConsoleClientMock_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_ListPipelines_Call) Return(_a0 *gqlclient.GetPipelines, _a1 error) *ConsoleClientMock_ListPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_ListPipelines_Call) RunAndReturn(run func() (*gqlclient.GetPipelines, error)) *ConsoleClientMock_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositories provides a mock function with given fields:
func (_m *ConsoleClientMock) ListRepositories() (*gqlclient.ListGitRepositories, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 *gqlclient.ListGitRepositories
	var r1 error
	if rf, ok := ret.Get(0).(func() (*gqlclient.ListGitRepositories, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *gqlclient.ListGitRepositories); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ListGitRepositories)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_ListRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositories'
type ConsoleClientMock_ListRepositories_Call struct {
	*mock.Call
}

// ListRepositories is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) ListRepositories() *ConsoleClientMock_ListRepositories_Call {
	return &ConsoleClientMock_ListRepositories_Call{Call: _e.mock.On("ListRepositories")}
}

func (_c *ConsoleClientMock_ListRepositories_Call) Run(run func()) *ConsoleClientMock_ListRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_ListRepositories_Call) Return(_a0 *gqlclient.ListGitRepositories, _a1 error) *ConsoleClientMock_ListRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_ListRepositories_Call) RunAndReturn(run func() (*gqlclient.ListGitRepositories, error)) *ConsoleClientMock_ListRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// SavePipeline provides a mock function with given fields: name, attrs
func (_m *ConsoleClientMock) SavePipeline(name string, attrs gqlclient.PipelineAttributes) (*gqlclient.PipelineFragment, error) {
	ret := _m.Called(name, attrs)

	if len(ret) == 0 {
		panic("no return value specified for SavePipeline")
	}

	var r0 *gqlclient.PipelineFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.PipelineAttributes) (*gqlclient.PipelineFragment, error)); ok {
		return rf(name, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.PipelineAttributes) *gqlclient.PipelineFragment); ok {
		r0 = rf(name, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PipelineFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.PipelineAttributes) error); ok {
		r1 = rf(name, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_SavePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePipeline'
type ConsoleClientMock_SavePipeline_Call struct {
	*mock.Call
}

// SavePipeline is a helper method to define mock.On call
//   - name string
//   - attrs gqlclient.PipelineAttributes
func (_e *ConsoleClientMock_Expecter) SavePipeline(name interface{}, attrs interface{}) *ConsoleClientMock_SavePipeline_Call {
	return &ConsoleClientMock_SavePipeline_Call{Call: _e.mock.On("SavePipeline", name, attrs)}
}

func (_c *ConsoleClientMock_SavePipeline_Call) Run(run func(name string, attrs gqlclient.PipelineAttributes)) *ConsoleClientMock_SavePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.PipelineAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_SavePipeline_Call) Return(_a0 *gqlclient.PipelineFragment, _a1 error) *ConsoleClientMock_SavePipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_SavePipeline_Call) RunAndReturn(run func(string, gqlclient.PipelineAttributes) (*gqlclient.PipelineFragment, error)) *ConsoleClientMock_SavePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCluster provides a mock function with given fields: id, attrs
func (_m *ConsoleClientMock) UpdateCluster(id string, attrs gqlclient.ClusterUpdateAttributes) (*gqlclient.ClusterFragment, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *gqlclient.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.ClusterUpdateAttributes) (*gqlclient.ClusterFragment, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.ClusterUpdateAttributes) *gqlclient.ClusterFragment); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.ClusterUpdateAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type ConsoleClientMock_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//   - id string
//   - attrs gqlclient.ClusterUpdateAttributes
func (_e *ConsoleClientMock_Expecter) UpdateCluster(id interface{}, attrs interface{}) *ConsoleClientMock_UpdateCluster_Call {
	return &ConsoleClientMock_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster", id, attrs)}
}

func (_c *ConsoleClientMock_UpdateCluster_Call) Run(run func(id string, attrs gqlclient.ClusterUpdateAttributes)) *ConsoleClientMock_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.ClusterUpdateAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateCluster_Call) Return(_a0 *gqlclient.ClusterFragment, _a1 error) *ConsoleClientMock_UpdateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateCluster_Call) RunAndReturn(run func(string, gqlclient.ClusterUpdateAttributes) (*gqlclient.ClusterFragment, error)) *ConsoleClientMock_UpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterRestore provides a mock function with given fields: id, attrs
func (_m *ConsoleClientMock) UpdateClusterRestore(id string, attrs gqlclient.RestoreAttributes) (*gqlclient.ClusterRestoreFragment, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterRestore")
	}

	var r0 *gqlclient.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.RestoreAttributes) (*gqlclient.ClusterRestoreFragment, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.RestoreAttributes) *gqlclient.ClusterRestoreFragment); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.RestoreAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterRestore'
type ConsoleClientMock_UpdateClusterRestore_Call struct {
	*mock.Call
}

// UpdateClusterRestore is a helper method to define mock.On call
//   - id string
//   - attrs gqlclient.RestoreAttributes
func (_e *ConsoleClientMock_Expecter) UpdateClusterRestore(id interface{}, attrs interface{}) *ConsoleClientMock_UpdateClusterRestore_Call {
	return &ConsoleClientMock_UpdateClusterRestore_Call{Call: _e.mock.On("UpdateClusterRestore", id, attrs)}
}

func (_c *ConsoleClientMock_UpdateClusterRestore_Call) Run(run func(id string, attrs gqlclient.RestoreAttributes)) *ConsoleClientMock_UpdateClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.RestoreAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateClusterRestore_Call) Return(_a0 *gqlclient.ClusterRestoreFragment, _a1 error) *ConsoleClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateClusterRestore_Call) RunAndReturn(run func(string, gqlclient.RestoreAttributes) (*gqlclient.ClusterRestoreFragment, error)) *ConsoleClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponents provides a mock function with given fields: id, components, errs
func (_m *ConsoleClientMock) UpdateComponents(id string, components []*gqlclient.ComponentAttributes, errs []*gqlclient.ServiceErrorAttributes) error {
	ret := _m.Called(id, components, errs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*gqlclient.ComponentAttributes, []*gqlclient.ServiceErrorAttributes) error); ok {
		r0 = rf(id, components, errs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_UpdateComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponents'
type ConsoleClientMock_UpdateComponents_Call struct {
	*mock.Call
}

// UpdateComponents is a helper method to define mock.On call
//   - id string
//   - components []*gqlclient.ComponentAttributes
//   - errs []*gqlclient.ServiceErrorAttributes
func (_e *ConsoleClientMock_Expecter) UpdateComponents(id interface{}, components interface{}, errs interface{}) *ConsoleClientMock_UpdateComponents_Call {
	return &ConsoleClientMock_UpdateComponents_Call{Call: _e.mock.On("UpdateComponents", id, components, errs)}
}

func (_c *ConsoleClientMock_UpdateComponents_Call) Run(run func(id string, components []*gqlclient.ComponentAttributes, errs []*gqlclient.ServiceErrorAttributes)) *ConsoleClientMock_UpdateComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*gqlclient.ComponentAttributes), args[2].([]*gqlclient.ServiceErrorAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateComponents_Call) Return(_a0 error) *ConsoleClientMock_UpdateComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_UpdateComponents_Call) RunAndReturn(run func(string, []*gqlclient.ComponentAttributes, []*gqlclient.ServiceErrorAttributes) error) *ConsoleClientMock_UpdateComponents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalService provides a mock function with given fields: id, attributes
func (_m *ConsoleClientMock) UpdateGlobalService(id string, attributes gqlclient.GlobalServiceAttributes) (*gqlclient.GlobalServiceFragment, error) {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalService")
	}

	var r0 *gqlclient.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.GlobalServiceAttributes) (*gqlclient.GlobalServiceFragment, error)); ok {
		return rf(id, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.GlobalServiceAttributes) *gqlclient.GlobalServiceFragment); ok {
		r0 = rf(id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.GlobalServiceAttributes) error); ok {
		r1 = rf(id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalService'
type ConsoleClientMock_UpdateGlobalService_Call struct {
	*mock.Call
}

// UpdateGlobalService is a helper method to define mock.On call
//   - id string
//   - attributes gqlclient.GlobalServiceAttributes
func (_e *ConsoleClientMock_Expecter) UpdateGlobalService(id interface{}, attributes interface{}) *ConsoleClientMock_UpdateGlobalService_Call {
	return &ConsoleClientMock_UpdateGlobalService_Call{Call: _e.mock.On("UpdateGlobalService", id, attributes)}
}

func (_c *ConsoleClientMock_UpdateGlobalService_Call) Run(run func(id string, attributes gqlclient.GlobalServiceAttributes)) *ConsoleClientMock_UpdateGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.GlobalServiceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateGlobalService_Call) Return(_a0 *gqlclient.GlobalServiceFragment, _a1 error) *ConsoleClientMock_UpdateGlobalService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateGlobalService_Call) RunAndReturn(run func(string, gqlclient.GlobalServiceAttributes) (*gqlclient.GlobalServiceFragment, error)) *ConsoleClientMock_UpdateGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrAutomation provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdatePrAutomation(ctx context.Context, id string, attributes gqlclient.PrAutomationAttributes) (*gqlclient.PrAutomationFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrAutomation")
	}

	var r0 *gqlclient.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gqlclient.PrAutomationAttributes) (*gqlclient.PrAutomationFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gqlclient.PrAutomationAttributes) *gqlclient.PrAutomationFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gqlclient.PrAutomationAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdatePrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrAutomation'
type ConsoleClientMock_UpdatePrAutomation_Call struct {
	*mock.Call
}

// UpdatePrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes gqlclient.PrAutomationAttributes
func (_e *ConsoleClientMock_Expecter) UpdatePrAutomation(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdatePrAutomation_Call {
	return &ConsoleClientMock_UpdatePrAutomation_Call{Call: _e.mock.On("UpdatePrAutomation", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdatePrAutomation_Call) Run(run func(ctx context.Context, id string, attributes gqlclient.PrAutomationAttributes)) *ConsoleClientMock_UpdatePrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(gqlclient.PrAutomationAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdatePrAutomation_Call) Return(_a0 *gqlclient.PrAutomationFragment, _a1 error) *ConsoleClientMock_UpdatePrAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdatePrAutomation_Call) RunAndReturn(run func(context.Context, string, gqlclient.PrAutomationAttributes) (*gqlclient.PrAutomationFragment, error)) *ConsoleClientMock_UpdatePrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProvider provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateProvider(ctx context.Context, id string, attributes gqlclient.ClusterProviderUpdateAttributes) (*gqlclient.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 *gqlclient.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gqlclient.ClusterProviderUpdateAttributes) (*gqlclient.ClusterProviderFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gqlclient.ClusterProviderUpdateAttributes) *gqlclient.ClusterProviderFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gqlclient.ClusterProviderUpdateAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'
type ConsoleClientMock_UpdateProvider_Call struct {
	*mock.Call
}

// UpdateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes gqlclient.ClusterProviderUpdateAttributes
func (_e *ConsoleClientMock_Expecter) UpdateProvider(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateProvider_Call {
	return &ConsoleClientMock_UpdateProvider_Call{Call: _e.mock.On("UpdateProvider", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateProvider_Call) Run(run func(ctx context.Context, id string, attributes gqlclient.ClusterProviderUpdateAttributes)) *ConsoleClientMock_UpdateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(gqlclient.ClusterProviderUpdateAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateProvider_Call) Return(_a0 *gqlclient.ClusterProviderFragment, _a1 error) *ConsoleClientMock_UpdateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateProvider_Call) RunAndReturn(run func(context.Context, string, gqlclient.ClusterProviderUpdateAttributes) (*gqlclient.ClusterProviderFragment, error)) *ConsoleClientMock_UpdateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepository provides a mock function with given fields: id, attrs
func (_m *ConsoleClientMock) UpdateRepository(id string, attrs gqlclient.GitAttributes) (*gqlclient.UpdateGitRepository, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepository")
	}

	var r0 *gqlclient.UpdateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.GitAttributes) (*gqlclient.UpdateGitRepository, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, gqlclient.GitAttributes) *gqlclient.UpdateGitRepository); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.UpdateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, gqlclient.GitAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepository'
type ConsoleClientMock_UpdateRepository_Call struct {
	*mock.Call
}

// UpdateRepository is a helper method to define mock.On call
//   - id string
//   - attrs gqlclient.GitAttributes
func (_e *ConsoleClientMock_Expecter) UpdateRepository(id interface{}, attrs interface{}) *ConsoleClientMock_UpdateRepository_Call {
	return &ConsoleClientMock_UpdateRepository_Call{Call: _e.mock.On("UpdateRepository", id, attrs)}
}

func (_c *ConsoleClientMock_UpdateRepository_Call) Run(run func(id string, attrs gqlclient.GitAttributes)) *ConsoleClientMock_UpdateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.GitAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateRepository_Call) Return(_a0 *gqlclient.UpdateGitRepository, _a1 error) *ConsoleClientMock_UpdateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateRepository_Call) RunAndReturn(run func(string, gqlclient.GitAttributes) (*gqlclient.UpdateGitRepository, error)) *ConsoleClientMock_UpdateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScmConnection provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateScmConnection(ctx context.Context, id string, attributes gqlclient.ScmConnectionAttributes) (*gqlclient.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScmConnection")
	}

	var r0 *gqlclient.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, gqlclient.ScmConnectionAttributes) (*gqlclient.ScmConnectionFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, gqlclient.ScmConnectionAttributes) *gqlclient.ScmConnectionFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gqlclient.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, gqlclient.ScmConnectionAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScmConnection'
type ConsoleClientMock_UpdateScmConnection_Call struct {
	*mock.Call
}

// UpdateScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes gqlclient.ScmConnectionAttributes
func (_e *ConsoleClientMock_Expecter) UpdateScmConnection(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateScmConnection_Call {
	return &ConsoleClientMock_UpdateScmConnection_Call{Call: _e.mock.On("UpdateScmConnection", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateScmConnection_Call) Run(run func(ctx context.Context, id string, attributes gqlclient.ScmConnectionAttributes)) *ConsoleClientMock_UpdateScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(gqlclient.ScmConnectionAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateScmConnection_Call) Return(_a0 *gqlclient.ScmConnectionFragment, _a1 error) *ConsoleClientMock_UpdateScmConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateScmConnection_Call) RunAndReturn(run func(context.Context, string, gqlclient.ScmConnectionAttributes) (*gqlclient.ScmConnectionFragment, error)) *ConsoleClientMock_UpdateScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: serviceId, attributes
func (_m *ConsoleClientMock) UpdateService(serviceId string, attributes gqlclient.ServiceUpdateAttributes) error {
	ret := _m.Called(serviceId, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, gqlclient.ServiceUpdateAttributes) error); ok {
		r0 = rf(serviceId, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type ConsoleClientMock_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - serviceId string
//   - attributes gqlclient.ServiceUpdateAttributes
func (_e *ConsoleClientMock_Expecter) UpdateService(serviceId interface{}, attributes interface{}) *ConsoleClientMock_UpdateService_Call {
	return &ConsoleClientMock_UpdateService_Call{Call: _e.mock.On("UpdateService", serviceId, attributes)}
}

func (_c *ConsoleClientMock_UpdateService_Call) Run(run func(serviceId string, attributes gqlclient.ServiceUpdateAttributes)) *ConsoleClientMock_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gqlclient.ServiceUpdateAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateService_Call) Return(_a0 error) *ConsoleClientMock_UpdateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_UpdateService_Call) RunAndReturn(run func(string, gqlclient.ServiceUpdateAttributes) error) *ConsoleClientMock_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsoleClientMock creates a new instance of ConsoleClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsoleClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsoleClientMock {
	mock := &ConsoleClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
