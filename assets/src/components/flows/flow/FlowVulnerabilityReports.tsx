import { Table } from '@pluralsh/design-system'
import {
  ColActions,
  ColGrade,
  ColImage,
  ColNamespaces,
  ColSummary,
} from 'components/security/vulnerabilities/VulnReportsTableCols'
import { GqlError } from 'components/utils/Alert'
import { useFetchPaginatedData } from 'components/utils/table/useFetchPaginatedData'
import { useFlowVulnerabilityReportsQuery } from 'generated/graphql'
import { useMemo } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import { getVulnerabilityReportDetailsPath } from 'routes/securityRoutesConsts'
import { mapExistingNodes } from 'utils/graphql'

export function FlowVulnerabilityReports() {
  const { flowId } = useParams()
  const navigate = useNavigate()
  const { data, loading, error, pageInfo, fetchNextPage, setVirtualSlice } =
    useFetchPaginatedData(
      {
        queryHook: useFlowVulnerabilityReportsQuery,
        keyPath: ['flow', 'vulnerabilityReports'],
      },
      { id: flowId ?? '' }
    )

  const reports = useMemo(
    () => mapExistingNodes(data?.flow?.vulnerabilityReports),
    [data]
  )

  if (error) return <GqlError error={error} />

  return (
    <Table
      fullHeightWrap
      virtualizeRows
      data={reports}
      columns={columns}
      loading={!data && loading}
      css={{ maxHeight: '100%' }}
      onRowClick={(_e, row) => {
        navigate(
          getVulnerabilityReportDetailsPath({
            flowId,
            vulnerabilityReportId: row.original.id,
          })
        )
      }}
      hasNextPage={pageInfo?.hasNextPage}
      isFetchingNextPage={loading}
      fetchNextPage={fetchNextPage}
      onVirtualSliceChange={setVirtualSlice}
      emptyStateProps={{ message: 'No vulnerability reports found.' }}
    />
  )
}

const columns = [ColImage, ColNamespaces, ColGrade, ColSummary, ColActions]
