fragment Sentinel on Sentinel {
  id
  name
  description
  status
  lastRunAt
  git {
    ref
    folder
  }
  repository {
    id
    url
    httpsPath
  }
  checks {
    ...SentinelCheck
  }
  insertedAt
  updatedAt
}

fragment SentinelCheck on SentinelCheck {
  name
  type
  ruleFile
  configuration {
    ...SentinelCheckConfiguration
  }
}

fragment SentinelCheckConfiguration on SentinelCheckConfiguration {
  log {
    namespaces
    query
    clusterId
    facets {
      ...LogFacet
    }
  }
  kubernetes {
    group
    version
    kind
    name
    namespace
  }
  integrationTest {
    distro
    format
    tags
    job {
      ...JobGateSpec
    }
  }
}

fragment SentinelRunTiny on SentinelRun {
  id
  status
  insertedAt
  completedAt
}

fragment SentinelRun on SentinelRun {
  ...SentinelRunTiny
  results {
    ...SentinelRunResult
  }
  sentinel {
    ...Sentinel
  }
}

fragment SentinelRunResult on SentinelRunResult {
  name
  reason
  status
  successfulCount
  failedCount
  jobCount
}

fragment SentinelStatistic on SentinelStatistic {
  status
  count
}

fragment SentinelRunJobTiny on SentinelRunJob {
  id
  status
  cluster {
    ...ClusterMinimal
  }
  reference {
    namespace
    name
  }
  insertedAt
  completedAt
}

query Sentinels(
  $first: Int = 100
  $after: String
  $q: String
  $status: SentinelRunStatus
) {
  sentinels(first: $first, after: $after, q: $q, status: $status) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...Sentinel
      }
    }
  }
}

query Sentinel($id: ID, $name: String) {
  sentinel(id: $id, name: $name) {
    ...Sentinel
  }
}

query SentinelRuns($id: ID, $name: String, $first: Int = 100, $after: String) {
  sentinel(id: $id, name: $name) {
    id
    runs(first: $first, after: $after) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...SentinelRunTiny
        }
      }
    }
  }
}

query SentinelRun($id: ID!) {
  sentinelRun(id: $id) {
    ...SentinelRun
  }
}

query SentinelStatistics($q: String) {
  sentinelStatistics(q: $q) {
    ...SentinelStatistic
  }
}

query SentinelRunJobs(
  $id: ID!
  $first: Int = 100
  $after: String
  $status: SentinelRunJobStatus
  $check: String
) {
  sentinelRun(id: $id) {
    id
    jobs(first: $first, after: $after, status: $status, check: $check) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...SentinelRunJobTiny
        }
      }
    }
  }
}

mutation RunSentinel($id: ID!) {
  runSentinel(id: $id) {
    ...SentinelRunTiny
  }
}
