fragment AiPin on AiPin {
  id
  name
  insight {
    id
    ...AiInsight
  }
  thread {
    ...ChatThreadTiny
  }
  insertedAt
  updatedAt
}

fragment Chat on Chat {
  id
  content
  role
  seq
  type
  confirm
  confirmedAt
  attributes {
    file {
      name
    }
    tool {
      name
      arguments
    }
    prCall {
      context
    }
  }
  pullRequest {
    ...PullRequest
  }
  prAutomation {
    ...PrAutomation
  }
  server {
    id
    name
  }
  insertedAt
  updatedAt
}

fragment ChatThreadTiny on ChatThread {
  id
  default
  summary
  insertedAt
  updatedAt
  lastMessageAt
  settings {
    ...ChatThreadSettings
  }
  insight {
    ...AiInsightSummary
  }
  flow {
    id
    name
    icon
  }
}

fragment ChatThread on ChatThread {
  ...ChatThreadTiny
  chats(first: 100) {
    edges {
      node {
        ...Chat
      }
    }
  }
  insight {
    ...AiInsight
  }
  flow {
    ...FlowBasic
  }
  tools {
    ...McpServerTool
  }
}

fragment ChatThreadSettings on ChatThreadSettings {
  memory
}

fragment CloudConnectionTiny on CloudConnection {
  id
  name
}

query AIPins($first: Int = 100, $last: Int, $after: String, $before: String) {
  aiPins(first: $first, last: $last, after: $after, before: $before) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...AiPin
      }
    }
  }
}

query AIPin($insightId: ID, $threadId: ID) {
  aiPin(insightId: $insightId, threadId: $threadId) {
    ...AiPin
  }
}

query ChatThreads(
  $first: Int = 100
  $last: Int
  $after: String
  $before: String
) {
  chatThreads(first: $first, last: $last, after: $after, before: $before) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...ChatThreadTiny
      }
    }
  }
}

query ChatThreadDetails($id: ID!) {
  chatThread(id: $id) {
    ...ChatThread
  }
}

query CloudConnections(
  $first: Int = 100
  $last: Int
  $after: String
  $before: String
) {
  cloudConnections(first: $first, last: $last, after: $after, before: $before) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...CloudConnectionTiny
      }
    }
  }
}

mutation CreateAIPin($attributes: AiPinAttributes!) {
  createPin(attributes: $attributes) {
    ...AiPin
  }
}

mutation DeleteAIPin($id: ID!) {
  deletePin(id: $id) {
    ...AiPin
  }
}

mutation Chat($messages: [ChatMessage], $threadId: ID) {
  chat(messages: $messages, threadId: $threadId) {
    ...Chat
  }
}

mutation HybridChat($messages: [ChatMessage], $threadId: ID) {
  hybridChat(messages: $messages, threadId: $threadId) {
    ...Chat
  }
}

mutation ConfirmChat($id: ID!) {
  confirmChat(id: $id) {
    ...Chat
  }
}

mutation ConfirmChatPlan($threadId: ID!) {
  confirmPlan(threadId: $threadId) {
    ...Chat
  }
}

mutation ClearChatHistory($before: Int) {
  clearChatHistory(before: $before)
}

mutation DeleteChat($id: ID!) {
  deleteChat(id: $id) {
    ...Chat
  }
}

mutation SaveChats($messages: [ChatMessage], $threadId: ID) {
  saveChats(messages: $messages, threadId: $threadId) {
    ...Chat
  }
}

mutation CreateChatThread($attributes: ChatThreadAttributes!) {
  createThread(attributes: $attributes) {
    ...ChatThread
  }
}

mutation UpdateChatThread($id: ID!, $attributes: ChatThreadAttributes!) {
  updateThread(id: $id, attributes: $attributes) {
    ...ChatThread
  }
}

mutation DeleteChatThread($id: ID!) {
  deleteThread(id: $id) {
    ...ChatThreadTiny
  }
}

mutation CloneChatThread($id: ID!, $seq: Int) {
  cloneThread(id: $id, seq: $seq) {
    ...ChatThread
  }
}

mutation AddChatContext(
  $source: ContextSource!
  $sourceId: ID
  $threadId: ID!
) {
  addChatContext(source: $source, sourceId: $sourceId, threadId: $threadId) {
    ...Chat
  }
}

mutation ThreadPr($threadId: ID!) {
  threadPr(threadId: $threadId) {
    ...Chat
  }
}

mutation CreateAgentSession($attributes: AgentSessionAttributes!) {
  createAgentSession(attributes: $attributes) {
    ...ChatThread
  }
}

subscription AIChatStream(
  $threadId: ID
  $insightId: ID
  $scopeId: String
  $recommendationId: ID
) {
  aiStream(
    threadId: $threadId
    insightId: $insightId
    scopeId: $scopeId
    recommendationId: $recommendationId
  ) {
    seq
    message
    role
    content
  }
}
