fragment AiInsight on AiInsight {
  id
  text
  summary
  sha
  freshness
  updatedAt
  insertedAt
  error {
    message
    source
  }
  ...AiInsightContext
}

fragment AiInsightSummary on AiInsight {
  id
  summary
  freshness
  insertedAt
  updatedAt
  ...AiInsightContext
}

fragment AiInsightContext on AiInsight {
  cluster {
    id
    name
    distro
    provider {
      cloud
    }
  }
  clusterInsightComponent {
    id
    name
  }
  service {
    id
    name
    cluster {
      ...ClusterMinimal
    }
  }
  serviceComponent {
    id
    name
    service {
      id
      name
      cluster {
        ...ClusterMinimal
      }
    }
  }
  stack {
    id
    name
    type
  }
  stackRun {
    id
    message
    type
    stack {
      id
      name
    }
  }
}

fragment AiPin on AiPin {
  id
  name
  insight {
    id
    ...AiInsight
  }
  thread {
    ...ChatThreadTiny
  }
  insertedAt
  updatedAt
}

fragment Chat on Chat {
  id
  content
  role
  seq
  insertedAt
  updatedAt
}

fragment ChatThreadTiny on ChatThread {
  id
  default
  summary
  insertedAt
  updatedAt
  lastMessageAt
  insight {
    ...AiInsightSummary
  }
}

fragment ChatThread on ChatThread {
  id
  default
  summary
  insertedAt
  updatedAt
  lastMessageAt
  chats(first: 100) {
    edges {
      node {
        ...Chat
      }
    }
  }
  insight {
    ...AiInsight
  }
}

query AI($prompt: String!) {
  ai(prompt: $prompt)
}

query AICompletion(
  $system: String!
  $input: String
  $chat: [ChatMessage]
  $scopeId: String
) {
  aiCompletion(system: $system, input: $input, chat: $chat, scopeId: $scopeId)
}

query AISuggestedFix($insightID: ID!) {
  aiSuggestedFix(insightId: $insightID)
}

query AIPins($first: Int = 100, $last: Int, $after: String, $before: String) {
  aiPins(first: $first, last: $last, after: $after, before: $before) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...AiPin
      }
    }
  }
}

query AIPin($insightId: ID, $threadId: ID) {
  aiPin(insightId: $insightId, threadId: $threadId) {
    ...AiPin
  }
}

query ChatThreads(
  $first: Int = 100
  $last: Int
  $after: String
  $before: String
) {
  chatThreads(first: $first, last: $last, after: $after, before: $before) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...ChatThreadTiny
      }
    }
  }
}

query ChatThreadDetails($id: ID!) {
  chatThread(id: $id) {
    ...ChatThread
  }
}

mutation CreateAIPin($attributes: AiPinAttributes!) {
  createPin(attributes: $attributes) {
    ...AiPin
  }
}

mutation DeleteAIPin($id: ID!) {
  deletePin(id: $id) {
    ...AiPin
  }
}

mutation Chat($messages: [ChatMessage], $threadId: ID) {
  chat(messages: $messages, threadId: $threadId) {
    ...Chat
  }
}

mutation ClearChatHistory($before: Int) {
  clearChatHistory(before: $before)
}

mutation DeleteChat($id: ID!) {
  deleteChat(id: $id) {
    ...Chat
  }
}

mutation SaveChats($messages: [ChatMessage], $threadId: ID) {
  saveChats(messages: $messages, threadId: $threadId) {
    ...Chat
  }
}

mutation CreateChatThread($attributes: ChatThreadAttributes!) {
  createThread(attributes: $attributes) {
    ...ChatThread
  }
}

mutation UpdateChatThread($id: ID!, $attributes: ChatThreadAttributes!) {
  updateThread(id: $id, attributes: $attributes) {
    ...ChatThread
  }
}

mutation DeleteChatThread($id: ID!) {
  deleteThread(id: $id) {
    ...ChatThread
  }
}

mutation AiFixPr($insightId: ID!, $messages: [ChatMessage]) {
  aiFixPr(insightId: $insightId, messages: $messages) {
    ...PullRequest
  }
}

subscription AIChatStream($threadId: ID, $insightId: ID, $scopeId: String) {
  aiStream(threadId: $threadId, insightId: $insightId, scopeId: $scopeId) {
    seq
    content
  }
}
