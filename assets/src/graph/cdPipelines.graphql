fragment PipelineServiceDeployment on ServiceDeployment {
  id
  name
  namespace
  cluster {
    id
    name
  }
  status
  componentStatus
}

fragment ContainerSpec on ContainerSpec {
  args
  env {
    name
    value
  }
  envFrom {
    configMap
    secret
  }
  image
}

fragment JobGateSpec on JobGateSpec {
  annotations
  containers {
    ...ContainerSpec
  }
  labels
  namespace
  raw
  serviceAccount
}

fragment PipelineGate on PipelineGate {
  id
  name
  state
  type
  approver {
    ...User
  }
  spec {
    job {
      ...JobGateSpec
    }
  }
  insertedAt
  updatedAt
}

fragment Revision on Revision {
  id
  git {
    ref
    folder
  }
  insertedAt
  updatedAt
  message
  sha
  version
}

fragment PromotionService on PromotionService {
  id
  revision {
    ...Revision
  }
  service {
    ...PipelineServiceDeployment
  }
  insertedAt
  updatedAt
}

fragment PipelinePromotion on PipelinePromotion {
  id
  services {
    ...PromotionService
  }
  insertedAt
  updatedAt
  promotedAt
  revisedAt
}

fragment PromotionCriteria on PromotionCriteria {
  id
  secrets
  source {
    ...PipelineServiceDeployment
  }
  insertedAt
  updatedAt
}

fragment StageService on StageService {
  id
  criteria {
    ...PromotionCriteria
  }
  insertedAt
  updatedAt
  service {
    ...PipelineServiceDeployment
  }
}

fragment PipelineStage on PipelineStage {
  id
  name
  insertedAt
  updatedAt
  promotion {
    ...PipelinePromotion
  }
  services {
    ...StageService
  }
  context {
    ...PipelineContextRow
  }
}

fragment PipelineStageEdge on PipelineStageEdge {
  id
  insertedAt
  promotedAt
  updatedAt
  gates {
    ...PipelineGate
  }
  from {
    ...PipelineStage
  }
  to {
    ...PipelineStage
  }
}

fragment PipelineStatus on PipelineStatus {
  closed
  pending
}

fragment PipelineContextRow on PipelineContext {
  id
  context
  insertedAt
  updatedAt
  pullRequests {
    ...PullRequest
  }
}

fragment Pipeline on Pipeline {
  id
  name
  insertedAt
  updatedAt
  edges {
    ...PipelineStageEdge
  }
  stages {
    ...PipelineStage
  }
  status {
    ...PipelineStatus
  }
}

query Pipelines($q: String, $first: Int = 50, $after: String) {
  pipelines(q: $q, first: $first, after: $after) {
    edges {
      cursor
      node {
        ...Pipeline
      }
    }
    pageInfo {
      ...PageInfo
    }
  }
}

fragment PipelineGateJob on Job {
  events {
    action
    count
    eventTime
    lastTimestamp
    message
    reason
    type
  }
  metadata {
    ...Metadata
  }
  pods {
    ...Pod
  }
  raw
  spec {
    activeDeadlineSeconds
    backoffLimit
    parallelism
  }
  status {
    active
    completionTime
    failed
    startTime
    succeeded
  }
}

query JobGate($id: ID!) {
  pipelineGate(id: $id) {
    ...PipelineGate
    job {
      ...PipelineGateJob
    }
  }
}

query JobGateLogs($id: ID!, $container: String!, $sinceSeconds: Int!) {
  pipelineGate(id: $id) {
    job {
      logs(container: $container, sinceSeconds: $sinceSeconds)
    }
  }
}

query Pipeline($id: ID!) {
  pipeline(id: $id) {
    ...Pipeline
  }
}

query PipelineContexts(
  $id: ID!
  $before: String
  $after: String
  $first: Int!
  $last: Int
) {
  pipeline(id: $id) {
    id
    contexts(after: $after, before: $before, first: $first, last: $last) {
      edges {
        node {
          ...PipelineContextRow
        }
      }
    }
  }
}

query PipelineContext($id: ID!) {
  pipelineContext(id: $id) {
    ...PipelineContextRow
    pipeline {
      ...Pipeline
    }
  }
}

mutation deletePipeline($id: ID!) {
  deletePipeline(id: $id) {
    ...Pipeline
  }
}

mutation ApproveGate($id: ID!) {
  approveGate(id: $id) {
    ...PipelineGate
  }
}

mutation CreatePipelineContext(
  $pipelineId: ID!
  $attributes: PipelineContextAttributes!
) {
  createPipelineContext(pipelineId: $pipelineId, attributes: $attributes) {
    ...PipelineContextRow
    pipeline {
      id
    }
  }
}
