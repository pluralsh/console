fragment MetricResponse on MetricResponse {
  metric
  values {
    timestamp
    value
  }
}

fragment ComponentMetricsFragment on ServiceDeployment {
  componentMetrics(componentId: $componentId, start: $start, stop: $stop, step: $step) {
    cpu { ...MetricResponse }
    mem { ...MetricResponse }

    podCpu { ...MetricResponse }
    podMem { ...MetricResponse }
  }
}

query ServiceDeploymentComponentMetrics(
  $id: ID,
  $name: String,
  $cluster: String,
  $componentId: ID!,
  $start: DateTime,
  $stop: DateTime,
  $step: String,
) {
  serviceDeployment(id: $id, name: $name, cluster: $cluster) {
    ...ComponentMetricsFragment
  }
}

query Usage(
  $cpu: String!
  $mem: String!
  $podCpu: String!
  $podMem: String!
  $step: String!
  $offset: Int!
  $clusterId: ID
) {
  cpu: metric(
    clusterId: $clusterId
    query: $cpu
    offset: $offset
    step: $step
  ) {
    ...MetricResponse
  }
  mem: metric(
    clusterId: $clusterId
    query: $mem
    offset: $offset
    step: $step
  ) {
    ...MetricResponse
  }
  podCpu: metric(
    clusterId: $clusterId
    query: $podCpu
    offset: $offset
    step: $step
  ) {
    ...MetricResponse
  }
  podMem: metric(
    clusterId: $clusterId
    query: $podMem
    offset: $offset
    step: $step
  ) {
    ...MetricResponse
  }
}
