fragment StackTiny on InfrastructureStack {
  id
  insertedAt
  updatedAt
  deletedAt
  name
  type
  repository {
    url
    pulledAt
  }
  paused
  status
  insight {
    ...AiInsightSummary
  }
}

fragment Stack on InfrastructureStack {
  id
  insertedAt
  deletedAt
  name
  type
  configuration {
    image
    version
  }
  repository {
    id
    url
    pulledAt
  }
  git {
    ref
    folder
  }
  cluster {
    ...ClusterTiny
  }
  paused
  status
  approval
  variables
  environment {
    name
    value
    secret
  }
  jobSpec {
    namespace
    raw
    annotations
    labels
    serviceAccount
    containers {
      image
      args
      env {
        value
        name
      }
      envFrom {
        secret
        configMap
      }
    }
  }
  tags {
    name
    value
  }
  insight {
    ...AiInsight
  }
}

fragment StackRun on StackRun {
  id
  insertedAt
  git {
    ref
  }
  message
  status
  approval
  approvedAt
  approver {
    name
    email
  }
  insight {
    ...AiInsight
  }
}

fragment ObservableMetric on ObservableMetric {
  provider {
    name
    type
  }
  identifier
}

fragment StackRunDetails on StackRun {
  id
  status
  updatedAt
  insertedAt
  type
  message
  approval
  approvedAt
  approver {
    ...User
  }
  cancellationReason
  stack {
    name
    observableMetrics {
      ...ObservableMetric
    }
  }
  configuration {
    ...StackConfiguration
  }
  state {
    ...StackState
  }
  repository {
    ...GitRepository
  }
  git {
    files
    ref
    folder
  }
  pullRequest {
    ...PullRequest
  }
  output {
    ...StackOutput
  }
  cluster {
    ...ClusterTiny
  }
  environment {
    ...StackEnvironment
  }
  errors {
    ...ServiceErrors
  }
  files {
    ...StackFile
  }
  jobSpec {
    ...JobGateSpec
  }
  steps {
    ...RunStep
  }
  insight {
    ...AiInsight
  }
}

fragment CustomStackRun on CustomStackRun {
  id
  name
  documentation
  commands {
    args
    cmd
  }
  configuration {
    ...PrConfiguration
  }
}

fragment StackConfiguration on StackConfiguration {
  version
  image
}

fragment StackStateResource on StackStateResource {
  name
  resource
  identifier
  links
  configuration
}

fragment StackState on StackState {
  id
  plan
  state {
    ...StackStateResource
  }
}

fragment StackOutput on StackOutput {
  name
  value
  secret
}

fragment StackEnvironment on StackEnvironment {
  name
  value
  secret
}

fragment ServiceErrors on ServiceError {
  source
  message
}

fragment StackFile on StackFile {
  path
  content
}

fragment RunStep on RunStep {
  id
  name
  insertedAt
  updatedAt
  status
  stage
  args
  cmd
  index
  logs {
    id
    updatedAt
    insertedAt
    logs
  }
}

query StackPrs(
  $id: ID!
  $after: String
  $before: String
  $first: Int = 100
  $last: Int
) {
  infrastructureStack(id: $id) {
    id
    pullRequests(after: $after, before: $before, first: $first, last: $last) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...PullRequest
        }
      }
    }
  }
}

query Stacks(
  $q: String
  $after: String
  $before: String
  $first: Int = 100
  $last: Int
  $projectId: ID
  $tagQuery: TagQuery
) {
  infrastructureStacks(
    q: $q
    after: $after
    before: $before
    first: $first
    last: $last
    projectId: $projectId
    tagQuery: $tagQuery
  ) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...StackTiny
      }
    }
  }
}

query Stack($id: ID!) {
  infrastructureStack(id: $id) {
    ...Stack
  }
}

query StackTiny($id: ID!) {
  infrastructureStack(id: $id) {
    ...StackTiny
  }
}

query StackState($id: ID!) {
  infrastructureStack(id: $id) {
    state {
      id
      plan
      state {
        name
        identifier
        configuration
        links
        resource
      }
    }
  }
}

query StackOutput($id: ID!) {
  infrastructureStack(id: $id) {
    output {
      name
      secret
      value
    }
  }
}

query StackFiles($id: ID!) {
  infrastructureStack(id: $id) {
    files {
      path
      content
    }
  }
}

query StackBindings($id: ID!) {
  infrastructureStack(id: $id) {
    writeBindings {
      ...PolicyBinding
    }
    readBindings {
      ...PolicyBinding
    }
  }
}

query StackRuns(
  $id: ID!
  $after: String
  $before: String
  $first: Int = 100
  $last: Int
  $pullRequestId: ID
) {
  infrastructureStack(id: $id) {
    id
    runs(
      after: $after
      before: $before
      first: $first
      last: $last
      pullRequestId: $pullRequestId
    ) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...StackRun
        }
      }
    }
  }
}

query StackRun($id: ID!) {
  stackRun(id: $id) {
    ...StackRunDetails
  }
}

query StackRunJob($id: ID!) {
  stackRun(id: $id) {
    job {
      ...PipelineGateJob
    }
  }
}

query StackRunJobLogs($id: ID!, $container: String!, $sinceSeconds: Int!) {
  stackRun(id: $id) {
    job {
      logs(container: $container, sinceSeconds: $sinceSeconds)
    }
  }
}

query CustomStackRuns(
  $id: ID!
  $after: String
  $before: String
  $first: Int = 100
  $last: Int
) {
  infrastructureStack(id: $id) {
    id
    customStackRuns(
      after: $after
      before: $before
      first: $first
      last: $last
    ) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...CustomStackRun
        }
      }
    }
  }
}

mutation CreateStack($attributes: StackAttributes!) {
  createStack(attributes: $attributes) {
    id
  }
}

mutation CreateOnDemandRun(
  $stackId: ID!
  $context: Json
  $commands: [CommandAttributes]
) {
  onDemandRun(stackId: $stackId, context: $context, commands: $commands) {
    ...StackRun
  }
}

mutation UpdateStack($id: ID!, $attributes: StackAttributes!) {
  updateStack(id: $id, attributes: $attributes) {
    id
  }
}

mutation DetachStack($id: ID!) {
  detachStack(id: $id) {
    id
  }
}

mutation DeleteStack($id: ID!) {
  deleteStack(id: $id) {
    id
  }
}

mutation KickStack($id: ID!) {
  kickStack(id: $id) {
    ...StackRun
  }
}

mutation kickStackPullRequest($id: ID!) {
  kickStackPullRequest(id: $id) {
    ...StackRun
  }
}

mutation UpdateStackRun($id: ID!, $attributes: StackRunAttributes!) {
  updateStackRun(id: $id, attributes: $attributes) {
    ...StackRun
  }
}

mutation ApproveStackRun($id: ID!) {
  approveStackRun(id: $id) {
    ...StackRun
  }
}

mutation RestartStackRun($id: ID!) {
  restartStackRun(id: $id) {
    ...StackRun
  }
}

subscription LogsDelta($id: ID!) {
  runLogsDelta(stepId: $id) {
    delta
    payload {
      id
      logs
      insertedAt
      updatedAt
    }
  }
}
