fragment GlobalService on GlobalService {
  id
  distro
  name
  project {
    ...ProjectTiny
  }
  cascade {
    delete
    detach
  }
  provider {
    id
    name
    cloud
    namespace
  }
  reparent
  service {
    ...ServiceDeploymentsRow
  }
  tags {
    name
    value
  }
  template {
    ...ServiceTemplateWithoutConfiguration
  }
  parent {
    id
    name
  }
  insertedAt
  updatedAt
}

fragment ServiceTemplateWithoutConfiguration on ServiceTemplate {
  contexts
  dependencies {
    id
    name
    status
  }
  git {
    folder
    ref
  }
  helm {
    chart
    git {
      folder
      ref
    }
    ignoreCrds
    ignoreHooks
    release
    repository {
      name
      namespace
    }
    set {
      name
      value
    }
    url
    values
    valuesFiles
    version
  }
  kustomize {
    path
    enableHelm
  }
  name
  namespace
  repository {
    ...GitRepository
  }
  repositoryId
  syncConfig {
    createNamespace
    enforceNamespace
    namespaceMetadata {
      annotations
      labels
    }
  }
  templated
}

mutation CreateGlobalService(
  $attributes: GlobalServiceAttributes!
  $cluster: String
  $name: String
  $serviceId: ID
) {
  createGlobalService(
    attributes: $attributes
    cluster: $cluster
    name: $name
    serviceId: $serviceId
  ) {
    ...GlobalService
  }
}

mutation UpdateGlobalService($id: ID!, $attributes: GlobalServiceAttributes!) {
  updateGlobalService(id: $id, attributes: $attributes) {
    id
  }
}

mutation DeleteGlobalService($id: ID!) {
  deleteGlobalService(id: $id) {
    id
  }
}

query GlobalServices($first: Int, $after: String, $projectId: ID, $q: String) {
  globalServices(first: $first, after: $after, projectId: $projectId, q: $q) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...GlobalService
      }
    }
  }
}

query GetGlobalService($serviceId: ID!) {
  globalService(id: $serviceId) {
    ...GlobalService
  }
}

query GetGlobalServiceServices($serviceId: ID!, $first: Int, $after: String) {
  globalService(id: $serviceId) {
    services(first: $first, after: $after) {
      pageInfo {
        ...PageInfo
      }
      edges {
        node {
          ...ServiceDeploymentsRow
        }
      }
    }
  }
}

mutation SyncGlobalService($id: ID!) {
  syncGlobalService(id: $id) {
    ...GlobalService
  }
}
