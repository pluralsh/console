fragment ClusterNode on Node {
  metadata {
    ...Metadata
  }
  status {
    phase
    allocatable
    capacity
    conditions {
      type
      status
      message
    }
  }
  spec {
    podCidr
    providerId
  }
}

fragment ClusterCondition on ClusterCondition {
  lastTransitionTime
  message
  reason
  severity
  status
  type
}

fragment Taint on Taint {
  effect
  key
  value
}

fragment NodePool on NodePool {
  id
  name
  minSize
  maxSize
  instanceType
  spot
  labels
  taints {
    ...Taint
  }
}

fragment ApiDeprecation on ApiDeprecation {
  availableIn
  blocking
  component {
    group
    version
    kind
    name
    namespace
    service {
      git {
        ref
        folder
      }
      repository {
        httpsPath
        urlFormat
      }
    }
  }
  deprecatedIn
  removedIn
  replacement
}

fragment UpgradeInsight on UpgradeInsight {
  id
  name
  description
  details {
    ...UpgradeInsightDetail
  }
  refreshedAt
  transitionedAt
  version
  status
}

fragment UpgradeInsightDetail on UpgradeInsightDetail {
  id
  removedIn
  replacedIn
  replacement
  status
  used
  clientInfo {
    ...InsightClientInfo
  }
}

fragment InsightClientInfo on InsightClientInfo {
  userAgent
  count
  lastRequestAt
}

fragment RuntimeService on RuntimeService {
  id
  name
  version
  addon {
    icon
    versions {
      ...AddonVersion
    }
  }
  service {
    git {
      ref
      folder
    }
    repository {
      httpsPath
      urlFormat
    }
    helm {
      version
    }
  }
  addonVersion {
    ...AddonVersionBlocking @include(if: $hasKubeVersion)
    ...AddonVersion
  }
}

fragment RuntimeServiceDetails on RuntimeService {
  id
  name
  version
  addon {
    icon
    versions {
      ...AddonVersion
    }
    releaseUrl(version: $version)
    readme
  }
  addonVersion {
    ...AddonVersionBlocking @include(if: $hasKubeVersion)
    ...AddonVersion
  }
}

fragment AddonVersion on AddonVersion {
  version
  kube
  chartVersion
  incompatibilities {
    version
    name
  }
  requirements {
    version
    name
  }
}

fragment AddonVersionBlocking on AddonVersion {
  blocking(kubeVersion: $kubeVersion)
}

fragment ClustersRow on Cluster {
  currentVersion
  id
  self
  healthy
  healthScore
  protect
  name
  handle
  distro
  cpuTotal
  memoryTotal
  cpuUtil
  nodeCount
  namespaceCount
  availabilityZones
  podCount
  memoryUtil
  installed
  pingedAt
  deletedAt
  provider {
    id
    cloud
    name
    namespace
    supportedVersions
  }
  self
  service {
    id
    repository {
      url
    }
  }
  version
  kubeletVersion
  tags {
    name
    value
  }
  distro
  upgradePlan {
    ...ClusterUpgradePlan
  }
  virtual
  insight {
    ...AiInsightSummary
  }
}

fragment ClusterUpgradePlan on ClusterUpgradePlan {
  compatibilities
  deprecations
  incompatibilities
  kubeletSkew
}

fragment ClusterNodeMetrics on Cluster {
  id
  clusterNodeMetrics(node: $node, start: $start, stop: $stop, step: $step) {
    cpu {
      ...MetricResponse
    }
    cpuUsage {
      ...MetricResponse
    }

    memory {
      ...MetricResponse
    }
    memoryUsage {
      ...MetricResponse
    }
  }
}

fragment Cluster on Cluster {
  ...ClustersRow
  apiDeprecations {
    ...ApiDeprecation
  }
  currentVersion
  id
  name
  handle
  metadata
  nodePools {
    ...NodePool
  }
  pingedAt
  provider {
    id
    cloud
    name
    namespace
    supportedVersions
  }
  self
  service {
    id
    name
    repository {
      url
    }
  }
  version
  tags {
    name
    value
  }
  parentCluster {
    ...ClustersRow
  }
  operationalLayout {
    serviceMesh
  }
  alerts(first: 500) {
    # just to get the count
    edges {
      node {
        id
      }
    }
  }
}

fragment ClusterInsight on Cluster {
  id
  insight {
    ...AiInsight
  }
  insightComponents {
    ...ClusterInsightComponent
  }
}

fragment CloudAddon on CloudAddon {
  id
  insertedAt
  updatedAt
  name
  distro
  info {
    name
    publisher
    versions {
      version
      compatibilities
      ...CloudAddonVersionInformation @include(if: $hasKubeVersion)
    }
  }
  version
  versionInfo {
    version
    compatibilities
    ...CloudAddonVersionInformation @include(if: $hasKubeVersion)
  }
}

fragment CloudAddonVersionInformation on CloudAddonVersionInformation {
  blocking(kubeVersion: $kubeVersion)
}

query Clusters(
  $first: Int
  $after: String
  $q: String
  $healthy: Boolean
  $tagQuery: TagQuery
  $projectId: ID
  $upgradeable: Boolean
  $compliance: VersionCompliance
  $healthRange: HealthRange
) {
  clusters(
    first: $first
    after: $after
    q: $q
    healthy: $healthy
    tagQuery: $tagQuery
    projectId: $projectId
    upgradeable: $upgradeable
    compliance: $compliance
    healthRange: $healthRange
  ) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...ClustersRow
      }
    }
  }
  clusterStatuses(q: $q, projectId: $projectId) {
    ...ClusterStatusInfo
  }
  upgradeStatistics(q: $q, projectId: $projectId) {
    upgradeable
    count
  }
  tags
}

fragment ClusterMinimal on Cluster {
  id
  name
  handle
  provider {
    name
    cloud
  }
  distro
}

fragment ClusterTiny on Cluster {
  ...ClusterMinimal
  self
  upgradePlan {
    compatibilities
    deprecations
    incompatibilities
  }
  virtual
}

fragment ClusterBasic on Cluster {
  ...ClusterTiny
  protect
  deletedAt
  version
  currentVersion
}

fragment ClusterRuntimeServices on Cluster {
  id
  name
  currentVersion
  version
  runtimeServices {
    ...RuntimeService
  }
  apiDeprecations {
    ...ApiDeprecation
  }
  upgradeInsights {
    ...UpgradeInsight
  }
  cloudAddons {
    ...CloudAddon
  }
}

fragment ClusterWithNodes on Cluster {
  ...ClusterBasic
  nodes {
    ...ClusterNode
  }
  nodeMetrics {
    ...NodeMetric
  }
}

fragment ClusterWithMetrics on Cluster {
  ...ClusterWithNodes
  clusterMetrics(start: $start, stop: $stop, step: $step) {
    cpu {
      ...MetricResponse
    }
    cpuUsage {
      ...MetricResponse
    }
    cpuRequests {
      ...MetricResponse
    }
    cpuLimits {
      ...MetricResponse
    }
    memory {
      ...MetricResponse
    }
    memoryUsage {
      ...MetricResponse
    }
    memoryRequests {
      ...MetricResponse
    }
    memoryLimits {
      ...MetricResponse
    }
    pods {
      ...MetricResponse
    }
  }
}

query ClustersTiny($projectId: ID, $first: Int) {
  clusters(first: $first, projectId: $projectId) {
    edges {
      node {
        ...ClusterTiny
      }
    }
  }
}

query VClusters(
  $parentId: ID!
  $first: Int
  $after: String
  $q: String
  $healthy: Boolean
  $projectId: ID
) {
  clusters(
    first: $first
    after: $after
    q: $q
    healthy: $healthy
    projectId: $projectId
    parentId: $parentId
  ) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...ClustersRow
      }
    }
  }
  tags
}

query ClusterSelector(
  $first: Int
  $after: String
  $q: String
  $currentClusterId: ID
  $projectId: ID
) {
  clusters(first: $first, after: $after, q: $q, projectId: $projectId) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...ClusterTiny
      }
    }
  }
  cluster(id: $currentClusterId) {
    ...ClusterTiny
  }
}

query Cluster($id: ID, $handle: String) {
  cluster(id: $id, handle: $handle) {
    ...Cluster
  }
}

query ClusterBasic($id: ID!) {
  cluster(id: $id) {
    ...ClusterBasic
  }
}

query ClusterInsight($id: ID!) {
  cluster(id: $id) {
    ...ClusterInsight
  }
}

query ClusterNodes($id: ID!) {
  cluster(id: $id) {
    ...ClusterWithNodes
  }
}

query ClusterPods(
  $clusterId: ID
  $namespace: String
  $first: Int
  $after: String
  $before: String
  $last: Int
) {
  pods(
    first: $first
    after: $after
    before: $before
    last: $last
    clusterId: $clusterId
    namespace: $namespace
  ) {
    pageInfo {
      ...PageInfo
    }
    edges {
      node {
        ...Pod
      }
    }
  }
}

query ClusterNamespaces($clusterId: ID) {
  namespaces(clusterId: $clusterId) {
    metadata {
      ...Metadata
    }
  }
}

fragment PolicyBinding on PolicyBinding {
  id
  user {
    id
    name
    email
  }
  group {
    id
    name
  }
}

fragment ClusterBindings on Cluster {
  id
  readBindings {
    ...PolicyBinding
  }
  writeBindings {
    ...PolicyBinding
  }
}

query ClusterBindings($id: ID!) {
  cluster(id: $id) {
    ...ClusterBindings
  }
}

query RuntimeServices(
  $id: ID!
  $kubeVersion: String!
  $hasKubeVersion: Boolean!
) {
  cluster(id: $id) {
    ...ClusterRuntimeServices
  }
}

query RuntimeService(
  $id: ID!
  $version: String!
  $kubeVersion: String!
  $hasKubeVersion: Boolean!
) {
  runtimeService(id: $id) {
    ...RuntimeServiceDetails
  }
}

mutation UpdateClusterBindings($id: ID!, $rbac: RbacAttributes!) {
  updateRbac(clusterId: $id, rbac: $rbac)
}

mutation UpdateCluster($id: ID!, $attributes: ClusterUpdateAttributes!) {
  updateCluster(id: $id, attributes: $attributes) {
    ...Cluster
  }
}

mutation CreateCluster($attributes: ClusterAttributes!) {
  createCluster(attributes: $attributes) {
    ...Cluster
    deployToken
  }
}

mutation DeleteCluster($id: ID!) {
  deleteCluster(id: $id) {
    ...Cluster
  }
}

mutation DetachCluster($id: ID!) {
  detachCluster(id: $id) {
    ...Cluster
  }
}

fragment ClusterStatusInfo on ClusterStatusInfo {
  count
  healthy
}

query ClusterStatuses {
  clusterStatuses {
    ...ClusterStatusInfo
  }
}

query TagPairs($first: Int = 30, $q: String, $tag: String, $type: TagType) {
  tagPairs(first: $first, q: $q, tag: $tag, type: $type) {
    edges {
      node {
        name
        value
        id
      }
    }
  }
}

query ClusterMetrics(
  $clusterId: ID!
  $start: DateTime
  $stop: DateTime
  $step: String
) {
  cluster(id: $clusterId) {
    ...ClusterWithMetrics
  }
}

query ClusterNodeMetrics(
  $clusterId: ID!
  $node: String!
  $start: DateTime
  $stop: DateTime
  $step: String
) {
  cluster(id: $clusterId) {
    ...ClusterNodeMetrics
  }
}

fragment NetworkMeshWorkload on NetworkMeshWorkload {
  id
  name
  namespace
  service
}

fragment NetworkMeshStatistics on NetworkMeshStatistics {
  bytes
  packets
  connections
  http200
  http400
  http500
  httpClientLatency
}

fragment NetworkMeshEdge on NetworkMeshEdge {
  id
  from {
    ...NetworkMeshWorkload
  }
  to {
    ...NetworkMeshWorkload
  }
  statistics {
    ...NetworkMeshStatistics
  }
}

query ClusterNetworkGraph($clusterId: ID!, $time: DateTime) {
  cluster(id: $clusterId) {
    id
    networkGraph(time: $time) {
      ...NetworkMeshEdge
    }
  }
}
