fragment Container on pod_Container {
  name
  args
  commands
  image
  securityContext @type(name: "v1_SecurityContext") {
    ...SecurityContext
  }
  livenessProbe @type(name: "v1_Probe") {
    ...Probe
  }
  readinessProbe @type(name: "v1_Probe") {
    ...Probe
  }
  status @type(name: "v1_ContainerStatus") {
    name
    started
    ready
    containerID
    image
    imageID
    restartCount
    resources {
      claims {
        name
      }
    }
    lastState @type(name: "v1_ContainerState") {
      ...State
    }
    state @type(name: "v1_ContainerState") {
      ...State
    }
  }
  resources {
    requests
    limits
    claims {
      name
    }
  }
}

fragment State on v1_ContainerState {
  running {
    startedAt
  }
  terminated {
    startedAt
    reason
    message
    containerID
    exitCode
    finishedAt
    signal
  }
  waiting {
    message
    reason
  }
}

fragment PodSecurityContext on v1_PodSecurityContext {
  fsGroup
  fsGroupChangePolicy
  runAsUser
  runAsGroup
  runAsNonRoot
  seccompProfile {
    type
    localhostProfile
  }
  seLinuxOptions {
    type
    level
    role
    user
  }
  supplementalGroups
  sysctls {
    name
    value
  }
  windowsOptions {
    gmsaCredentialSpec
    gmsaCredentialSpecName
    hostProcess
    runAsUserName
  }
}

fragment SecurityContext on v1_SecurityContext {
  windowsOptions {
    runAsUserName
    hostProcess
    gmsaCredentialSpecName
    gmsaCredentialSpec
  }
  seLinuxOptions {
    user
    role
    level
    type
  }
  seccompProfile {
    type
    localhostProfile
  }
  runAsUser
  runAsNonRoot
  runAsGroup
  allowPrivilegeEscalation
  capabilities {
    add
    drop
  }
  privileged
  procMount
  readOnlyRootFilesystem
}

fragment PodList on pod_PodList {
  listMeta @type(name: "types_ListMeta") {
    ...ListMeta
  }
  pods {
    typeMeta @type(name: "types_TypeMeta") {
      ...TypeMeta
    }
    objectMeta @type(name: "types_ObjectMeta") {
      ...ObjectMeta
    }
    containerStatuses {
      name
      ready
      state
    }
    status
    containerImages
    nodeName
    restartCount
    warnings {
      message
    }
  }
}
