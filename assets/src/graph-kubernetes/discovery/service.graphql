query Services(
  $namespace: String!
  $filterBy: String
  $sortBy: String
  $itemsPerPage: String
  $page: String
) {
  handleGetServiceList(
    namespace: $namespace
    filterBy: $filterBy
    sortBy: $sortBy
    itemsPerPage: $itemsPerPage
    page: $page
  )
    @rest(
      type: "service_ServiceList"
      path: "service/{args.namespace}?filterBy={args.filterBy}&sortBy={args.sortBy}&itemsPerPage={args.itemsPerPage}&page={args.page}"
    ) {
    ...ServiceList
  }
}

query Service($name: String!, $namespace: String!) {
  handleGetServiceDetail(namespace: $namespace, service: $name)
    @rest(path: "service/{args.namespace}/{args.service}") {
    typeMeta @type(name: "types_TypeMeta") {
      ...TypeMeta
    }
    objectMeta @type(name: "types_ObjectMeta") {
      ...ObjectMeta
    }
    internalEndpoint @type(name: "common_Endpoint") {
      ...Endpoint
    }
    externalEndpoints @type(name: "common_Endpoint") {
      ...Endpoint
    }
    endpointList {
      endpoints {
        typeMeta @type(name: "types_TypeMeta") {
          ...TypeMeta
        }
        objectMeta @type(name: "types_ObjectMeta") {
          ...ObjectMeta
        }
        ports {
          name
          port
          protocol
          appProtocol
        }
        host
        ready
        nodeName
      }
    }
    type
    sessionAffinity
    selector
    clusterIP
    errors
  }
}

query ServiceEvents($namespace: String!, $name: String!) {
  handleGetServiceEvent(namespace: $namespace, service: $name)
    @rest(
      type: "common_EventList"
      path: "service/{args.namespace}/{args.service}/event"
    ) {
    ...EventList
  }
}

query ServicePods($namespace: String!, $name: String!) {
  handleGetServicePods(namespace: $namespace, service: $name)
    @rest(
      type: "pod_PodList"
      path: "service/{args.namespace}/{args.service}/pod"
    ) {
    ...PodList
  }
}

query ServiceIngresses($namespace: String!, $name: String!) {
  handleGetServiceIngressList(namespace: $namespace, service: $name)
    @rest(
      type: "ingress_IngressList"
      path: "service/{args.namespace}/{args.service}/ingress"
    ) {
    ...IngressList
  }
}
