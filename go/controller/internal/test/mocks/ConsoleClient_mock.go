// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/pluralsh/console/go/client"

	credentials "github.com/pluralsh/console/go/controller/internal/credentials"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/pluralsh/console/go/controller/api/v1alpha1"
)

// ConsoleClientMock is an autogenerated mock type for the ConsoleClient type
type ConsoleClientMock struct {
	mock.Mock
}

type ConsoleClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsoleClientMock) EXPECT() *ConsoleClientMock_Expecter {
	return &ConsoleClientMock_Expecter{mock: &_m.Mock}
}

// CreateCluster provides a mock function with given fields: attrs
func (_m *ConsoleClientMock) CreateCluster(attrs client.ClusterAttributes) (*client.ClusterFragment, error) {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *client.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(client.ClusterAttributes) (*client.ClusterFragment, error)); ok {
		return rf(attrs)
	}
	if rf, ok := ret.Get(0).(func(client.ClusterAttributes) *client.ClusterFragment); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ClusterAttributes) error); ok {
		r1 = rf(attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type ConsoleClientMock_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
//   - attrs client.ClusterAttributes
func (_e *ConsoleClientMock_Expecter) CreateCluster(attrs interface{}) *ConsoleClientMock_CreateCluster_Call {
	return &ConsoleClientMock_CreateCluster_Call{Call: _e.mock.On("CreateCluster", attrs)}
}

func (_c *ConsoleClientMock_CreateCluster_Call) Run(run func(attrs client.ClusterAttributes)) *ConsoleClientMock_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.ClusterAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateCluster_Call) Return(_a0 *client.ClusterFragment, _a1 error) *ConsoleClientMock_CreateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateCluster_Call) RunAndReturn(run func(client.ClusterAttributes) (*client.ClusterFragment, error)) *ConsoleClientMock_CreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// CreateClusterRestore provides a mock function with given fields: ctx, backupId
func (_m *ConsoleClientMock) CreateClusterRestore(ctx context.Context, backupId string) (*client.ClusterRestoreFragment, error) {
	ret := _m.Called(ctx, backupId)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterRestore")
	}

	var r0 *client.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ClusterRestoreFragment, error)); ok {
		return rf(ctx, backupId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ClusterRestoreFragment); ok {
		r0 = rf(ctx, backupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, backupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClusterRestore'
type ConsoleClientMock_CreateClusterRestore_Call struct {
	*mock.Call
}

// CreateClusterRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - backupId string
func (_e *ConsoleClientMock_Expecter) CreateClusterRestore(ctx interface{}, backupId interface{}) *ConsoleClientMock_CreateClusterRestore_Call {
	return &ConsoleClientMock_CreateClusterRestore_Call{Call: _e.mock.On("CreateClusterRestore", ctx, backupId)}
}

func (_c *ConsoleClientMock_CreateClusterRestore_Call) Run(run func(ctx context.Context, backupId string)) *ConsoleClientMock_CreateClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateClusterRestore_Call) Return(_a0 *client.ClusterRestoreFragment, _a1 error) *ConsoleClientMock_CreateClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateClusterRestore_Call) RunAndReturn(run func(context.Context, string) (*client.ClusterRestoreFragment, error)) *ConsoleClientMock_CreateClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomStackRun provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateCustomStackRun(ctx context.Context, attributes client.CustomStackRunAttributes) (*client.CustomStackRunFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomStackRun")
	}

	var r0 *client.CustomStackRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.CustomStackRunAttributes) (*client.CustomStackRunFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.CustomStackRunAttributes) *client.CustomStackRunFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CustomStackRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.CustomStackRunAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateCustomStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomStackRun'
type ConsoleClientMock_CreateCustomStackRun_Call struct {
	*mock.Call
}

// CreateCustomStackRun is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.CustomStackRunAttributes
func (_e *ConsoleClientMock_Expecter) CreateCustomStackRun(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateCustomStackRun_Call {
	return &ConsoleClientMock_CreateCustomStackRun_Call{Call: _e.mock.On("CreateCustomStackRun", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateCustomStackRun_Call) Run(run func(ctx context.Context, attributes client.CustomStackRunAttributes)) *ConsoleClientMock_CreateCustomStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.CustomStackRunAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateCustomStackRun_Call) Return(_a0 *client.CustomStackRunFragment, _a1 error) *ConsoleClientMock_CreateCustomStackRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateCustomStackRun_Call) RunAndReturn(run func(context.Context, client.CustomStackRunAttributes) (*client.CustomStackRunFragment, error)) *ConsoleClientMock_CreateCustomStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGitRepository provides a mock function with given fields: attrs
func (_m *ConsoleClientMock) CreateGitRepository(attrs client.GitAttributes) (*client.CreateGitRepository, error) {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for CreateGitRepository")
	}

	var r0 *client.CreateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(client.GitAttributes) (*client.CreateGitRepository, error)); ok {
		return rf(attrs)
	}
	if rf, ok := ret.Get(0).(func(client.GitAttributes) *client.CreateGitRepository); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CreateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(client.GitAttributes) error); ok {
		r1 = rf(attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateGitRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGitRepository'
type ConsoleClientMock_CreateGitRepository_Call struct {
	*mock.Call
}

// CreateGitRepository is a helper method to define mock.On call
//   - attrs client.GitAttributes
func (_e *ConsoleClientMock_Expecter) CreateGitRepository(attrs interface{}) *ConsoleClientMock_CreateGitRepository_Call {
	return &ConsoleClientMock_CreateGitRepository_Call{Call: _e.mock.On("CreateGitRepository", attrs)}
}

func (_c *ConsoleClientMock_CreateGitRepository_Call) Run(run func(attrs client.GitAttributes)) *ConsoleClientMock_CreateGitRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.GitAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateGitRepository_Call) Return(_a0 *client.CreateGitRepository, _a1 error) *ConsoleClientMock_CreateGitRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateGitRepository_Call) RunAndReturn(run func(client.GitAttributes) (*client.CreateGitRepository, error)) *ConsoleClientMock_CreateGitRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGlobalService provides a mock function with given fields: serviceID, attributes
func (_m *ConsoleClientMock) CreateGlobalService(serviceID string, attributes client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error) {
	ret := _m.Called(serviceID, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalService")
	}

	var r0 *client.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error)); ok {
		return rf(serviceID, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, client.GlobalServiceAttributes) *client.GlobalServiceFragment); ok {
		r0 = rf(serviceID, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.GlobalServiceAttributes) error); ok {
		r1 = rf(serviceID, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGlobalService'
type ConsoleClientMock_CreateGlobalService_Call struct {
	*mock.Call
}

// CreateGlobalService is a helper method to define mock.On call
//   - serviceID string
//   - attributes client.GlobalServiceAttributes
func (_e *ConsoleClientMock_Expecter) CreateGlobalService(serviceID interface{}, attributes interface{}) *ConsoleClientMock_CreateGlobalService_Call {
	return &ConsoleClientMock_CreateGlobalService_Call{Call: _e.mock.On("CreateGlobalService", serviceID, attributes)}
}

func (_c *ConsoleClientMock_CreateGlobalService_Call) Run(run func(serviceID string, attributes client.GlobalServiceAttributes)) *ConsoleClientMock_CreateGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.GlobalServiceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateGlobalService_Call) Return(_a0 *client.GlobalServiceFragment, _a1 error) *ConsoleClientMock_CreateGlobalService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateGlobalService_Call) RunAndReturn(run func(string, client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error)) *ConsoleClientMock_CreateGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGlobalServiceFromTemplate provides a mock function with given fields: attributes
func (_m *ConsoleClientMock) CreateGlobalServiceFromTemplate(attributes client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error) {
	ret := _m.Called(attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalServiceFromTemplate")
	}

	var r0 *client.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error)); ok {
		return rf(attributes)
	}
	if rf, ok := ret.Get(0).(func(client.GlobalServiceAttributes) *client.GlobalServiceFragment); ok {
		r0 = rf(attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(client.GlobalServiceAttributes) error); ok {
		r1 = rf(attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateGlobalServiceFromTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGlobalServiceFromTemplate'
type ConsoleClientMock_CreateGlobalServiceFromTemplate_Call struct {
	*mock.Call
}

// CreateGlobalServiceFromTemplate is a helper method to define mock.On call
//   - attributes client.GlobalServiceAttributes
func (_e *ConsoleClientMock_Expecter) CreateGlobalServiceFromTemplate(attributes interface{}) *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call {
	return &ConsoleClientMock_CreateGlobalServiceFromTemplate_Call{Call: _e.mock.On("CreateGlobalServiceFromTemplate", attributes)}
}

func (_c *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call) Run(run func(attributes client.GlobalServiceAttributes)) *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.GlobalServiceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call) Return(_a0 *client.GlobalServiceFragment, _a1 error) *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call) RunAndReturn(run func(client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error)) *ConsoleClientMock_CreateGlobalServiceFromTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNamespace provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateNamespace(ctx context.Context, attributes client.ManagedNamespaceAttributes) (*client.ManagedNamespaceFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *client.ManagedNamespaceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ManagedNamespaceAttributes) (*client.ManagedNamespaceFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ManagedNamespaceAttributes) *client.ManagedNamespaceFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedNamespaceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ManagedNamespaceAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNamespace'
type ConsoleClientMock_CreateNamespace_Call struct {
	*mock.Call
}

// CreateNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.ManagedNamespaceAttributes
func (_e *ConsoleClientMock_Expecter) CreateNamespace(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateNamespace_Call {
	return &ConsoleClientMock_CreateNamespace_Call{Call: _e.mock.On("CreateNamespace", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateNamespace_Call) Run(run func(ctx context.Context, attributes client.ManagedNamespaceAttributes)) *ConsoleClientMock_CreateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ManagedNamespaceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateNamespace_Call) Return(_a0 *client.ManagedNamespaceFragment, _a1 error) *ConsoleClientMock_CreateNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateNamespace_Call) RunAndReturn(run func(context.Context, client.ManagedNamespaceAttributes) (*client.ManagedNamespaceFragment, error)) *ConsoleClientMock_CreateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePipelineContext provides a mock function with given fields: ctx, pipelineID, attributes
func (_m *ConsoleClientMock) CreatePipelineContext(ctx context.Context, pipelineID string, attributes client.PipelineContextAttributes) (*client.CreatePipelineContext, error) {
	ret := _m.Called(ctx, pipelineID, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipelineContext")
	}

	var r0 *client.CreatePipelineContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.PipelineContextAttributes) (*client.CreatePipelineContext, error)); ok {
		return rf(ctx, pipelineID, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.PipelineContextAttributes) *client.CreatePipelineContext); ok {
		r0 = rf(ctx, pipelineID, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CreatePipelineContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.PipelineContextAttributes) error); ok {
		r1 = rf(ctx, pipelineID, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreatePipelineContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipelineContext'
type ConsoleClientMock_CreatePipelineContext_Call struct {
	*mock.Call
}

// CreatePipelineContext is a helper method to define mock.On call
//   - ctx context.Context
//   - pipelineID string
//   - attributes client.PipelineContextAttributes
func (_e *ConsoleClientMock_Expecter) CreatePipelineContext(ctx interface{}, pipelineID interface{}, attributes interface{}) *ConsoleClientMock_CreatePipelineContext_Call {
	return &ConsoleClientMock_CreatePipelineContext_Call{Call: _e.mock.On("CreatePipelineContext", ctx, pipelineID, attributes)}
}

func (_c *ConsoleClientMock_CreatePipelineContext_Call) Run(run func(ctx context.Context, pipelineID string, attributes client.PipelineContextAttributes)) *ConsoleClientMock_CreatePipelineContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.PipelineContextAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreatePipelineContext_Call) Return(_a0 *client.CreatePipelineContext, _a1 error) *ConsoleClientMock_CreatePipelineContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreatePipelineContext_Call) RunAndReturn(run func(context.Context, string, client.PipelineContextAttributes) (*client.CreatePipelineContext, error)) *ConsoleClientMock_CreatePipelineContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrAutomation provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreatePrAutomation(ctx context.Context, attributes client.PrAutomationAttributes) (*client.PrAutomationFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrAutomation")
	}

	var r0 *client.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.PrAutomationAttributes) (*client.PrAutomationFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.PrAutomationAttributes) *client.PrAutomationFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.PrAutomationAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreatePrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrAutomation'
type ConsoleClientMock_CreatePrAutomation_Call struct {
	*mock.Call
}

// CreatePrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.PrAutomationAttributes
func (_e *ConsoleClientMock_Expecter) CreatePrAutomation(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreatePrAutomation_Call {
	return &ConsoleClientMock_CreatePrAutomation_Call{Call: _e.mock.On("CreatePrAutomation", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreatePrAutomation_Call) Run(run func(ctx context.Context, attributes client.PrAutomationAttributes)) *ConsoleClientMock_CreatePrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.PrAutomationAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreatePrAutomation_Call) Return(_a0 *client.PrAutomationFragment, _a1 error) *ConsoleClientMock_CreatePrAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreatePrAutomation_Call) RunAndReturn(run func(context.Context, client.PrAutomationAttributes) (*client.PrAutomationFragment, error)) *ConsoleClientMock_CreatePrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateProject(ctx context.Context, attributes client.ProjectAttributes) (*client.ProjectFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *client.ProjectFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ProjectAttributes) (*client.ProjectFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ProjectAttributes) *client.ProjectFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ProjectAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type ConsoleClientMock_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.ProjectAttributes
func (_e *ConsoleClientMock_Expecter) CreateProject(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateProject_Call {
	return &ConsoleClientMock_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateProject_Call) Run(run func(ctx context.Context, attributes client.ProjectAttributes)) *ConsoleClientMock_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ProjectAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateProject_Call) Return(_a0 *client.ProjectFragment, _a1 error) *ConsoleClientMock_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateProject_Call) RunAndReturn(run func(context.Context, client.ProjectAttributes) (*client.ProjectFragment, error)) *ConsoleClientMock_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProvider provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateProvider(ctx context.Context, attributes client.ClusterProviderAttributes) (*client.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvider")
	}

	var r0 *client.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ClusterProviderAttributes) (*client.ClusterProviderFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ClusterProviderAttributes) *client.ClusterProviderFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ClusterProviderAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProvider'
type ConsoleClientMock_CreateProvider_Call struct {
	*mock.Call
}

// CreateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.ClusterProviderAttributes
func (_e *ConsoleClientMock_Expecter) CreateProvider(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateProvider_Call {
	return &ConsoleClientMock_CreateProvider_Call{Call: _e.mock.On("CreateProvider", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateProvider_Call) Run(run func(ctx context.Context, attributes client.ClusterProviderAttributes)) *ConsoleClientMock_CreateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ClusterProviderAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateProvider_Call) Return(_a0 *client.ClusterProviderFragment, _a1 error) *ConsoleClientMock_CreateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateProvider_Call) RunAndReturn(run func(context.Context, client.ClusterProviderAttributes) (*client.ClusterProviderFragment, error)) *ConsoleClientMock_CreateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequest provides a mock function with given fields: ctx, prAutomationID, identifier, branch, _a4
func (_m *ConsoleClientMock) CreatePullRequest(ctx context.Context, prAutomationID string, identifier *string, branch *string, _a4 *string) (*client.CreatePullRequest, error) {
	ret := _m.Called(ctx, prAutomationID, identifier, branch, _a4)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 *client.CreatePullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, *string, *string) (*client.CreatePullRequest, error)); ok {
		return rf(ctx, prAutomationID, identifier, branch, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *string, *string, *string) *client.CreatePullRequest); ok {
		r0 = rf(ctx, prAutomationID, identifier, branch, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CreatePullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *string, *string, *string) error); ok {
		r1 = rf(ctx, prAutomationID, identifier, branch, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type ConsoleClientMock_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - prAutomationID string
//   - identifier *string
//   - branch *string
//   - _a4 *string
func (_e *ConsoleClientMock_Expecter) CreatePullRequest(ctx interface{}, prAutomationID interface{}, identifier interface{}, branch interface{}, _a4 interface{}) *ConsoleClientMock_CreatePullRequest_Call {
	return &ConsoleClientMock_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", ctx, prAutomationID, identifier, branch, _a4)}
}

func (_c *ConsoleClientMock_CreatePullRequest_Call) Run(run func(ctx context.Context, prAutomationID string, identifier *string, branch *string, _a4 *string)) *ConsoleClientMock_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*string), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_CreatePullRequest_Call) Return(_a0 *client.CreatePullRequest, _a1 error) *ConsoleClientMock_CreatePullRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreatePullRequest_Call) RunAndReturn(run func(context.Context, string, *string, *string, *string) (*client.CreatePullRequest, error)) *ConsoleClientMock_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepository provides a mock function with given fields: url, privateKey, passphrase, username, password
func (_m *ConsoleClientMock) CreateRepository(url string, privateKey *string, passphrase *string, username *string, password *string) (*client.CreateGitRepository, error) {
	ret := _m.Called(url, privateKey, passphrase, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *client.CreateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, *string, *string, *string) (*client.CreateGitRepository, error)); ok {
		return rf(url, privateKey, passphrase, username, password)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *string, *string, *string) *client.CreateGitRepository); ok {
		r0 = rf(url, privateKey, passphrase, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CreateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *string, *string, *string) error); ok {
		r1 = rf(url, privateKey, passphrase, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepository'
type ConsoleClientMock_CreateRepository_Call struct {
	*mock.Call
}

// CreateRepository is a helper method to define mock.On call
//   - url string
//   - privateKey *string
//   - passphrase *string
//   - username *string
//   - password *string
func (_e *ConsoleClientMock_Expecter) CreateRepository(url interface{}, privateKey interface{}, passphrase interface{}, username interface{}, password interface{}) *ConsoleClientMock_CreateRepository_Call {
	return &ConsoleClientMock_CreateRepository_Call{Call: _e.mock.On("CreateRepository", url, privateKey, passphrase, username, password)}
}

func (_c *ConsoleClientMock_CreateRepository_Call) Run(run func(url string, privateKey *string, passphrase *string, username *string, password *string)) *ConsoleClientMock_CreateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*string), args[2].(*string), args[3].(*string), args[4].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateRepository_Call) Return(_a0 *client.CreateGitRepository, _a1 error) *ConsoleClientMock_CreateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateRepository_Call) RunAndReturn(run func(string, *string, *string, *string, *string) (*client.CreateGitRepository, error)) *ConsoleClientMock_CreateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScmConnection provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateScmConnection(ctx context.Context, attributes client.ScmConnectionAttributes) (*client.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateScmConnection")
	}

	var r0 *client.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ScmConnectionAttributes) (*client.ScmConnectionFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ScmConnectionAttributes) *client.ScmConnectionFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ScmConnectionAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScmConnection'
type ConsoleClientMock_CreateScmConnection_Call struct {
	*mock.Call
}

// CreateScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.ScmConnectionAttributes
func (_e *ConsoleClientMock_Expecter) CreateScmConnection(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateScmConnection_Call {
	return &ConsoleClientMock_CreateScmConnection_Call{Call: _e.mock.On("CreateScmConnection", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateScmConnection_Call) Run(run func(ctx context.Context, attributes client.ScmConnectionAttributes)) *ConsoleClientMock_CreateScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ScmConnectionAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateScmConnection_Call) Return(_a0 *client.ScmConnectionFragment, _a1 error) *ConsoleClientMock_CreateScmConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateScmConnection_Call) RunAndReturn(run func(context.Context, client.ScmConnectionAttributes) (*client.ScmConnectionFragment, error)) *ConsoleClientMock_CreateScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function with given fields: clusterId, attributes
func (_m *ConsoleClientMock) CreateService(clusterId *string, attributes client.ServiceDeploymentAttributes) (*client.ServiceDeploymentExtended, error) {
	ret := _m.Called(clusterId, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *client.ServiceDeploymentExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, client.ServiceDeploymentAttributes) (*client.ServiceDeploymentExtended, error)); ok {
		return rf(clusterId, attributes)
	}
	if rf, ok := ret.Get(0).(func(*string, client.ServiceDeploymentAttributes) *client.ServiceDeploymentExtended); ok {
		r0 = rf(clusterId, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServiceDeploymentExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, client.ServiceDeploymentAttributes) error); ok {
		r1 = rf(clusterId, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type ConsoleClientMock_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - clusterId *string
//   - attributes client.ServiceDeploymentAttributes
func (_e *ConsoleClientMock_Expecter) CreateService(clusterId interface{}, attributes interface{}) *ConsoleClientMock_CreateService_Call {
	return &ConsoleClientMock_CreateService_Call{Call: _e.mock.On("CreateService", clusterId, attributes)}
}

func (_c *ConsoleClientMock_CreateService_Call) Run(run func(clusterId *string, attributes client.ServiceDeploymentAttributes)) *ConsoleClientMock_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(client.ServiceDeploymentAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateService_Call) Return(_a0 *client.ServiceDeploymentExtended, _a1 error) *ConsoleClientMock_CreateService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateService_Call) RunAndReturn(run func(*string, client.ServiceDeploymentAttributes) (*client.ServiceDeploymentExtended, error)) *ConsoleClientMock_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateServiceAccount(ctx context.Context, attributes client.ServiceAccountAttributes) (*client.UserFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *client.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ServiceAccountAttributes) (*client.UserFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ServiceAccountAttributes) *client.UserFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ServiceAccountAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type ConsoleClientMock_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.ServiceAccountAttributes
func (_e *ConsoleClientMock_Expecter) CreateServiceAccount(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateServiceAccount_Call {
	return &ConsoleClientMock_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateServiceAccount_Call) Run(run func(ctx context.Context, attributes client.ServiceAccountAttributes)) *ConsoleClientMock_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ServiceAccountAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateServiceAccount_Call) Return(_a0 *client.UserFragment, _a1 error) *ConsoleClientMock_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateServiceAccount_Call) RunAndReturn(run func(context.Context, client.ServiceAccountAttributes) (*client.UserFragment, error)) *ConsoleClientMock_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountToken provides a mock function with given fields: ctx, id, scopes
func (_m *ConsoleClientMock) CreateServiceAccountToken(ctx context.Context, id string, scopes []*client.ScopeAttributes) (*client.AccessTokenFragment, error) {
	ret := _m.Called(ctx, id, scopes)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountToken")
	}

	var r0 *client.AccessTokenFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*client.ScopeAttributes) (*client.AccessTokenFragment, error)); ok {
		return rf(ctx, id, scopes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []*client.ScopeAttributes) *client.AccessTokenFragment); ok {
		r0 = rf(ctx, id, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccessTokenFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []*client.ScopeAttributes) error); ok {
		r1 = rf(ctx, id, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateServiceAccountToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountToken'
type ConsoleClientMock_CreateServiceAccountToken_Call struct {
	*mock.Call
}

// CreateServiceAccountToken is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - scopes []*client.ScopeAttributes
func (_e *ConsoleClientMock_Expecter) CreateServiceAccountToken(ctx interface{}, id interface{}, scopes interface{}) *ConsoleClientMock_CreateServiceAccountToken_Call {
	return &ConsoleClientMock_CreateServiceAccountToken_Call{Call: _e.mock.On("CreateServiceAccountToken", ctx, id, scopes)}
}

func (_c *ConsoleClientMock_CreateServiceAccountToken_Call) Run(run func(ctx context.Context, id string, scopes []*client.ScopeAttributes)) *ConsoleClientMock_CreateServiceAccountToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]*client.ScopeAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateServiceAccountToken_Call) Return(_a0 *client.AccessTokenFragment, _a1 error) *ConsoleClientMock_CreateServiceAccountToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateServiceAccountToken_Call) RunAndReturn(run func(context.Context, string, []*client.ScopeAttributes) (*client.AccessTokenFragment, error)) *ConsoleClientMock_CreateServiceAccountToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStack provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateStack(ctx context.Context, attributes client.StackAttributes) (*client.InfrastructureStackFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateStack")
	}

	var r0 *client.InfrastructureStackFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.StackAttributes) (*client.InfrastructureStackFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.StackAttributes) *client.InfrastructureStackFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.InfrastructureStackFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.StackAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStack'
type ConsoleClientMock_CreateStack_Call struct {
	*mock.Call
}

// CreateStack is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.StackAttributes
func (_e *ConsoleClientMock_Expecter) CreateStack(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateStack_Call {
	return &ConsoleClientMock_CreateStack_Call{Call: _e.mock.On("CreateStack", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateStack_Call) Run(run func(ctx context.Context, attributes client.StackAttributes)) *ConsoleClientMock_CreateStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.StackAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateStack_Call) Return(_a0 *client.InfrastructureStackFragment, _a1 error) *ConsoleClientMock_CreateStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateStack_Call) RunAndReturn(run func(context.Context, client.StackAttributes) (*client.InfrastructureStackFragment, error)) *ConsoleClientMock_CreateStack_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStackDefinition provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) CreateStackDefinition(ctx context.Context, attributes client.StackDefinitionAttributes) (*client.StackDefinitionFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateStackDefinition")
	}

	var r0 *client.StackDefinitionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.StackDefinitionAttributes) (*client.StackDefinitionFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.StackDefinitionAttributes) *client.StackDefinitionFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StackDefinitionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.StackDefinitionAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_CreateStackDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStackDefinition'
type ConsoleClientMock_CreateStackDefinition_Call struct {
	*mock.Call
}

// CreateStackDefinition is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.StackDefinitionAttributes
func (_e *ConsoleClientMock_Expecter) CreateStackDefinition(ctx interface{}, attributes interface{}) *ConsoleClientMock_CreateStackDefinition_Call {
	return &ConsoleClientMock_CreateStackDefinition_Call{Call: _e.mock.On("CreateStackDefinition", ctx, attributes)}
}

func (_c *ConsoleClientMock_CreateStackDefinition_Call) Run(run func(ctx context.Context, attributes client.StackDefinitionAttributes)) *ConsoleClientMock_CreateStackDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.StackDefinitionAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_CreateStackDefinition_Call) Return(_a0 *client.StackDefinitionFragment, _a1 error) *ConsoleClientMock_CreateStackDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_CreateStackDefinition_Call) RunAndReturn(run func(context.Context, client.StackDefinitionAttributes) (*client.StackDefinitionFragment, error)) *ConsoleClientMock_CreateStackDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeleteCluster(id string) (*client.ClusterFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *client.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.ClusterFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.ClusterFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type ConsoleClientMock_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteCluster(id interface{}) *ConsoleClientMock_DeleteCluster_Call {
	return &ConsoleClientMock_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", id)}
}

func (_c *ConsoleClientMock_DeleteCluster_Call) Run(run func(id string)) *ConsoleClientMock_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteCluster_Call) Return(_a0 *client.ClusterFragment, _a1 error) *ConsoleClientMock_DeleteCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_DeleteCluster_Call) RunAndReturn(run func(string) (*client.ClusterFragment, error)) *ConsoleClientMock_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomStackRun provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteCustomStackRun(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomStackRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteCustomStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomStackRun'
type ConsoleClientMock_DeleteCustomStackRun_Call struct {
	*mock.Call
}

// DeleteCustomStackRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteCustomStackRun(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteCustomStackRun_Call {
	return &ConsoleClientMock_DeleteCustomStackRun_Call{Call: _e.mock.On("DeleteCustomStackRun", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteCustomStackRun_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteCustomStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteCustomStackRun_Call) Return(_a0 error) *ConsoleClientMock_DeleteCustomStackRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteCustomStackRun_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteCustomStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGlobalService provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeleteGlobalService(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobalService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGlobalService'
type ConsoleClientMock_DeleteGlobalService_Call struct {
	*mock.Call
}

// DeleteGlobalService is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteGlobalService(id interface{}) *ConsoleClientMock_DeleteGlobalService_Call {
	return &ConsoleClientMock_DeleteGlobalService_Call{Call: _e.mock.On("DeleteGlobalService", id)}
}

func (_c *ConsoleClientMock_DeleteGlobalService_Call) Run(run func(id string)) *ConsoleClientMock_DeleteGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteGlobalService_Call) Return(_a0 error) *ConsoleClientMock_DeleteGlobalService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteGlobalService_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DeleteGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteNamespace(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type ConsoleClientMock_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteNamespace(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteNamespace_Call {
	return &ConsoleClientMock_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteNamespace_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteNamespace_Call) Return(_a0 error) *ConsoleClientMock_DeleteNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteNamespace_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationRouter provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteNotificationRouter(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRouter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteNotificationRouter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRouter'
type ConsoleClientMock_DeleteNotificationRouter_Call struct {
	*mock.Call
}

// DeleteNotificationRouter is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteNotificationRouter(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteNotificationRouter_Call {
	return &ConsoleClientMock_DeleteNotificationRouter_Call{Call: _e.mock.On("DeleteNotificationRouter", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteNotificationRouter_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteNotificationRouter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteNotificationRouter_Call) Return(_a0 error) *ConsoleClientMock_DeleteNotificationRouter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteNotificationRouter_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteNotificationRouter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationSink provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteNotificationSink(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationSink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteNotificationSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationSink'
type ConsoleClientMock_DeleteNotificationSink_Call struct {
	*mock.Call
}

// DeleteNotificationSink is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteNotificationSink(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteNotificationSink_Call {
	return &ConsoleClientMock_DeleteNotificationSink_Call{Call: _e.mock.On("DeleteNotificationSink", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteNotificationSink_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteNotificationSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteNotificationSink_Call) Return(_a0 error) *ConsoleClientMock_DeleteNotificationSink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteNotificationSink_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteNotificationSink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObservabilityProvider provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteObservabilityProvider(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObservabilityProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteObservabilityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObservabilityProvider'
type ConsoleClientMock_DeleteObservabilityProvider_Call struct {
	*mock.Call
}

// DeleteObservabilityProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteObservabilityProvider(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteObservabilityProvider_Call {
	return &ConsoleClientMock_DeleteObservabilityProvider_Call{Call: _e.mock.On("DeleteObservabilityProvider", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteObservabilityProvider_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteObservabilityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteObservabilityProvider_Call) Return(_a0 error) *ConsoleClientMock_DeleteObservabilityProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteObservabilityProvider_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteObservabilityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipeline provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeletePipeline(id string) (*client.PipelineFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 *client.PipelineFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.PipelineFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.PipelineFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PipelineFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_DeletePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipeline'
type ConsoleClientMock_DeletePipeline_Call struct {
	*mock.Call
}

// DeletePipeline is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeletePipeline(id interface{}) *ConsoleClientMock_DeletePipeline_Call {
	return &ConsoleClientMock_DeletePipeline_Call{Call: _e.mock.On("DeletePipeline", id)}
}

func (_c *ConsoleClientMock_DeletePipeline_Call) Run(run func(id string)) *ConsoleClientMock_DeletePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeletePipeline_Call) Return(_a0 *client.PipelineFragment, _a1 error) *ConsoleClientMock_DeletePipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_DeletePipeline_Call) RunAndReturn(run func(string) (*client.PipelineFragment, error)) *ConsoleClientMock_DeletePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrAutomation provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeletePrAutomation(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrAutomation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeletePrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrAutomation'
type ConsoleClientMock_DeletePrAutomation_Call struct {
	*mock.Call
}

// DeletePrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeletePrAutomation(ctx interface{}, id interface{}) *ConsoleClientMock_DeletePrAutomation_Call {
	return &ConsoleClientMock_DeletePrAutomation_Call{Call: _e.mock.On("DeletePrAutomation", ctx, id)}
}

func (_c *ConsoleClientMock_DeletePrAutomation_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeletePrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeletePrAutomation_Call) Return(_a0 error) *ConsoleClientMock_DeletePrAutomation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeletePrAutomation_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeletePrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteProject(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type ConsoleClientMock_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteProject(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteProject_Call {
	return &ConsoleClientMock_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteProject_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteProject_Call) Return(_a0 error) *ConsoleClientMock_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteProject_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvider provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteProvider(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvider'
type ConsoleClientMock_DeleteProvider_Call struct {
	*mock.Call
}

// DeleteProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteProvider(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteProvider_Call {
	return &ConsoleClientMock_DeleteProvider_Call{Call: _e.mock.On("DeleteProvider", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteProvider_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteProvider_Call) Return(_a0 error) *ConsoleClientMock_DeleteProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteProvider_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepository provides a mock function with given fields: id
func (_m *ConsoleClientMock) DeleteRepository(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepository'
type ConsoleClientMock_DeleteRepository_Call struct {
	*mock.Call
}

// DeleteRepository is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteRepository(id interface{}) *ConsoleClientMock_DeleteRepository_Call {
	return &ConsoleClientMock_DeleteRepository_Call{Call: _e.mock.On("DeleteRepository", id)}
}

func (_c *ConsoleClientMock_DeleteRepository_Call) Run(run func(id string)) *ConsoleClientMock_DeleteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteRepository_Call) Return(_a0 error) *ConsoleClientMock_DeleteRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteRepository_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DeleteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScmConnection provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteScmConnection(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScmConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScmConnection'
type ConsoleClientMock_DeleteScmConnection_Call struct {
	*mock.Call
}

// DeleteScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteScmConnection(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteScmConnection_Call {
	return &ConsoleClientMock_DeleteScmConnection_Call{Call: _e.mock.On("DeleteScmConnection", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteScmConnection_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteScmConnection_Call) Return(_a0 error) *ConsoleClientMock_DeleteScmConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteScmConnection_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: serviceId
func (_m *ConsoleClientMock) DeleteService(serviceId string) error {
	ret := _m.Called(serviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type ConsoleClientMock_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - serviceId string
func (_e *ConsoleClientMock_Expecter) DeleteService(serviceId interface{}) *ConsoleClientMock_DeleteService_Call {
	return &ConsoleClientMock_DeleteService_Call{Call: _e.mock.On("DeleteService", serviceId)}
}

func (_c *ConsoleClientMock_DeleteService_Call) Run(run func(serviceId string)) *ConsoleClientMock_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteService_Call) Return(_a0 error) *ConsoleClientMock_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteService_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteServiceAccount(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type ConsoleClientMock_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteServiceAccount(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteServiceAccount_Call {
	return &ConsoleClientMock_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteServiceAccount_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteServiceAccount_Call) Return(_a0 error) *ConsoleClientMock_DeleteServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteServiceAccount_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStack provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteStack(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStack'
type ConsoleClientMock_DeleteStack_Call struct {
	*mock.Call
}

// DeleteStack is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteStack(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteStack_Call {
	return &ConsoleClientMock_DeleteStack_Call{Call: _e.mock.On("DeleteStack", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteStack_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteStack_Call) Return(_a0 error) *ConsoleClientMock_DeleteStack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteStack_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteStack_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStackDefinition provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DeleteStackDefinition(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStackDefinition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DeleteStackDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStackDefinition'
type ConsoleClientMock_DeleteStackDefinition_Call struct {
	*mock.Call
}

// DeleteStackDefinition is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DeleteStackDefinition(ctx interface{}, id interface{}) *ConsoleClientMock_DeleteStackDefinition_Call {
	return &ConsoleClientMock_DeleteStackDefinition_Call{Call: _e.mock.On("DeleteStackDefinition", ctx, id)}
}

func (_c *ConsoleClientMock_DeleteStackDefinition_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DeleteStackDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DeleteStackDefinition_Call) Return(_a0 error) *ConsoleClientMock_DeleteStackDefinition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DeleteStackDefinition_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DeleteStackDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DetachService provides a mock function with given fields: serviceId
func (_m *ConsoleClientMock) DetachService(serviceId string) error {
	ret := _m.Called(serviceId)

	if len(ret) == 0 {
		panic("no return value specified for DetachService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DetachService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachService'
type ConsoleClientMock_DetachService_Call struct {
	*mock.Call
}

// DetachService is a helper method to define mock.On call
//   - serviceId string
func (_e *ConsoleClientMock_Expecter) DetachService(serviceId interface{}) *ConsoleClientMock_DetachService_Call {
	return &ConsoleClientMock_DetachService_Call{Call: _e.mock.On("DetachService", serviceId)}
}

func (_c *ConsoleClientMock_DetachService_Call) Run(run func(serviceId string)) *ConsoleClientMock_DetachService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DetachService_Call) Return(_a0 error) *ConsoleClientMock_DetachService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DetachService_Call) RunAndReturn(run func(string) error) *ConsoleClientMock_DetachService_Call {
	_c.Call.Return(run)
	return _c
}

// DetachStack provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) DetachStack(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DetachStack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_DetachStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachStack'
type ConsoleClientMock_DetachStack_Call struct {
	*mock.Call
}

// DetachStack is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) DetachStack(ctx interface{}, id interface{}) *ConsoleClientMock_DetachStack_Call {
	return &ConsoleClientMock_DetachStack_Call{Call: _e.mock.On("DetachStack", ctx, id)}
}

func (_c *ConsoleClientMock_DetachStack_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_DetachStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_DetachStack_Call) Return(_a0 error) *ConsoleClientMock_DetachStack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_DetachStack_Call) RunAndReturn(run func(context.Context, string) error) *ConsoleClientMock_DetachStack_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetCluster(id *string) (*client.ClusterFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *client.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*client.ClusterFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*string) *client.ClusterFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type ConsoleClientMock_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - id *string
func (_e *ConsoleClientMock_Expecter) GetCluster(id interface{}) *ConsoleClientMock_GetCluster_Call {
	return &ConsoleClientMock_GetCluster_Call{Call: _e.mock.On("GetCluster", id)}
}

func (_c *ConsoleClientMock_GetCluster_Call) Run(run func(id *string)) *ConsoleClientMock_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetCluster_Call) Return(_a0 *client.ClusterFragment, _a1 error) *ConsoleClientMock_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetCluster_Call) RunAndReturn(run func(*string) (*client.ClusterFragment, error)) *ConsoleClientMock_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterBackup provides a mock function with given fields: clusterId, namespace, name
func (_m *ConsoleClientMock) GetClusterBackup(clusterId *string, namespace *string, name *string) (*client.ClusterBackupFragment, error) {
	ret := _m.Called(clusterId, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterBackup")
	}

	var r0 *client.ClusterBackupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string, *string) (*client.ClusterBackupFragment, error)); ok {
		return rf(clusterId, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(*string, *string, *string) *client.ClusterBackupFragment); ok {
		r0 = rf(clusterId, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterBackupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string, *string) error); ok {
		r1 = rf(clusterId, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetClusterBackup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterBackup'
type ConsoleClientMock_GetClusterBackup_Call struct {
	*mock.Call
}

// GetClusterBackup is a helper method to define mock.On call
//   - clusterId *string
//   - namespace *string
//   - name *string
func (_e *ConsoleClientMock_Expecter) GetClusterBackup(clusterId interface{}, namespace interface{}, name interface{}) *ConsoleClientMock_GetClusterBackup_Call {
	return &ConsoleClientMock_GetClusterBackup_Call{Call: _e.mock.On("GetClusterBackup", clusterId, namespace, name)}
}

func (_c *ConsoleClientMock_GetClusterBackup_Call) Run(run func(clusterId *string, namespace *string, name *string)) *ConsoleClientMock_GetClusterBackup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetClusterBackup_Call) Return(_a0 *client.ClusterBackupFragment, _a1 error) *ConsoleClientMock_GetClusterBackup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetClusterBackup_Call) RunAndReturn(run func(*string, *string, *string) (*client.ClusterBackupFragment, error)) *ConsoleClientMock_GetClusterBackup_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterByHandle provides a mock function with given fields: handle
func (_m *ConsoleClientMock) GetClusterByHandle(handle *string) (*client.ClusterFragment, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterByHandle")
	}

	var r0 *client.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*client.ClusterFragment, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(*string) *client.ClusterFragment); ok {
		r0 = rf(handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetClusterByHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterByHandle'
type ConsoleClientMock_GetClusterByHandle_Call struct {
	*mock.Call
}

// GetClusterByHandle is a helper method to define mock.On call
//   - handle *string
func (_e *ConsoleClientMock_Expecter) GetClusterByHandle(handle interface{}) *ConsoleClientMock_GetClusterByHandle_Call {
	return &ConsoleClientMock_GetClusterByHandle_Call{Call: _e.mock.On("GetClusterByHandle", handle)}
}

func (_c *ConsoleClientMock_GetClusterByHandle_Call) Run(run func(handle *string)) *ConsoleClientMock_GetClusterByHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetClusterByHandle_Call) Return(_a0 *client.ClusterFragment, _a1 error) *ConsoleClientMock_GetClusterByHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetClusterByHandle_Call) RunAndReturn(run func(*string) (*client.ClusterFragment, error)) *ConsoleClientMock_GetClusterByHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterRestore provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetClusterRestore(ctx context.Context, id string) (*client.ClusterRestoreFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterRestore")
	}

	var r0 *client.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ClusterRestoreFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ClusterRestoreFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterRestore'
type ConsoleClientMock_GetClusterRestore_Call struct {
	*mock.Call
}

// GetClusterRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetClusterRestore(ctx interface{}, id interface{}) *ConsoleClientMock_GetClusterRestore_Call {
	return &ConsoleClientMock_GetClusterRestore_Call{Call: _e.mock.On("GetClusterRestore", ctx, id)}
}

func (_c *ConsoleClientMock_GetClusterRestore_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetClusterRestore_Call) Return(_a0 *client.ClusterRestoreFragment, _a1 error) *ConsoleClientMock_GetClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetClusterRestore_Call) RunAndReturn(run func(context.Context, string) (*client.ClusterRestoreFragment, error)) *ConsoleClientMock_GetClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomStackRun provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetCustomStackRun(ctx context.Context, id string) (*client.CustomStackRunFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomStackRun")
	}

	var r0 *client.CustomStackRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.CustomStackRunFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.CustomStackRunFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CustomStackRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetCustomStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomStackRun'
type ConsoleClientMock_GetCustomStackRun_Call struct {
	*mock.Call
}

// GetCustomStackRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetCustomStackRun(ctx interface{}, id interface{}) *ConsoleClientMock_GetCustomStackRun_Call {
	return &ConsoleClientMock_GetCustomStackRun_Call{Call: _e.mock.On("GetCustomStackRun", ctx, id)}
}

func (_c *ConsoleClientMock_GetCustomStackRun_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetCustomStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetCustomStackRun_Call) Return(_a0 *client.CustomStackRunFragment, _a1 error) *ConsoleClientMock_GetCustomStackRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetCustomStackRun_Call) RunAndReturn(run func(context.Context, string) (*client.CustomStackRunFragment, error)) *ConsoleClientMock_GetCustomStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploymentSettings provides a mock function with given fields: ctx
func (_m *ConsoleClientMock) GetDeploymentSettings(ctx context.Context) (*client.DeploymentSettingsFragment, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentSettings")
	}

	var r0 *client.DeploymentSettingsFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*client.DeploymentSettingsFragment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *client.DeploymentSettingsFragment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DeploymentSettingsFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetDeploymentSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploymentSettings'
type ConsoleClientMock_GetDeploymentSettings_Call struct {
	*mock.Call
}

// GetDeploymentSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ConsoleClientMock_Expecter) GetDeploymentSettings(ctx interface{}) *ConsoleClientMock_GetDeploymentSettings_Call {
	return &ConsoleClientMock_GetDeploymentSettings_Call{Call: _e.mock.On("GetDeploymentSettings", ctx)}
}

func (_c *ConsoleClientMock_GetDeploymentSettings_Call) Run(run func(ctx context.Context)) *ConsoleClientMock_GetDeploymentSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ConsoleClientMock_GetDeploymentSettings_Call) Return(_a0 *client.DeploymentSettingsFragment, _a1 error) *ConsoleClientMock_GetDeploymentSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetDeploymentSettings_Call) RunAndReturn(run func(context.Context) (*client.DeploymentSettingsFragment, error)) *ConsoleClientMock_GetDeploymentSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalService provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetGlobalService(id string) (*client.GlobalServiceFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalService")
	}

	var r0 *client.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.GlobalServiceFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.GlobalServiceFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalService'
type ConsoleClientMock_GetGlobalService_Call struct {
	*mock.Call
}

// GetGlobalService is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) GetGlobalService(id interface{}) *ConsoleClientMock_GetGlobalService_Call {
	return &ConsoleClientMock_GetGlobalService_Call{Call: _e.mock.On("GetGlobalService", id)}
}

func (_c *ConsoleClientMock_GetGlobalService_Call) Run(run func(id string)) *ConsoleClientMock_GetGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetGlobalService_Call) Return(_a0 *client.GlobalServiceFragment, _a1 error) *ConsoleClientMock_GetGlobalService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetGlobalService_Call) RunAndReturn(run func(string) (*client.GlobalServiceFragment, error)) *ConsoleClientMock_GetGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: name
func (_m *ConsoleClientMock) GetGroup(name string) (*client.GroupFragment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *client.GroupFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.GroupFragment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *client.GroupFragment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GroupFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type ConsoleClientMock_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - name string
func (_e *ConsoleClientMock_Expecter) GetGroup(name interface{}) *ConsoleClientMock_GetGroup_Call {
	return &ConsoleClientMock_GetGroup_Call{Call: _e.mock.On("GetGroup", name)}
}

func (_c *ConsoleClientMock_GetGroup_Call) Run(run func(name string)) *ConsoleClientMock_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetGroup_Call) Return(_a0 *client.GroupFragment, _a1 error) *ConsoleClientMock_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetGroup_Call) RunAndReturn(run func(string) (*client.GroupFragment, error)) *ConsoleClientMock_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetNamespace(ctx context.Context, id string) (*client.ManagedNamespaceFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *client.ManagedNamespaceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ManagedNamespaceFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ManagedNamespaceFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedNamespaceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type ConsoleClientMock_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetNamespace(ctx interface{}, id interface{}) *ConsoleClientMock_GetNamespace_Call {
	return &ConsoleClientMock_GetNamespace_Call{Call: _e.mock.On("GetNamespace", ctx, id)}
}

func (_c *ConsoleClientMock_GetNamespace_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetNamespace_Call) Return(_a0 *client.ManagedNamespaceFragment, _a1 error) *ConsoleClientMock_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetNamespace_Call) RunAndReturn(run func(context.Context, string) (*client.ManagedNamespaceFragment, error)) *ConsoleClientMock_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespaceByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetNamespaceByName(ctx context.Context, name string) (*client.ManagedNamespaceFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespaceByName")
	}

	var r0 *client.ManagedNamespaceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ManagedNamespaceFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ManagedNamespaceFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedNamespaceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetNamespaceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespaceByName'
type ConsoleClientMock_GetNamespaceByName_Call struct {
	*mock.Call
}

// GetNamespaceByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetNamespaceByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetNamespaceByName_Call {
	return &ConsoleClientMock_GetNamespaceByName_Call{Call: _e.mock.On("GetNamespaceByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetNamespaceByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetNamespaceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetNamespaceByName_Call) Return(_a0 *client.ManagedNamespaceFragment, _a1 error) *ConsoleClientMock_GetNamespaceByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetNamespaceByName_Call) RunAndReturn(run func(context.Context, string) (*client.ManagedNamespaceFragment, error)) *ConsoleClientMock_GetNamespaceByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationRouter provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetNotificationRouter(ctx context.Context, id string) (*client.NotificationRouterFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationRouter")
	}

	var r0 *client.NotificationRouterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.NotificationRouterFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.NotificationRouterFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRouterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetNotificationRouter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRouter'
type ConsoleClientMock_GetNotificationRouter_Call struct {
	*mock.Call
}

// GetNotificationRouter is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetNotificationRouter(ctx interface{}, id interface{}) *ConsoleClientMock_GetNotificationRouter_Call {
	return &ConsoleClientMock_GetNotificationRouter_Call{Call: _e.mock.On("GetNotificationRouter", ctx, id)}
}

func (_c *ConsoleClientMock_GetNotificationRouter_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetNotificationRouter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetNotificationRouter_Call) Return(_a0 *client.NotificationRouterFragment, _a1 error) *ConsoleClientMock_GetNotificationRouter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetNotificationRouter_Call) RunAndReturn(run func(context.Context, string) (*client.NotificationRouterFragment, error)) *ConsoleClientMock_GetNotificationRouter_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationRouterByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetNotificationRouterByName(ctx context.Context, name string) (*client.NotificationRouterFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationRouterByName")
	}

	var r0 *client.NotificationRouterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.NotificationRouterFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.NotificationRouterFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRouterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetNotificationRouterByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationRouterByName'
type ConsoleClientMock_GetNotificationRouterByName_Call struct {
	*mock.Call
}

// GetNotificationRouterByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetNotificationRouterByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetNotificationRouterByName_Call {
	return &ConsoleClientMock_GetNotificationRouterByName_Call{Call: _e.mock.On("GetNotificationRouterByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetNotificationRouterByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetNotificationRouterByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetNotificationRouterByName_Call) Return(_a0 *client.NotificationRouterFragment, _a1 error) *ConsoleClientMock_GetNotificationRouterByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetNotificationRouterByName_Call) RunAndReturn(run func(context.Context, string) (*client.NotificationRouterFragment, error)) *ConsoleClientMock_GetNotificationRouterByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationSink provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetNotificationSink(ctx context.Context, id string) (*client.NotificationSinkFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSink")
	}

	var r0 *client.NotificationSinkFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.NotificationSinkFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.NotificationSinkFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationSinkFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetNotificationSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSink'
type ConsoleClientMock_GetNotificationSink_Call struct {
	*mock.Call
}

// GetNotificationSink is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetNotificationSink(ctx interface{}, id interface{}) *ConsoleClientMock_GetNotificationSink_Call {
	return &ConsoleClientMock_GetNotificationSink_Call{Call: _e.mock.On("GetNotificationSink", ctx, id)}
}

func (_c *ConsoleClientMock_GetNotificationSink_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetNotificationSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetNotificationSink_Call) Return(_a0 *client.NotificationSinkFragment, _a1 error) *ConsoleClientMock_GetNotificationSink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetNotificationSink_Call) RunAndReturn(run func(context.Context, string) (*client.NotificationSinkFragment, error)) *ConsoleClientMock_GetNotificationSink_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationSinkByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetNotificationSinkByName(ctx context.Context, name string) (*client.NotificationSinkFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSinkByName")
	}

	var r0 *client.NotificationSinkFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.NotificationSinkFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.NotificationSinkFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationSinkFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetNotificationSinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSinkByName'
type ConsoleClientMock_GetNotificationSinkByName_Call struct {
	*mock.Call
}

// GetNotificationSinkByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetNotificationSinkByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetNotificationSinkByName_Call {
	return &ConsoleClientMock_GetNotificationSinkByName_Call{Call: _e.mock.On("GetNotificationSinkByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetNotificationSinkByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetNotificationSinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetNotificationSinkByName_Call) Return(_a0 *client.NotificationSinkFragment, _a1 error) *ConsoleClientMock_GetNotificationSinkByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetNotificationSinkByName_Call) RunAndReturn(run func(context.Context, string) (*client.NotificationSinkFragment, error)) *ConsoleClientMock_GetNotificationSinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetObservabilityProvider provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetObservabilityProvider(ctx context.Context, id string) (*client.ObservabilityProviderFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetObservabilityProvider")
	}

	var r0 *client.ObservabilityProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ObservabilityProviderFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ObservabilityProviderFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ObservabilityProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetObservabilityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObservabilityProvider'
type ConsoleClientMock_GetObservabilityProvider_Call struct {
	*mock.Call
}

// GetObservabilityProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetObservabilityProvider(ctx interface{}, id interface{}) *ConsoleClientMock_GetObservabilityProvider_Call {
	return &ConsoleClientMock_GetObservabilityProvider_Call{Call: _e.mock.On("GetObservabilityProvider", ctx, id)}
}

func (_c *ConsoleClientMock_GetObservabilityProvider_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetObservabilityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetObservabilityProvider_Call) Return(_a0 *client.ObservabilityProviderFragment, _a1 error) *ConsoleClientMock_GetObservabilityProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetObservabilityProvider_Call) RunAndReturn(run func(context.Context, string) (*client.ObservabilityProviderFragment, error)) *ConsoleClientMock_GetObservabilityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipeline provides a mock function with given fields: id
func (_m *ConsoleClientMock) GetPipeline(id string) (*client.PipelineFragment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPipeline")
	}

	var r0 *client.PipelineFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.PipelineFragment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *client.PipelineFragment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PipelineFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipeline'
type ConsoleClientMock_GetPipeline_Call struct {
	*mock.Call
}

// GetPipeline is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) GetPipeline(id interface{}) *ConsoleClientMock_GetPipeline_Call {
	return &ConsoleClientMock_GetPipeline_Call{Call: _e.mock.On("GetPipeline", id)}
}

func (_c *ConsoleClientMock_GetPipeline_Call) Run(run func(id string)) *ConsoleClientMock_GetPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPipeline_Call) Return(_a0 *client.PipelineFragment, _a1 error) *ConsoleClientMock_GetPipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPipeline_Call) RunAndReturn(run func(string) (*client.PipelineFragment, error)) *ConsoleClientMock_GetPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipelineContext provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetPipelineContext(ctx context.Context, id string) (*client.PipelineContextFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineContext")
	}

	var r0 *client.PipelineContextFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.PipelineContextFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.PipelineContextFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PipelineContextFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPipelineContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipelineContext'
type ConsoleClientMock_GetPipelineContext_Call struct {
	*mock.Call
}

// GetPipelineContext is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetPipelineContext(ctx interface{}, id interface{}) *ConsoleClientMock_GetPipelineContext_Call {
	return &ConsoleClientMock_GetPipelineContext_Call{Call: _e.mock.On("GetPipelineContext", ctx, id)}
}

func (_c *ConsoleClientMock_GetPipelineContext_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetPipelineContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPipelineContext_Call) Return(_a0 *client.PipelineContextFragment, _a1 error) *ConsoleClientMock_GetPipelineContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPipelineContext_Call) RunAndReturn(run func(context.Context, string) (*client.PipelineContextFragment, error)) *ConsoleClientMock_GetPipelineContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrAutomation provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetPrAutomation(ctx context.Context, id string) (*client.PrAutomationFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPrAutomation")
	}

	var r0 *client.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.PrAutomationFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.PrAutomationFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrAutomation'
type ConsoleClientMock_GetPrAutomation_Call struct {
	*mock.Call
}

// GetPrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetPrAutomation(ctx interface{}, id interface{}) *ConsoleClientMock_GetPrAutomation_Call {
	return &ConsoleClientMock_GetPrAutomation_Call{Call: _e.mock.On("GetPrAutomation", ctx, id)}
}

func (_c *ConsoleClientMock_GetPrAutomation_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetPrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomation_Call) Return(_a0 *client.PrAutomationFragment, _a1 error) *ConsoleClientMock_GetPrAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomation_Call) RunAndReturn(run func(context.Context, string) (*client.PrAutomationFragment, error)) *ConsoleClientMock_GetPrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrAutomationByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetPrAutomationByName(ctx context.Context, name string) (*client.PrAutomationFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPrAutomationByName")
	}

	var r0 *client.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.PrAutomationFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.PrAutomationFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetPrAutomationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrAutomationByName'
type ConsoleClientMock_GetPrAutomationByName_Call struct {
	*mock.Call
}

// GetPrAutomationByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetPrAutomationByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetPrAutomationByName_Call {
	return &ConsoleClientMock_GetPrAutomationByName_Call{Call: _e.mock.On("GetPrAutomationByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetPrAutomationByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetPrAutomationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomationByName_Call) Return(_a0 *client.PrAutomationFragment, _a1 error) *ConsoleClientMock_GetPrAutomationByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetPrAutomationByName_Call) RunAndReturn(run func(context.Context, string) (*client.PrAutomationFragment, error)) *ConsoleClientMock_GetPrAutomationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, id, name
func (_m *ConsoleClientMock) GetProject(ctx context.Context, id *string, name *string) (*client.ProjectFragment, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *client.ProjectFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) (*client.ProjectFragment, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *string) *client.ProjectFragment); ok {
		r0 = rf(ctx, id, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type ConsoleClientMock_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id *string
//   - name *string
func (_e *ConsoleClientMock_Expecter) GetProject(ctx interface{}, id interface{}, name interface{}) *ConsoleClientMock_GetProject_Call {
	return &ConsoleClientMock_GetProject_Call{Call: _e.mock.On("GetProject", ctx, id, name)}
}

func (_c *ConsoleClientMock_GetProject_Call) Run(run func(ctx context.Context, id *string, name *string)) *ConsoleClientMock_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetProject_Call) Return(_a0 *client.ProjectFragment, _a1 error) *ConsoleClientMock_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetProject_Call) RunAndReturn(run func(context.Context, *string, *string) (*client.ProjectFragment, error)) *ConsoleClientMock_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetProvider(ctx context.Context, id string) (*client.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 *client.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ClusterProviderFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ClusterProviderFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type ConsoleClientMock_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetProvider(ctx interface{}, id interface{}) *ConsoleClientMock_GetProvider_Call {
	return &ConsoleClientMock_GetProvider_Call{Call: _e.mock.On("GetProvider", ctx, id)}
}

func (_c *ConsoleClientMock_GetProvider_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetProvider_Call) Return(_a0 *client.ClusterProviderFragment, _a1 error) *ConsoleClientMock_GetProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetProvider_Call) RunAndReturn(run func(context.Context, string) (*client.ClusterProviderFragment, error)) *ConsoleClientMock_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderByCloud provides a mock function with given fields: ctx, cloud
func (_m *ConsoleClientMock) GetProviderByCloud(ctx context.Context, cloud v1alpha1.CloudProvider) (*client.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, cloud)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByCloud")
	}

	var r0 *client.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.CloudProvider) (*client.ClusterProviderFragment, error)); ok {
		return rf(ctx, cloud)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.CloudProvider) *client.ClusterProviderFragment); ok {
		r0 = rf(ctx, cloud)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1alpha1.CloudProvider) error); ok {
		r1 = rf(ctx, cloud)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetProviderByCloud_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderByCloud'
type ConsoleClientMock_GetProviderByCloud_Call struct {
	*mock.Call
}

// GetProviderByCloud is a helper method to define mock.On call
//   - ctx context.Context
//   - cloud v1alpha1.CloudProvider
func (_e *ConsoleClientMock_Expecter) GetProviderByCloud(ctx interface{}, cloud interface{}) *ConsoleClientMock_GetProviderByCloud_Call {
	return &ConsoleClientMock_GetProviderByCloud_Call{Call: _e.mock.On("GetProviderByCloud", ctx, cloud)}
}

func (_c *ConsoleClientMock_GetProviderByCloud_Call) Run(run func(ctx context.Context, cloud v1alpha1.CloudProvider)) *ConsoleClientMock_GetProviderByCloud_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1alpha1.CloudProvider))
	})
	return _c
}

func (_c *ConsoleClientMock_GetProviderByCloud_Call) Return(_a0 *client.ClusterProviderFragment, _a1 error) *ConsoleClientMock_GetProviderByCloud_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetProviderByCloud_Call) RunAndReturn(run func(context.Context, v1alpha1.CloudProvider) (*client.ClusterProviderFragment, error)) *ConsoleClientMock_GetProviderByCloud_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with given fields: url
func (_m *ConsoleClientMock) GetRepository(url *string) (*client.GetGitRepository, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *client.GetGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (*client.GetGitRepository, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(*string) *client.GetGitRepository); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GetGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type ConsoleClientMock_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - url *string
func (_e *ConsoleClientMock_Expecter) GetRepository(url interface{}) *ConsoleClientMock_GetRepository_Call {
	return &ConsoleClientMock_GetRepository_Call{Call: _e.mock.On("GetRepository", url)}
}

func (_c *ConsoleClientMock_GetRepository_Call) Run(run func(url *string)) *ConsoleClientMock_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetRepository_Call) Return(_a0 *client.GetGitRepository, _a1 error) *ConsoleClientMock_GetRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetRepository_Call) RunAndReturn(run func(*string) (*client.GetGitRepository, error)) *ConsoleClientMock_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetScmConnection provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetScmConnection(ctx context.Context, id string) (*client.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetScmConnection")
	}

	var r0 *client.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ScmConnectionFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ScmConnectionFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScmConnection'
type ConsoleClientMock_GetScmConnection_Call struct {
	*mock.Call
}

// GetScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetScmConnection(ctx interface{}, id interface{}) *ConsoleClientMock_GetScmConnection_Call {
	return &ConsoleClientMock_GetScmConnection_Call{Call: _e.mock.On("GetScmConnection", ctx, id)}
}

func (_c *ConsoleClientMock_GetScmConnection_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetScmConnection_Call) Return(_a0 *client.ScmConnectionFragment, _a1 error) *ConsoleClientMock_GetScmConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetScmConnection_Call) RunAndReturn(run func(context.Context, string) (*client.ScmConnectionFragment, error)) *ConsoleClientMock_GetScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetScmConnectionByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) GetScmConnectionByName(ctx context.Context, name string) (*client.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetScmConnectionByName")
	}

	var r0 *client.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.ScmConnectionFragment, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.ScmConnectionFragment); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetScmConnectionByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScmConnectionByName'
type ConsoleClientMock_GetScmConnectionByName_Call struct {
	*mock.Call
}

// GetScmConnectionByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) GetScmConnectionByName(ctx interface{}, name interface{}) *ConsoleClientMock_GetScmConnectionByName_Call {
	return &ConsoleClientMock_GetScmConnectionByName_Call{Call: _e.mock.On("GetScmConnectionByName", ctx, name)}
}

func (_c *ConsoleClientMock_GetScmConnectionByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_GetScmConnectionByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetScmConnectionByName_Call) Return(_a0 *client.ScmConnectionFragment, _a1 error) *ConsoleClientMock_GetScmConnectionByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetScmConnectionByName_Call) RunAndReturn(run func(context.Context, string) (*client.ScmConnectionFragment, error)) *ConsoleClientMock_GetScmConnectionByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields: clusterID, serviceName
func (_m *ConsoleClientMock) GetService(clusterID string, serviceName string) (*client.ServiceDeploymentExtended, error) {
	ret := _m.Called(clusterID, serviceName)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *client.ServiceDeploymentExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*client.ServiceDeploymentExtended, error)); ok {
		return rf(clusterID, serviceName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *client.ServiceDeploymentExtended); ok {
		r0 = rf(clusterID, serviceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServiceDeploymentExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clusterID, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type ConsoleClientMock_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - clusterID string
//   - serviceName string
func (_e *ConsoleClientMock_Expecter) GetService(clusterID interface{}, serviceName interface{}) *ConsoleClientMock_GetService_Call {
	return &ConsoleClientMock_GetService_Call{Call: _e.mock.On("GetService", clusterID, serviceName)}
}

func (_c *ConsoleClientMock_GetService_Call) Run(run func(clusterID string, serviceName string)) *ConsoleClientMock_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetService_Call) Return(_a0 *client.ServiceDeploymentExtended, _a1 error) *ConsoleClientMock_GetService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetService_Call) RunAndReturn(run func(string, string) (*client.ServiceDeploymentExtended, error)) *ConsoleClientMock_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccount provides a mock function with given fields: ctx, email
func (_m *ConsoleClientMock) GetServiceAccount(ctx context.Context, email string) (*client.UserFragment, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceAccount")
	}

	var r0 *client.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.UserFragment, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.UserFragment); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccount'
type ConsoleClientMock_GetServiceAccount_Call struct {
	*mock.Call
}

// GetServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *ConsoleClientMock_Expecter) GetServiceAccount(ctx interface{}, email interface{}) *ConsoleClientMock_GetServiceAccount_Call {
	return &ConsoleClientMock_GetServiceAccount_Call{Call: _e.mock.On("GetServiceAccount", ctx, email)}
}

func (_c *ConsoleClientMock_GetServiceAccount_Call) Run(run func(ctx context.Context, email string)) *ConsoleClientMock_GetServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetServiceAccount_Call) Return(_a0 *client.UserFragment, _a1 error) *ConsoleClientMock_GetServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetServiceAccount_Call) RunAndReturn(run func(context.Context, string) (*client.UserFragment, error)) *ConsoleClientMock_GetServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceContext provides a mock function with given fields: name
func (_m *ConsoleClientMock) GetServiceContext(name string) (*client.ServiceContextFragment, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceContext")
	}

	var r0 *client.ServiceContextFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.ServiceContextFragment, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *client.ServiceContextFragment); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServiceContextFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetServiceContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceContext'
type ConsoleClientMock_GetServiceContext_Call struct {
	*mock.Call
}

// GetServiceContext is a helper method to define mock.On call
//   - name string
func (_e *ConsoleClientMock_Expecter) GetServiceContext(name interface{}) *ConsoleClientMock_GetServiceContext_Call {
	return &ConsoleClientMock_GetServiceContext_Call{Call: _e.mock.On("GetServiceContext", name)}
}

func (_c *ConsoleClientMock_GetServiceContext_Call) Run(run func(name string)) *ConsoleClientMock_GetServiceContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetServiceContext_Call) Return(_a0 *client.ServiceContextFragment, _a1 error) *ConsoleClientMock_GetServiceContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetServiceContext_Call) RunAndReturn(run func(string) (*client.ServiceContextFragment, error)) *ConsoleClientMock_GetServiceContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetServices provides a mock function with given fields:
func (_m *ConsoleClientMock) GetServices() ([]*client.ServiceDeploymentBaseFragment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServices")
	}

	var r0 []*client.ServiceDeploymentBaseFragment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*client.ServiceDeploymentBaseFragment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*client.ServiceDeploymentBaseFragment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.ServiceDeploymentBaseFragment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServices'
type ConsoleClientMock_GetServices_Call struct {
	*mock.Call
}

// GetServices is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) GetServices() *ConsoleClientMock_GetServices_Call {
	return &ConsoleClientMock_GetServices_Call{Call: _e.mock.On("GetServices")}
}

func (_c *ConsoleClientMock_GetServices_Call) Run(run func()) *ConsoleClientMock_GetServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_GetServices_Call) Return(_a0 []*client.ServiceDeploymentBaseFragment, _a1 error) *ConsoleClientMock_GetServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetServices_Call) RunAndReturn(run func() ([]*client.ServiceDeploymentBaseFragment, error)) *ConsoleClientMock_GetServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetStack provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetStack(ctx context.Context, id string) (*client.InfrastructureStackFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStack")
	}

	var r0 *client.InfrastructureStackFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.InfrastructureStackFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.InfrastructureStackFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.InfrastructureStackFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStack'
type ConsoleClientMock_GetStack_Call struct {
	*mock.Call
}

// GetStack is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetStack(ctx interface{}, id interface{}) *ConsoleClientMock_GetStack_Call {
	return &ConsoleClientMock_GetStack_Call{Call: _e.mock.On("GetStack", ctx, id)}
}

func (_c *ConsoleClientMock_GetStack_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetStack_Call) Return(_a0 *client.InfrastructureStackFragment, _a1 error) *ConsoleClientMock_GetStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetStack_Call) RunAndReturn(run func(context.Context, string) (*client.InfrastructureStackFragment, error)) *ConsoleClientMock_GetStack_Call {
	_c.Call.Return(run)
	return _c
}

// GetStackDefinition provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) GetStackDefinition(ctx context.Context, id string) (*client.StackDefinitionFragment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStackDefinition")
	}

	var r0 *client.StackDefinitionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*client.StackDefinitionFragment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *client.StackDefinitionFragment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StackDefinitionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetStackDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStackDefinition'
type ConsoleClientMock_GetStackDefinition_Call struct {
	*mock.Call
}

// GetStackDefinition is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) GetStackDefinition(ctx interface{}, id interface{}) *ConsoleClientMock_GetStackDefinition_Call {
	return &ConsoleClientMock_GetStackDefinition_Call{Call: _e.mock.On("GetStackDefinition", ctx, id)}
}

func (_c *ConsoleClientMock_GetStackDefinition_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_GetStackDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetStackDefinition_Call) Return(_a0 *client.StackDefinitionFragment, _a1 error) *ConsoleClientMock_GetStackDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetStackDefinition_Call) RunAndReturn(run func(context.Context, string) (*client.StackDefinitionFragment, error)) *ConsoleClientMock_GetStackDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: email
func (_m *ConsoleClientMock) GetUser(email string) (*client.UserFragment, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *client.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*client.UserFragment, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *client.UserFragment); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type ConsoleClientMock_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - email string
func (_e *ConsoleClientMock_Expecter) GetUser(email interface{}) *ConsoleClientMock_GetUser_Call {
	return &ConsoleClientMock_GetUser_Call{Call: _e.mock.On("GetUser", email)}
}

func (_c *ConsoleClientMock_GetUser_Call) Run(run func(email string)) *ConsoleClientMock_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_GetUser_Call) Return(_a0 *client.UserFragment, _a1 error) *ConsoleClientMock_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_GetUser_Call) RunAndReturn(run func(string) (*client.UserFragment, error)) *ConsoleClientMock_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterDeleting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsClusterDeleting(id *string) bool {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterDeleting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsClusterDeleting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterDeleting'
type ConsoleClientMock_IsClusterDeleting_Call struct {
	*mock.Call
}

// IsClusterDeleting is a helper method to define mock.On call
//   - id *string
func (_e *ConsoleClientMock_Expecter) IsClusterDeleting(id interface{}) *ConsoleClientMock_IsClusterDeleting_Call {
	return &ConsoleClientMock_IsClusterDeleting_Call{Call: _e.mock.On("IsClusterDeleting", id)}
}

func (_c *ConsoleClientMock_IsClusterDeleting_Call) Run(run func(id *string)) *ConsoleClientMock_IsClusterDeleting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsClusterDeleting_Call) Return(_a0 bool) *ConsoleClientMock_IsClusterDeleting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsClusterDeleting_Call) RunAndReturn(run func(*string) bool) *ConsoleClientMock_IsClusterDeleting_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterExisting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsClusterExisting(id *string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterExisting")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsClusterExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterExisting'
type ConsoleClientMock_IsClusterExisting_Call struct {
	*mock.Call
}

// IsClusterExisting is a helper method to define mock.On call
//   - id *string
func (_e *ConsoleClientMock_Expecter) IsClusterExisting(id interface{}) *ConsoleClientMock_IsClusterExisting_Call {
	return &ConsoleClientMock_IsClusterExisting_Call{Call: _e.mock.On("IsClusterExisting", id)}
}

func (_c *ConsoleClientMock_IsClusterExisting_Call) Run(run func(id *string)) *ConsoleClientMock_IsClusterExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsClusterExisting_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsClusterExisting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsClusterExisting_Call) RunAndReturn(run func(*string) (bool, error)) *ConsoleClientMock_IsClusterExisting_Call {
	_c.Call.Return(run)
	return _c
}

// IsClusterRestoreExisting provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsClusterRestoreExisting(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsClusterRestoreExisting")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsClusterRestoreExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsClusterRestoreExisting'
type ConsoleClientMock_IsClusterRestoreExisting_Call struct {
	*mock.Call
}

// IsClusterRestoreExisting is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsClusterRestoreExisting(ctx interface{}, id interface{}) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	return &ConsoleClientMock_IsClusterRestoreExisting_Call{Call: _e.mock.On("IsClusterRestoreExisting", ctx, id)}
}

func (_c *ConsoleClientMock_IsClusterRestoreExisting_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsClusterRestoreExisting_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsClusterRestoreExisting_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsClusterRestoreExisting_Call {
	_c.Call.Return(run)
	return _c
}

// IsObservabilityProviderExists provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsObservabilityProviderExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsObservabilityProviderExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsObservabilityProviderExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsObservabilityProviderExists'
type ConsoleClientMock_IsObservabilityProviderExists_Call struct {
	*mock.Call
}

// IsObservabilityProviderExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsObservabilityProviderExists(ctx interface{}, id interface{}) *ConsoleClientMock_IsObservabilityProviderExists_Call {
	return &ConsoleClientMock_IsObservabilityProviderExists_Call{Call: _e.mock.On("IsObservabilityProviderExists", ctx, id)}
}

func (_c *ConsoleClientMock_IsObservabilityProviderExists_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsObservabilityProviderExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsObservabilityProviderExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsObservabilityProviderExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsObservabilityProviderExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsObservabilityProviderExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsPipelineExisting provides a mock function with given fields: id
func (_m *ConsoleClientMock) IsPipelineExisting(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsPipelineExisting")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsPipelineExisting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPipelineExisting'
type ConsoleClientMock_IsPipelineExisting_Call struct {
	*mock.Call
}

// IsPipelineExisting is a helper method to define mock.On call
//   - id string
func (_e *ConsoleClientMock_Expecter) IsPipelineExisting(id interface{}) *ConsoleClientMock_IsPipelineExisting_Call {
	return &ConsoleClientMock_IsPipelineExisting_Call{Call: _e.mock.On("IsPipelineExisting", id)}
}

func (_c *ConsoleClientMock_IsPipelineExisting_Call) Run(run func(id string)) *ConsoleClientMock_IsPipelineExisting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsPipelineExisting_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsPipelineExisting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsPipelineExisting_Call) RunAndReturn(run func(string) (bool, error)) *ConsoleClientMock_IsPipelineExisting_Call {
	_c.Call.Return(run)
	return _c
}

// IsPrAutomationExists provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsPrAutomationExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsPrAutomationExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsPrAutomationExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPrAutomationExists'
type ConsoleClientMock_IsPrAutomationExists_Call struct {
	*mock.Call
}

// IsPrAutomationExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsPrAutomationExists(ctx interface{}, id interface{}) *ConsoleClientMock_IsPrAutomationExists_Call {
	return &ConsoleClientMock_IsPrAutomationExists_Call{Call: _e.mock.On("IsPrAutomationExists", ctx, id)}
}

func (_c *ConsoleClientMock_IsPrAutomationExists_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsPrAutomationExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsPrAutomationExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsPrAutomationExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsPrAutomationExistsByName provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) IsPrAutomationExistsByName(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsPrAutomationExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsPrAutomationExistsByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPrAutomationExistsByName'
type ConsoleClientMock_IsPrAutomationExistsByName_Call struct {
	*mock.Call
}

// IsPrAutomationExistsByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) IsPrAutomationExistsByName(ctx interface{}, name interface{}) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	return &ConsoleClientMock_IsPrAutomationExistsByName_Call{Call: _e.mock.On("IsPrAutomationExistsByName", ctx, name)}
}

func (_c *ConsoleClientMock_IsPrAutomationExistsByName_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExistsByName_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsPrAutomationExistsByName_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsPrAutomationExistsByName_Call {
	_c.Call.Return(run)
	return _c
}

// IsProjectExists provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) IsProjectExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsProjectExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsProjectExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProjectExists'
type ConsoleClientMock_IsProjectExists_Call struct {
	*mock.Call
}

// IsProjectExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) IsProjectExists(ctx interface{}, name interface{}) *ConsoleClientMock_IsProjectExists_Call {
	return &ConsoleClientMock_IsProjectExists_Call{Call: _e.mock.On("IsProjectExists", ctx, name)}
}

func (_c *ConsoleClientMock_IsProjectExists_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_IsProjectExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsProjectExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsProjectExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsProjectExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsProjectExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsProviderDeleting provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsProviderDeleting(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsProviderDeleting")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ConsoleClientMock_IsProviderDeleting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProviderDeleting'
type ConsoleClientMock_IsProviderDeleting_Call struct {
	*mock.Call
}

// IsProviderDeleting is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsProviderDeleting(ctx interface{}, id interface{}) *ConsoleClientMock_IsProviderDeleting_Call {
	return &ConsoleClientMock_IsProviderDeleting_Call{Call: _e.mock.On("IsProviderDeleting", ctx, id)}
}

func (_c *ConsoleClientMock_IsProviderDeleting_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsProviderDeleting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsProviderDeleting_Call) Return(_a0 bool) *ConsoleClientMock_IsProviderDeleting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_IsProviderDeleting_Call) RunAndReturn(run func(context.Context, string) bool) *ConsoleClientMock_IsProviderDeleting_Call {
	_c.Call.Return(run)
	return _c
}

// IsProviderExists provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsProviderExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsProviderExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsProviderExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsProviderExists'
type ConsoleClientMock_IsProviderExists_Call struct {
	*mock.Call
}

// IsProviderExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsProviderExists(ctx interface{}, id interface{}) *ConsoleClientMock_IsProviderExists_Call {
	return &ConsoleClientMock_IsProviderExists_Call{Call: _e.mock.On("IsProviderExists", ctx, id)}
}

func (_c *ConsoleClientMock_IsProviderExists_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsProviderExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsProviderExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsProviderExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsProviderExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsProviderExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsScmConnectionExists provides a mock function with given fields: ctx, name
func (_m *ConsoleClientMock) IsScmConnectionExists(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsScmConnectionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsScmConnectionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsScmConnectionExists'
type ConsoleClientMock_IsScmConnectionExists_Call struct {
	*mock.Call
}

// IsScmConnectionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ConsoleClientMock_Expecter) IsScmConnectionExists(ctx interface{}, name interface{}) *ConsoleClientMock_IsScmConnectionExists_Call {
	return &ConsoleClientMock_IsScmConnectionExists_Call{Call: _e.mock.On("IsScmConnectionExists", ctx, name)}
}

func (_c *ConsoleClientMock_IsScmConnectionExists_Call) Run(run func(ctx context.Context, name string)) *ConsoleClientMock_IsScmConnectionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsScmConnectionExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsScmConnectionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsScmConnectionExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsScmConnectionExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsServiceAccountExists provides a mock function with given fields: ctx, email
func (_m *ConsoleClientMock) IsServiceAccountExists(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for IsServiceAccountExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsServiceAccountExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsServiceAccountExists'
type ConsoleClientMock_IsServiceAccountExists_Call struct {
	*mock.Call
}

// IsServiceAccountExists is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *ConsoleClientMock_Expecter) IsServiceAccountExists(ctx interface{}, email interface{}) *ConsoleClientMock_IsServiceAccountExists_Call {
	return &ConsoleClientMock_IsServiceAccountExists_Call{Call: _e.mock.On("IsServiceAccountExists", ctx, email)}
}

func (_c *ConsoleClientMock_IsServiceAccountExists_Call) Run(run func(ctx context.Context, email string)) *ConsoleClientMock_IsServiceAccountExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsServiceAccountExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsServiceAccountExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsServiceAccountExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsServiceAccountExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsStackDefinitionExists provides a mock function with given fields: ctx, id
func (_m *ConsoleClientMock) IsStackDefinitionExists(ctx context.Context, id string) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IsStackDefinitionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_IsStackDefinitionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsStackDefinitionExists'
type ConsoleClientMock_IsStackDefinitionExists_Call struct {
	*mock.Call
}

// IsStackDefinitionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *ConsoleClientMock_Expecter) IsStackDefinitionExists(ctx interface{}, id interface{}) *ConsoleClientMock_IsStackDefinitionExists_Call {
	return &ConsoleClientMock_IsStackDefinitionExists_Call{Call: _e.mock.On("IsStackDefinitionExists", ctx, id)}
}

func (_c *ConsoleClientMock_IsStackDefinitionExists_Call) Run(run func(ctx context.Context, id string)) *ConsoleClientMock_IsStackDefinitionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ConsoleClientMock_IsStackDefinitionExists_Call) Return(_a0 bool, _a1 error) *ConsoleClientMock_IsStackDefinitionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_IsStackDefinitionExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *ConsoleClientMock_IsStackDefinitionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields:
func (_m *ConsoleClientMock) ListClusters() (*client.ListClusters, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *client.ListClusters
	var r1 error
	if rf, ok := ret.Get(0).(func() (*client.ListClusters, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *client.ListClusters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ListClusters)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type ConsoleClientMock_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) ListClusters() *ConsoleClientMock_ListClusters_Call {
	return &ConsoleClientMock_ListClusters_Call{Call: _e.mock.On("ListClusters")}
}

func (_c *ConsoleClientMock_ListClusters_Call) Run(run func()) *ConsoleClientMock_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_ListClusters_Call) Return(_a0 *client.ListClusters, _a1 error) *ConsoleClientMock_ListClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_ListClusters_Call) RunAndReturn(run func() (*client.ListClusters, error)) *ConsoleClientMock_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function with given fields:
func (_m *ConsoleClientMock) ListPipelines() (*client.GetPipelines, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *client.GetPipelines
	var r1 error
	if rf, ok := ret.Get(0).(func() (*client.GetPipelines, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *client.GetPipelines); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GetPipelines)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type ConsoleClientMock_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) ListPipelines() *ConsoleClientMock_ListPipelines_Call {
	return &ConsoleClientMock_ListPipelines_Call{Call: _e.mock.On("ListPipelines")}
}

func (_c *ConsoleClientMock_ListPipelines_Call) Run(run func()) *ConsoleClientMock_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_ListPipelines_Call) Return(_a0 *client.GetPipelines, _a1 error) *ConsoleClientMock_ListPipelines_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_ListPipelines_Call) RunAndReturn(run func() (*client.GetPipelines, error)) *ConsoleClientMock_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepositories provides a mock function with given fields:
func (_m *ConsoleClientMock) ListRepositories() (*client.ListGitRepositories, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 *client.ListGitRepositories
	var r1 error
	if rf, ok := ret.Get(0).(func() (*client.ListGitRepositories, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *client.ListGitRepositories); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ListGitRepositories)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_ListRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepositories'
type ConsoleClientMock_ListRepositories_Call struct {
	*mock.Call
}

// ListRepositories is a helper method to define mock.On call
func (_e *ConsoleClientMock_Expecter) ListRepositories() *ConsoleClientMock_ListRepositories_Call {
	return &ConsoleClientMock_ListRepositories_Call{Call: _e.mock.On("ListRepositories")}
}

func (_c *ConsoleClientMock_ListRepositories_Call) Run(run func()) *ConsoleClientMock_ListRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsoleClientMock_ListRepositories_Call) Return(_a0 *client.ListGitRepositories, _a1 error) *ConsoleClientMock_ListRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_ListRepositories_Call) RunAndReturn(run func() (*client.ListGitRepositories, error)) *ConsoleClientMock_ListRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// SavePipeline provides a mock function with given fields: name, attrs
func (_m *ConsoleClientMock) SavePipeline(name string, attrs client.PipelineAttributes) (*client.PipelineFragment, error) {
	ret := _m.Called(name, attrs)

	if len(ret) == 0 {
		panic("no return value specified for SavePipeline")
	}

	var r0 *client.PipelineFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.PipelineAttributes) (*client.PipelineFragment, error)); ok {
		return rf(name, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, client.PipelineAttributes) *client.PipelineFragment); ok {
		r0 = rf(name, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PipelineFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.PipelineAttributes) error); ok {
		r1 = rf(name, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_SavePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePipeline'
type ConsoleClientMock_SavePipeline_Call struct {
	*mock.Call
}

// SavePipeline is a helper method to define mock.On call
//   - name string
//   - attrs client.PipelineAttributes
func (_e *ConsoleClientMock_Expecter) SavePipeline(name interface{}, attrs interface{}) *ConsoleClientMock_SavePipeline_Call {
	return &ConsoleClientMock_SavePipeline_Call{Call: _e.mock.On("SavePipeline", name, attrs)}
}

func (_c *ConsoleClientMock_SavePipeline_Call) Run(run func(name string, attrs client.PipelineAttributes)) *ConsoleClientMock_SavePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.PipelineAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_SavePipeline_Call) Return(_a0 *client.PipelineFragment, _a1 error) *ConsoleClientMock_SavePipeline_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_SavePipeline_Call) RunAndReturn(run func(string, client.PipelineAttributes) (*client.PipelineFragment, error)) *ConsoleClientMock_SavePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCluster provides a mock function with given fields: id, attrs
func (_m *ConsoleClientMock) UpdateCluster(id string, attrs client.ClusterUpdateAttributes) (*client.ClusterFragment, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *client.ClusterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.ClusterUpdateAttributes) (*client.ClusterFragment, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, client.ClusterUpdateAttributes) *client.ClusterFragment); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.ClusterUpdateAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type ConsoleClientMock_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//   - id string
//   - attrs client.ClusterUpdateAttributes
func (_e *ConsoleClientMock_Expecter) UpdateCluster(id interface{}, attrs interface{}) *ConsoleClientMock_UpdateCluster_Call {
	return &ConsoleClientMock_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster", id, attrs)}
}

func (_c *ConsoleClientMock_UpdateCluster_Call) Run(run func(id string, attrs client.ClusterUpdateAttributes)) *ConsoleClientMock_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.ClusterUpdateAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateCluster_Call) Return(_a0 *client.ClusterFragment, _a1 error) *ConsoleClientMock_UpdateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateCluster_Call) RunAndReturn(run func(string, client.ClusterUpdateAttributes) (*client.ClusterFragment, error)) *ConsoleClientMock_UpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClusterRestore provides a mock function with given fields: ctx, id, attrs
func (_m *ConsoleClientMock) UpdateClusterRestore(ctx context.Context, id string, attrs client.RestoreAttributes) (*client.ClusterRestoreFragment, error) {
	ret := _m.Called(ctx, id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterRestore")
	}

	var r0 *client.ClusterRestoreFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.RestoreAttributes) (*client.ClusterRestoreFragment, error)); ok {
		return rf(ctx, id, attrs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.RestoreAttributes) *client.ClusterRestoreFragment); ok {
		r0 = rf(ctx, id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterRestoreFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.RestoreAttributes) error); ok {
		r1 = rf(ctx, id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateClusterRestore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClusterRestore'
type ConsoleClientMock_UpdateClusterRestore_Call struct {
	*mock.Call
}

// UpdateClusterRestore is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attrs client.RestoreAttributes
func (_e *ConsoleClientMock_Expecter) UpdateClusterRestore(ctx interface{}, id interface{}, attrs interface{}) *ConsoleClientMock_UpdateClusterRestore_Call {
	return &ConsoleClientMock_UpdateClusterRestore_Call{Call: _e.mock.On("UpdateClusterRestore", ctx, id, attrs)}
}

func (_c *ConsoleClientMock_UpdateClusterRestore_Call) Run(run func(ctx context.Context, id string, attrs client.RestoreAttributes)) *ConsoleClientMock_UpdateClusterRestore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.RestoreAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateClusterRestore_Call) Return(_a0 *client.ClusterRestoreFragment, _a1 error) *ConsoleClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateClusterRestore_Call) RunAndReturn(run func(context.Context, string, client.RestoreAttributes) (*client.ClusterRestoreFragment, error)) *ConsoleClientMock_UpdateClusterRestore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomStackRun provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateCustomStackRun(ctx context.Context, id string, attributes client.CustomStackRunAttributes) (*client.CustomStackRunFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomStackRun")
	}

	var r0 *client.CustomStackRunFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.CustomStackRunAttributes) (*client.CustomStackRunFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.CustomStackRunAttributes) *client.CustomStackRunFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CustomStackRunFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.CustomStackRunAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateCustomStackRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomStackRun'
type ConsoleClientMock_UpdateCustomStackRun_Call struct {
	*mock.Call
}

// UpdateCustomStackRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.CustomStackRunAttributes
func (_e *ConsoleClientMock_Expecter) UpdateCustomStackRun(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateCustomStackRun_Call {
	return &ConsoleClientMock_UpdateCustomStackRun_Call{Call: _e.mock.On("UpdateCustomStackRun", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateCustomStackRun_Call) Run(run func(ctx context.Context, id string, attributes client.CustomStackRunAttributes)) *ConsoleClientMock_UpdateCustomStackRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.CustomStackRunAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateCustomStackRun_Call) Return(_a0 *client.CustomStackRunFragment, _a1 error) *ConsoleClientMock_UpdateCustomStackRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateCustomStackRun_Call) RunAndReturn(run func(context.Context, string, client.CustomStackRunAttributes) (*client.CustomStackRunFragment, error)) *ConsoleClientMock_UpdateCustomStackRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeploymentSettings provides a mock function with given fields: ctx, attr
func (_m *ConsoleClientMock) UpdateDeploymentSettings(ctx context.Context, attr client.DeploymentSettingsAttributes) (*client.UpdateDeploymentSettings, error) {
	ret := _m.Called(ctx, attr)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploymentSettings")
	}

	var r0 *client.UpdateDeploymentSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentSettingsAttributes) (*client.UpdateDeploymentSettings, error)); ok {
		return rf(ctx, attr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.DeploymentSettingsAttributes) *client.UpdateDeploymentSettings); ok {
		r0 = rf(ctx, attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UpdateDeploymentSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.DeploymentSettingsAttributes) error); ok {
		r1 = rf(ctx, attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateDeploymentSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeploymentSettings'
type ConsoleClientMock_UpdateDeploymentSettings_Call struct {
	*mock.Call
}

// UpdateDeploymentSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - attr client.DeploymentSettingsAttributes
func (_e *ConsoleClientMock_Expecter) UpdateDeploymentSettings(ctx interface{}, attr interface{}) *ConsoleClientMock_UpdateDeploymentSettings_Call {
	return &ConsoleClientMock_UpdateDeploymentSettings_Call{Call: _e.mock.On("UpdateDeploymentSettings", ctx, attr)}
}

func (_c *ConsoleClientMock_UpdateDeploymentSettings_Call) Run(run func(ctx context.Context, attr client.DeploymentSettingsAttributes)) *ConsoleClientMock_UpdateDeploymentSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.DeploymentSettingsAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateDeploymentSettings_Call) Return(_a0 *client.UpdateDeploymentSettings, _a1 error) *ConsoleClientMock_UpdateDeploymentSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateDeploymentSettings_Call) RunAndReturn(run func(context.Context, client.DeploymentSettingsAttributes) (*client.UpdateDeploymentSettings, error)) *ConsoleClientMock_UpdateDeploymentSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGlobalService provides a mock function with given fields: id, attributes
func (_m *ConsoleClientMock) UpdateGlobalService(id string, attributes client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error) {
	ret := _m.Called(id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalService")
	}

	var r0 *client.GlobalServiceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error)); ok {
		return rf(id, attributes)
	}
	if rf, ok := ret.Get(0).(func(string, client.GlobalServiceAttributes) *client.GlobalServiceFragment); ok {
		r0 = rf(id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.GlobalServiceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.GlobalServiceAttributes) error); ok {
		r1 = rf(id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateGlobalService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGlobalService'
type ConsoleClientMock_UpdateGlobalService_Call struct {
	*mock.Call
}

// UpdateGlobalService is a helper method to define mock.On call
//   - id string
//   - attributes client.GlobalServiceAttributes
func (_e *ConsoleClientMock_Expecter) UpdateGlobalService(id interface{}, attributes interface{}) *ConsoleClientMock_UpdateGlobalService_Call {
	return &ConsoleClientMock_UpdateGlobalService_Call{Call: _e.mock.On("UpdateGlobalService", id, attributes)}
}

func (_c *ConsoleClientMock_UpdateGlobalService_Call) Run(run func(id string, attributes client.GlobalServiceAttributes)) *ConsoleClientMock_UpdateGlobalService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.GlobalServiceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateGlobalService_Call) Return(_a0 *client.GlobalServiceFragment, _a1 error) *ConsoleClientMock_UpdateGlobalService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateGlobalService_Call) RunAndReturn(run func(string, client.GlobalServiceAttributes) (*client.GlobalServiceFragment, error)) *ConsoleClientMock_UpdateGlobalService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNamespace provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateNamespace(ctx context.Context, id string, attributes client.ManagedNamespaceAttributes) (*client.ManagedNamespaceFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamespace")
	}

	var r0 *client.ManagedNamespaceFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ManagedNamespaceAttributes) (*client.ManagedNamespaceFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ManagedNamespaceAttributes) *client.ManagedNamespaceFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedNamespaceFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ManagedNamespaceAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNamespace'
type ConsoleClientMock_UpdateNamespace_Call struct {
	*mock.Call
}

// UpdateNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.ManagedNamespaceAttributes
func (_e *ConsoleClientMock_Expecter) UpdateNamespace(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateNamespace_Call {
	return &ConsoleClientMock_UpdateNamespace_Call{Call: _e.mock.On("UpdateNamespace", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateNamespace_Call) Run(run func(ctx context.Context, id string, attributes client.ManagedNamespaceAttributes)) *ConsoleClientMock_UpdateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.ManagedNamespaceAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateNamespace_Call) Return(_a0 *client.ManagedNamespaceFragment, _a1 error) *ConsoleClientMock_UpdateNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateNamespace_Call) RunAndReturn(run func(context.Context, string, client.ManagedNamespaceAttributes) (*client.ManagedNamespaceFragment, error)) *ConsoleClientMock_UpdateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrAutomation provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdatePrAutomation(ctx context.Context, id string, attributes client.PrAutomationAttributes) (*client.PrAutomationFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrAutomation")
	}

	var r0 *client.PrAutomationFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.PrAutomationAttributes) (*client.PrAutomationFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.PrAutomationAttributes) *client.PrAutomationFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PrAutomationFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.PrAutomationAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdatePrAutomation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrAutomation'
type ConsoleClientMock_UpdatePrAutomation_Call struct {
	*mock.Call
}

// UpdatePrAutomation is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.PrAutomationAttributes
func (_e *ConsoleClientMock_Expecter) UpdatePrAutomation(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdatePrAutomation_Call {
	return &ConsoleClientMock_UpdatePrAutomation_Call{Call: _e.mock.On("UpdatePrAutomation", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdatePrAutomation_Call) Run(run func(ctx context.Context, id string, attributes client.PrAutomationAttributes)) *ConsoleClientMock_UpdatePrAutomation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.PrAutomationAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdatePrAutomation_Call) Return(_a0 *client.PrAutomationFragment, _a1 error) *ConsoleClientMock_UpdatePrAutomation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdatePrAutomation_Call) RunAndReturn(run func(context.Context, string, client.PrAutomationAttributes) (*client.PrAutomationFragment, error)) *ConsoleClientMock_UpdatePrAutomation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateProject(ctx context.Context, id string, attributes client.ProjectAttributes) (*client.ProjectFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *client.ProjectFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ProjectAttributes) (*client.ProjectFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ProjectAttributes) *client.ProjectFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ProjectAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type ConsoleClientMock_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.ProjectAttributes
func (_e *ConsoleClientMock_Expecter) UpdateProject(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateProject_Call {
	return &ConsoleClientMock_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateProject_Call) Run(run func(ctx context.Context, id string, attributes client.ProjectAttributes)) *ConsoleClientMock_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.ProjectAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateProject_Call) Return(_a0 *client.ProjectFragment, _a1 error) *ConsoleClientMock_UpdateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateProject_Call) RunAndReturn(run func(context.Context, string, client.ProjectAttributes) (*client.ProjectFragment, error)) *ConsoleClientMock_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProvider provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateProvider(ctx context.Context, id string, attributes client.ClusterProviderUpdateAttributes) (*client.ClusterProviderFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 *client.ClusterProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ClusterProviderUpdateAttributes) (*client.ClusterProviderFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ClusterProviderUpdateAttributes) *client.ClusterProviderFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClusterProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ClusterProviderUpdateAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'
type ConsoleClientMock_UpdateProvider_Call struct {
	*mock.Call
}

// UpdateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.ClusterProviderUpdateAttributes
func (_e *ConsoleClientMock_Expecter) UpdateProvider(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateProvider_Call {
	return &ConsoleClientMock_UpdateProvider_Call{Call: _e.mock.On("UpdateProvider", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateProvider_Call) Run(run func(ctx context.Context, id string, attributes client.ClusterProviderUpdateAttributes)) *ConsoleClientMock_UpdateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.ClusterProviderUpdateAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateProvider_Call) Return(_a0 *client.ClusterProviderFragment, _a1 error) *ConsoleClientMock_UpdateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateProvider_Call) RunAndReturn(run func(context.Context, string, client.ClusterProviderUpdateAttributes) (*client.ClusterProviderFragment, error)) *ConsoleClientMock_UpdateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepository provides a mock function with given fields: id, attrs
func (_m *ConsoleClientMock) UpdateRepository(id string, attrs client.GitAttributes) (*client.UpdateGitRepository, error) {
	ret := _m.Called(id, attrs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepository")
	}

	var r0 *client.UpdateGitRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, client.GitAttributes) (*client.UpdateGitRepository, error)); ok {
		return rf(id, attrs)
	}
	if rf, ok := ret.Get(0).(func(string, client.GitAttributes) *client.UpdateGitRepository); ok {
		r0 = rf(id, attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UpdateGitRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, client.GitAttributes) error); ok {
		r1 = rf(id, attrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepository'
type ConsoleClientMock_UpdateRepository_Call struct {
	*mock.Call
}

// UpdateRepository is a helper method to define mock.On call
//   - id string
//   - attrs client.GitAttributes
func (_e *ConsoleClientMock_Expecter) UpdateRepository(id interface{}, attrs interface{}) *ConsoleClientMock_UpdateRepository_Call {
	return &ConsoleClientMock_UpdateRepository_Call{Call: _e.mock.On("UpdateRepository", id, attrs)}
}

func (_c *ConsoleClientMock_UpdateRepository_Call) Run(run func(id string, attrs client.GitAttributes)) *ConsoleClientMock_UpdateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.GitAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateRepository_Call) Return(_a0 *client.UpdateGitRepository, _a1 error) *ConsoleClientMock_UpdateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateRepository_Call) RunAndReturn(run func(string, client.GitAttributes) (*client.UpdateGitRepository, error)) *ConsoleClientMock_UpdateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateScmConnection provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateScmConnection(ctx context.Context, id string, attributes client.ScmConnectionAttributes) (*client.ScmConnectionFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScmConnection")
	}

	var r0 *client.ScmConnectionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ScmConnectionAttributes) (*client.ScmConnectionFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ScmConnectionAttributes) *client.ScmConnectionFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ScmConnectionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ScmConnectionAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateScmConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateScmConnection'
type ConsoleClientMock_UpdateScmConnection_Call struct {
	*mock.Call
}

// UpdateScmConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.ScmConnectionAttributes
func (_e *ConsoleClientMock_Expecter) UpdateScmConnection(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateScmConnection_Call {
	return &ConsoleClientMock_UpdateScmConnection_Call{Call: _e.mock.On("UpdateScmConnection", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateScmConnection_Call) Run(run func(ctx context.Context, id string, attributes client.ScmConnectionAttributes)) *ConsoleClientMock_UpdateScmConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.ScmConnectionAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateScmConnection_Call) Return(_a0 *client.ScmConnectionFragment, _a1 error) *ConsoleClientMock_UpdateScmConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateScmConnection_Call) RunAndReturn(run func(context.Context, string, client.ScmConnectionAttributes) (*client.ScmConnectionFragment, error)) *ConsoleClientMock_UpdateScmConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: serviceId, attributes
func (_m *ConsoleClientMock) UpdateService(serviceId string, attributes client.ServiceUpdateAttributes) error {
	ret := _m.Called(serviceId, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, client.ServiceUpdateAttributes) error); ok {
		r0 = rf(serviceId, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleClientMock_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type ConsoleClientMock_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - serviceId string
//   - attributes client.ServiceUpdateAttributes
func (_e *ConsoleClientMock_Expecter) UpdateService(serviceId interface{}, attributes interface{}) *ConsoleClientMock_UpdateService_Call {
	return &ConsoleClientMock_UpdateService_Call{Call: _e.mock.On("UpdateService", serviceId, attributes)}
}

func (_c *ConsoleClientMock_UpdateService_Call) Run(run func(serviceId string, attributes client.ServiceUpdateAttributes)) *ConsoleClientMock_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.ServiceUpdateAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateService_Call) Return(_a0 error) *ConsoleClientMock_UpdateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsoleClientMock_UpdateService_Call) RunAndReturn(run func(string, client.ServiceUpdateAttributes) error) *ConsoleClientMock_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceAccount provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateServiceAccount(ctx context.Context, id string, attributes client.ServiceAccountAttributes) (*client.UserFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccount")
	}

	var r0 *client.UserFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ServiceAccountAttributes) (*client.UserFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.ServiceAccountAttributes) *client.UserFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.ServiceAccountAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceAccount'
type ConsoleClientMock_UpdateServiceAccount_Call struct {
	*mock.Call
}

// UpdateServiceAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.ServiceAccountAttributes
func (_e *ConsoleClientMock_Expecter) UpdateServiceAccount(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateServiceAccount_Call {
	return &ConsoleClientMock_UpdateServiceAccount_Call{Call: _e.mock.On("UpdateServiceAccount", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateServiceAccount_Call) Run(run func(ctx context.Context, id string, attributes client.ServiceAccountAttributes)) *ConsoleClientMock_UpdateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.ServiceAccountAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateServiceAccount_Call) Return(_a0 *client.UserFragment, _a1 error) *ConsoleClientMock_UpdateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateServiceAccount_Call) RunAndReturn(run func(context.Context, string, client.ServiceAccountAttributes) (*client.UserFragment, error)) *ConsoleClientMock_UpdateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStack provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateStack(ctx context.Context, id string, attributes client.StackAttributes) (*client.InfrastructureStackFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStack")
	}

	var r0 *client.InfrastructureStackFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.StackAttributes) (*client.InfrastructureStackFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.StackAttributes) *client.InfrastructureStackFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.InfrastructureStackFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.StackAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStack'
type ConsoleClientMock_UpdateStack_Call struct {
	*mock.Call
}

// UpdateStack is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.StackAttributes
func (_e *ConsoleClientMock_Expecter) UpdateStack(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateStack_Call {
	return &ConsoleClientMock_UpdateStack_Call{Call: _e.mock.On("UpdateStack", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateStack_Call) Run(run func(ctx context.Context, id string, attributes client.StackAttributes)) *ConsoleClientMock_UpdateStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.StackAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateStack_Call) Return(_a0 *client.InfrastructureStackFragment, _a1 error) *ConsoleClientMock_UpdateStack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateStack_Call) RunAndReturn(run func(context.Context, string, client.StackAttributes) (*client.InfrastructureStackFragment, error)) *ConsoleClientMock_UpdateStack_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStackDefinition provides a mock function with given fields: ctx, id, attributes
func (_m *ConsoleClientMock) UpdateStackDefinition(ctx context.Context, id string, attributes client.StackDefinitionAttributes) (*client.StackDefinitionFragment, error) {
	ret := _m.Called(ctx, id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStackDefinition")
	}

	var r0 *client.StackDefinitionFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, client.StackDefinitionAttributes) (*client.StackDefinitionFragment, error)); ok {
		return rf(ctx, id, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, client.StackDefinitionAttributes) *client.StackDefinitionFragment); ok {
		r0 = rf(ctx, id, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.StackDefinitionFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, client.StackDefinitionAttributes) error); ok {
		r1 = rf(ctx, id, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpdateStackDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStackDefinition'
type ConsoleClientMock_UpdateStackDefinition_Call struct {
	*mock.Call
}

// UpdateStackDefinition is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - attributes client.StackDefinitionAttributes
func (_e *ConsoleClientMock_Expecter) UpdateStackDefinition(ctx interface{}, id interface{}, attributes interface{}) *ConsoleClientMock_UpdateStackDefinition_Call {
	return &ConsoleClientMock_UpdateStackDefinition_Call{Call: _e.mock.On("UpdateStackDefinition", ctx, id, attributes)}
}

func (_c *ConsoleClientMock_UpdateStackDefinition_Call) Run(run func(ctx context.Context, id string, attributes client.StackDefinitionAttributes)) *ConsoleClientMock_UpdateStackDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(client.StackDefinitionAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpdateStackDefinition_Call) Return(_a0 *client.StackDefinitionFragment, _a1 error) *ConsoleClientMock_UpdateStackDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpdateStackDefinition_Call) RunAndReturn(run func(context.Context, string, client.StackDefinitionAttributes) (*client.StackDefinitionFragment, error)) *ConsoleClientMock_UpdateStackDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertNotificationRouter provides a mock function with given fields: ctx, attr
func (_m *ConsoleClientMock) UpsertNotificationRouter(ctx context.Context, attr client.NotificationRouterAttributes) (*client.NotificationRouterFragment, error) {
	ret := _m.Called(ctx, attr)

	if len(ret) == 0 {
		panic("no return value specified for UpsertNotificationRouter")
	}

	var r0 *client.NotificationRouterFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.NotificationRouterAttributes) (*client.NotificationRouterFragment, error)); ok {
		return rf(ctx, attr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.NotificationRouterAttributes) *client.NotificationRouterFragment); ok {
		r0 = rf(ctx, attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRouterFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.NotificationRouterAttributes) error); ok {
		r1 = rf(ctx, attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpsertNotificationRouter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertNotificationRouter'
type ConsoleClientMock_UpsertNotificationRouter_Call struct {
	*mock.Call
}

// UpsertNotificationRouter is a helper method to define mock.On call
//   - ctx context.Context
//   - attr client.NotificationRouterAttributes
func (_e *ConsoleClientMock_Expecter) UpsertNotificationRouter(ctx interface{}, attr interface{}) *ConsoleClientMock_UpsertNotificationRouter_Call {
	return &ConsoleClientMock_UpsertNotificationRouter_Call{Call: _e.mock.On("UpsertNotificationRouter", ctx, attr)}
}

func (_c *ConsoleClientMock_UpsertNotificationRouter_Call) Run(run func(ctx context.Context, attr client.NotificationRouterAttributes)) *ConsoleClientMock_UpsertNotificationRouter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.NotificationRouterAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpsertNotificationRouter_Call) Return(_a0 *client.NotificationRouterFragment, _a1 error) *ConsoleClientMock_UpsertNotificationRouter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpsertNotificationRouter_Call) RunAndReturn(run func(context.Context, client.NotificationRouterAttributes) (*client.NotificationRouterFragment, error)) *ConsoleClientMock_UpsertNotificationRouter_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertNotificationSink provides a mock function with given fields: ctx, attr
func (_m *ConsoleClientMock) UpsertNotificationSink(ctx context.Context, attr client.NotificationSinkAttributes) (*client.NotificationSinkFragment, error) {
	ret := _m.Called(ctx, attr)

	if len(ret) == 0 {
		panic("no return value specified for UpsertNotificationSink")
	}

	var r0 *client.NotificationSinkFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.NotificationSinkAttributes) (*client.NotificationSinkFragment, error)); ok {
		return rf(ctx, attr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.NotificationSinkAttributes) *client.NotificationSinkFragment); ok {
		r0 = rf(ctx, attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationSinkFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.NotificationSinkAttributes) error); ok {
		r1 = rf(ctx, attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpsertNotificationSink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertNotificationSink'
type ConsoleClientMock_UpsertNotificationSink_Call struct {
	*mock.Call
}

// UpsertNotificationSink is a helper method to define mock.On call
//   - ctx context.Context
//   - attr client.NotificationSinkAttributes
func (_e *ConsoleClientMock_Expecter) UpsertNotificationSink(ctx interface{}, attr interface{}) *ConsoleClientMock_UpsertNotificationSink_Call {
	return &ConsoleClientMock_UpsertNotificationSink_Call{Call: _e.mock.On("UpsertNotificationSink", ctx, attr)}
}

func (_c *ConsoleClientMock_UpsertNotificationSink_Call) Run(run func(ctx context.Context, attr client.NotificationSinkAttributes)) *ConsoleClientMock_UpsertNotificationSink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.NotificationSinkAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpsertNotificationSink_Call) Return(_a0 *client.NotificationSinkFragment, _a1 error) *ConsoleClientMock_UpsertNotificationSink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpsertNotificationSink_Call) RunAndReturn(run func(context.Context, client.NotificationSinkAttributes) (*client.NotificationSinkFragment, error)) *ConsoleClientMock_UpsertNotificationSink_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertObservabilityProvider provides a mock function with given fields: ctx, attributes
func (_m *ConsoleClientMock) UpsertObservabilityProvider(ctx context.Context, attributes client.ObservabilityProviderAttributes) (*client.ObservabilityProviderFragment, error) {
	ret := _m.Called(ctx, attributes)

	if len(ret) == 0 {
		panic("no return value specified for UpsertObservabilityProvider")
	}

	var r0 *client.ObservabilityProviderFragment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ObservabilityProviderAttributes) (*client.ObservabilityProviderFragment, error)); ok {
		return rf(ctx, attributes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ObservabilityProviderAttributes) *client.ObservabilityProviderFragment); ok {
		r0 = rf(ctx, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ObservabilityProviderFragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ObservabilityProviderAttributes) error); ok {
		r1 = rf(ctx, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UpsertObservabilityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertObservabilityProvider'
type ConsoleClientMock_UpsertObservabilityProvider_Call struct {
	*mock.Call
}

// UpsertObservabilityProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - attributes client.ObservabilityProviderAttributes
func (_e *ConsoleClientMock_Expecter) UpsertObservabilityProvider(ctx interface{}, attributes interface{}) *ConsoleClientMock_UpsertObservabilityProvider_Call {
	return &ConsoleClientMock_UpsertObservabilityProvider_Call{Call: _e.mock.On("UpsertObservabilityProvider", ctx, attributes)}
}

func (_c *ConsoleClientMock_UpsertObservabilityProvider_Call) Run(run func(ctx context.Context, attributes client.ObservabilityProviderAttributes)) *ConsoleClientMock_UpsertObservabilityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ObservabilityProviderAttributes))
	})
	return _c
}

func (_c *ConsoleClientMock_UpsertObservabilityProvider_Call) Return(_a0 *client.ObservabilityProviderFragment, _a1 error) *ConsoleClientMock_UpsertObservabilityProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UpsertObservabilityProvider_Call) RunAndReturn(run func(context.Context, client.ObservabilityProviderAttributes) (*client.ObservabilityProviderFragment, error)) *ConsoleClientMock_UpsertObservabilityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UseCredentials provides a mock function with given fields: namespace, credentialsCache
func (_m *ConsoleClientMock) UseCredentials(namespace string, credentialsCache credentials.NamespaceCredentialsCache) (string, error) {
	ret := _m.Called(namespace, credentialsCache)

	if len(ret) == 0 {
		panic("no return value specified for UseCredentials")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, credentials.NamespaceCredentialsCache) (string, error)); ok {
		return rf(namespace, credentialsCache)
	}
	if rf, ok := ret.Get(0).(func(string, credentials.NamespaceCredentialsCache) string); ok {
		r0 = rf(namespace, credentialsCache)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, credentials.NamespaceCredentialsCache) error); ok {
		r1 = rf(namespace, credentialsCache)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleClientMock_UseCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseCredentials'
type ConsoleClientMock_UseCredentials_Call struct {
	*mock.Call
}

// UseCredentials is a helper method to define mock.On call
//   - namespace string
//   - credentialsCache credentials.NamespaceCredentialsCache
func (_e *ConsoleClientMock_Expecter) UseCredentials(namespace interface{}, credentialsCache interface{}) *ConsoleClientMock_UseCredentials_Call {
	return &ConsoleClientMock_UseCredentials_Call{Call: _e.mock.On("UseCredentials", namespace, credentialsCache)}
}

func (_c *ConsoleClientMock_UseCredentials_Call) Run(run func(namespace string, credentialsCache credentials.NamespaceCredentialsCache)) *ConsoleClientMock_UseCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(credentials.NamespaceCredentialsCache))
	})
	return _c
}

func (_c *ConsoleClientMock_UseCredentials_Call) Return(_a0 string, _a1 error) *ConsoleClientMock_UseCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConsoleClientMock_UseCredentials_Call) RunAndReturn(run func(string, credentials.NamespaceCredentialsCache) (string, error)) *ConsoleClientMock_UseCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsoleClientMock creates a new instance of ConsoleClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsoleClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsoleClientMock {
	mock := &ConsoleClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
