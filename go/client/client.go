// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type ConsoleClient interface {
	GetAgentRuntime(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAgentRuntime, error)
	UpsertAgentRuntime(ctx context.Context, attributes AgentRuntimeAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertAgentRuntime, error)
	DeleteAgentRuntime(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteAgentRuntime, error)
	ListAgentRuntimes(ctx context.Context, after *string, first *int64, before *string, last *int64, q *string, typeArg *AgentRuntimeType, interceptors ...clientv2.RequestInterceptor) (*ListAgentRuntimes, error)
	GetAgentRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAgentRun, error)
	ListAgentRuns(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListAgentRuns, error)
	ListAgentRuntimePendingRuns(ctx context.Context, id string, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListAgentRuntimePendingRuns, error)
	CancelAgentRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CancelAgentRun, error)
	CreateAgentRun(ctx context.Context, runtimeID string, attributes AgentRunAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateAgentRun, error)
	UpdateAgentRun(ctx context.Context, id string, attributes AgentRunStatusAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateAgentRun, error)
	UpdateAgentRunAnalysis(ctx context.Context, id string, attributes AgentAnalysisAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateAgentRunAnalysis, error)
	UpdateAgentRunTodos(ctx context.Context, id string, todos []*AgentTodoAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateAgentRunTodos, error)
	CreateAgentPullRequest(ctx context.Context, runID string, attributes AgentPullRequestAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateAgentPullRequest, error)
	AddClusterAuditLog(ctx context.Context, attributes ClusterAuditAttributes, interceptors ...clientv2.RequestInterceptor) (*AddClusterAuditLog, error)
	ListScmWebhooks(ctx context.Context, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListScmWebhooks, error)
	GetScmWebhook(ctx context.Context, id *string, externalID *string, interceptors ...clientv2.RequestInterceptor) (*GetScmWebhook, error)
	CreateScmWebhook(ctx context.Context, connectionID string, owner string, interceptors ...clientv2.RequestInterceptor) (*CreateScmWebhook, error)
	CreateScmWebhookPointer(ctx context.Context, attributes ScmWebhookAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateScmWebhookPointer, error)
	DeleteScmWebhook(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteScmWebhook, error)
	ListObservabilityWebhooks(ctx context.Context, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListObservabilityWebhooks, error)
	GetObservabilityWebhook(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetObservabilityWebhook, error)
	UpsertObservabilityWebhook(ctx context.Context, attributes ObservabilityWebhookAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertObservabilityWebhook, error)
	DeleteObservabilityWebhook(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteObservabilityWebhook, error)
	CreateClusterBackup(ctx context.Context, attributes BackupAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterBackup, error)
	GetClusterBackup(ctx context.Context, id *string, clusterID *string, namespace *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterBackup, error)
	UpdateClusterRestore(ctx context.Context, id string, attributes RestoreAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterRestore, error)
	CreateClusterRestore(ctx context.Context, backupID string, interceptors ...clientv2.RequestInterceptor) (*CreateClusterRestore, error)
	GetClusterRestore(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetClusterRestore, error)
	CreateBootstrapToken(ctx context.Context, attributes BootstrapTokenAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateBootstrapToken, error)
	DeleteBootstrapToken(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteBootstrapToken, error)
	UpsertCatalog(ctx context.Context, attributes *CatalogAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertCatalog, error)
	DeleteCatalog(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCatalog, error)
	GetCatalog(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetCatalog, error)
	UpsertCloudConnection(ctx context.Context, attributes CloudConnectionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertCloudConnection, error)
	DeleteCloudConnection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCloudConnection, error)
	GetCloudConnection(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetCloudConnection, error)
	CreateCluster(ctx context.Context, attributes ClusterAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateCluster, error)
	UpdateCluster(ctx context.Context, id string, attributes ClusterUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateCluster, error)
	DeleteCluster(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCluster, error)
	DetachCluster(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DetachCluster, error)
	CreateClusterProvider(ctx context.Context, attributes ClusterProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterProvider, error)
	UpdateClusterProvider(ctx context.Context, id string, attributes ClusterProviderUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterProvider, error)
	DeleteClusterProvider(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteClusterProvider, error)
	PingCluster(ctx context.Context, attributes ClusterPing, interceptors ...clientv2.RequestInterceptor) (*PingCluster, error)
	RegisterRuntimeServices(ctx context.Context, services []*RuntimeServiceAttributes, layout *OperationalLayoutAttributes, deprecated []*DeprecatedCustomResourceAttributes, serviceID *string, interceptors ...clientv2.RequestInterceptor) (*RegisterRuntimeServices, error)
	ListClusters(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusters, error)
	ListClustersWithParameters(ctx context.Context, after *string, first *int64, before *string, last *int64, projectID *string, tagQuery *TagQuery, interceptors ...clientv2.RequestInterceptor) (*ListClustersWithParameters, error)
	GetCluster(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetCluster, error)
	GetTinyCluster(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetTinyCluster, error)
	GetAgentURL(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAgentURL, error)
	GetClusterWithToken(ctx context.Context, id *string, handle *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterWithToken, error)
	GetClusterByHandle(ctx context.Context, handle *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterByHandle, error)
	GetClusterProvider(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetClusterProvider, error)
	GetClusterProviderByCloud(ctx context.Context, cloud string, interceptors ...clientv2.RequestInterceptor) (*GetClusterProviderByCloud, error)
	ListClusterServices(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListClusterServices, error)
	ListServiceDeployments(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListServiceDeployments, error)
	MyCluster(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*MyCluster, error)
	UpsertVirtualCluster(ctx context.Context, parentID string, attributes ClusterAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertVirtualCluster, error)
	GetGlobalServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetGlobalServiceDeployment, error)
	CreateGlobalServiceDeployment(ctx context.Context, serviceID string, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGlobalServiceDeployment, error)
	CreateGlobalServiceDeploymentFromTemplate(ctx context.Context, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGlobalServiceDeploymentFromTemplate, error)
	UpdateGlobalServiceDeployment(ctx context.Context, id string, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGlobalServiceDeployment, error)
	DeleteGlobalServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteGlobalServiceDeployment, error)
	CreateServiceDeployment(ctx context.Context, clusterID string, attributes ServiceDeploymentAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceDeployment, error)
	CreateServiceDeploymentWithHandle(ctx context.Context, cluster string, attributes ServiceDeploymentAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceDeploymentWithHandle, error)
	DeleteServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteServiceDeployment, error)
	DetachServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DetachServiceDeployment, error)
	UpdateServiceDeployment(ctx context.Context, id string, attributes ServiceUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceDeployment, error)
	UpdateServiceDeploymentWithHandle(ctx context.Context, cluster string, name string, attributes ServiceUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceDeploymentWithHandle, error)
	CloneServiceDeployment(ctx context.Context, clusterID string, id string, attributes ServiceCloneAttributes, interceptors ...clientv2.RequestInterceptor) (*CloneServiceDeployment, error)
	CloneServiceDeploymentWithHandle(ctx context.Context, clusterID string, cluster string, name string, attributes ServiceCloneAttributes, interceptors ...clientv2.RequestInterceptor) (*CloneServiceDeploymentWithHandle, error)
	RollbackService(ctx context.Context, id string, revisionID string, interceptors ...clientv2.RequestInterceptor) (*RollbackService, error)
	UpdateServiceComponents(ctx context.Context, id string, components []*ComponentAttributes, revisionID string, sha *string, errors []*ServiceErrorAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceComponents, error)
	AddServiceError(ctx context.Context, id string, errors []*ServiceErrorAttributes, interceptors ...clientv2.RequestInterceptor) (*AddServiceError, error)
	UpdateDeploymentSettings(ctx context.Context, attributes DeploymentSettingsAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateDeploymentSettings, error)
	GetDeploymentSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetDeploymentSettings, error)
	GetServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeployment, error)
	GetServiceDeploymentComponents(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeploymentComponents, error)
	GetServiceDeploymentForAgent(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeploymentForAgent, error)
	GetServiceDeploymentByHandle(ctx context.Context, cluster string, name string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeploymentByHandle, error)
	ListServiceDeployment(ctx context.Context, after *string, before *string, last *int64, clusterID *string, interceptors ...clientv2.RequestInterceptor) (*ListServiceDeployment, error)
	PagedClusterServices(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterServices, error)
	PagedClusterServicesForAgent(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterServicesForAgent, error)
	PagedClusterServiceIds(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterServiceIds, error)
	ListServiceDeploymentByHandle(ctx context.Context, after *string, before *string, last *int64, cluster *string, interceptors ...clientv2.RequestInterceptor) (*ListServiceDeploymentByHandle, error)
	GetServiceContext(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetServiceContext, error)
	SaveServiceContext(ctx context.Context, name string, attributes ServiceContextAttributes, interceptors ...clientv2.RequestInterceptor) (*SaveServiceContext, error)
	DeleteServiceContext(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteServiceContext, error)
	CreateGlobalService(ctx context.Context, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGlobalService, error)
	UpdateGlobalService(ctx context.Context, id string, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGlobalService, error)
	DeleteGlobalService(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteGlobalService, error)
	KickService(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*KickService, error)
	KickServiceByHandle(ctx context.Context, cluster string, name string, interceptors ...clientv2.RequestInterceptor) (*KickServiceByHandle, error)
	GetClusterRegistration(ctx context.Context, id *string, machineID *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterRegistration, error)
	GetClusterRegistrations(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*GetClusterRegistrations, error)
	CreateClusterRegistration(ctx context.Context, attributes ClusterRegistrationCreateAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterRegistration, error)
	UpdateClusterRegistration(ctx context.Context, id string, attributes ClusterRegistrationUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterRegistration, error)
	DeleteClusterRegistration(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteClusterRegistration, error)
	CreateClusterIsoImage(ctx context.Context, attributes ClusterIsoImageAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterIsoImage, error)
	UpdateClusterIsoImage(ctx context.Context, id string, attributes ClusterIsoImageAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterIsoImage, error)
	DeleteClusterIsoImage(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteClusterIsoImage, error)
	GetClusterIsoImage(ctx context.Context, id *string, image *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterIsoImage, error)
	GetFederatedCredential(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetFederatedCredential, error)
	CreateFederatedCredential(ctx context.Context, attributes FederatedCredentialAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateFederatedCredential, error)
	DeleteFederatedCredential(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteFederatedCredential, error)
	UpdateFederatedCredential(ctx context.Context, id string, attributes FederatedCredentialAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateFederatedCredential, error)
	GetFlow(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetFlow, error)
	UpsertFlow(ctx context.Context, attributes FlowAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertFlow, error)
	DeleteFlow(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteFlow, error)
	GetClusterGates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetClusterGates, error)
	PagedClusterGates(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterGates, error)
	PagedClusterGateIDs(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterGateIDs, error)
	UpdateGate(ctx context.Context, id string, attributes GateUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGate, error)
	GetClusterGate(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetClusterGate, error)
	CreateGitRepository(ctx context.Context, attributes GitAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGitRepository, error)
	UpdateGitRepository(ctx context.Context, id string, attributes GitAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGitRepository, error)
	DeleteGitRepository(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteGitRepository, error)
	ListGitRepositories(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListGitRepositories, error)
	GetGitRepository(ctx context.Context, id *string, url *string, interceptors ...clientv2.RequestInterceptor) (*GetGitRepository, error)
	GetScmConnection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetScmConnection, error)
	GetScmConnectionByName(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetScmConnectionByName, error)
	ListScmConnections(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListScmConnections, error)
	CreateScmConnection(ctx context.Context, attributes ScmConnectionAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateScmConnection, error)
	UpdateScmConnection(ctx context.Context, id string, attributes ScmConnectionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateScmConnection, error)
	DeleteScmConnection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteScmConnection, error)
	GetPrAutomation(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPrAutomation, error)
	GetPrAutomationByName(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetPrAutomationByName, error)
	ListPrAutomations(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListPrAutomations, error)
	CreatePrAutomation(ctx context.Context, attributes PrAutomationAttributes, interceptors ...clientv2.RequestInterceptor) (*CreatePrAutomation, error)
	UpdatePrAutomation(ctx context.Context, id string, attributes PrAutomationAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdatePrAutomation, error)
	DeletePrAutomation(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePrAutomation, error)
	CreatePullRequest(ctx context.Context, id string, identifier *string, branch *string, context *string, interceptors ...clientv2.RequestInterceptor) (*CreatePullRequest, error)
	GetPrGovernance(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetPrGovernance, error)
	DeletePrGovernance(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePrGovernance, error)
	UpsertPrGovernance(ctx context.Context, attributes PrGovernanceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertPrGovernance, error)
	GetGroup(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetGroup, error)
	CreateGroup(ctx context.Context, attributtes GroupAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error)
	UpdateGroup(ctx context.Context, groupID string, attributtes GroupAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error)
	DeleteGroup(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error)
	ListHelmRepositories(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListHelmRepositories, error)
	GetHelmRepository(ctx context.Context, url string, interceptors ...clientv2.RequestInterceptor) (*GetHelmRepository, error)
	UpsertHelmRepository(ctx context.Context, url string, attributes *HelmRepositoryAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertHelmRepository, error)
	IngestClusterCost(ctx context.Context, costs CostIngestAttributes, interceptors ...clientv2.RequestInterceptor) (*IngestClusterCost, error)
	GetMCPServers(ctx context.Context, q *string, first *int64, after *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*GetMCPServers, error)
	GetMCPServer(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetMCPServer, error)
	UpsertMCPServer(ctx context.Context, attributes McpServerAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertMCPServer, error)
	DeleteMCPServer(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteMCPServer, error)
	ListNamespaces(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListNamespaces, error)
	ListClusterNamespaces(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterNamespaces, error)
	GetNamespace(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNamespace, error)
	GetNamespaceByName(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetNamespaceByName, error)
	CreateNamespace(ctx context.Context, attributes ManagedNamespaceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateNamespace, error)
	UpdateNamespace(ctx context.Context, id string, attributes ManagedNamespaceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateNamespace, error)
	DeleteNamespace(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteNamespace, error)
	UpsertNotificationSink(ctx context.Context, attributes NotificationSinkAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertNotificationSink, error)
	DeleteNotificationSink(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteNotificationSink, error)
	GetNotificationSink(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationSink, error)
	GetNotificationSinkByName(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationSinkByName, error)
	ListNotificationSinks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListNotificationSinks, error)
	GetNotificationRouter(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationRouter, error)
	GetNotificationRouterByName(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationRouterByName, error)
	DeleteNotificationRouter(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteNotificationRouter, error)
	UpsertNotificationRouter(ctx context.Context, attributes NotificationRouterAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertNotificationRouter, error)
	CreateOIDCProvider(ctx context.Context, typeArg OidcProviderType, attributes OidcProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateOIDCProvider, error)
	UpdateOIDCProvider(ctx context.Context, id string, typeArg OidcProviderType, attributes OidcProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateOIDCProvider, error)
	DeleteOIDCProvider(ctx context.Context, id string, typeArg OidcProviderType, interceptors ...clientv2.RequestInterceptor) (*DeleteOIDCProvider, error)
	ListObservabilityProviders(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListObservabilityProviders, error)
	GetObservabilityProvider(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetObservabilityProvider, error)
	UpsertObservabilityProvider(ctx context.Context, attributes ObservabilityProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertObservabilityProvider, error)
	DeleteObservabilityProvider(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteObservabilityProvider, error)
	UpsertObserver(ctx context.Context, attributes ObserverAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertObserver, error)
	DeleteObserver(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteObserver, error)
	GetObserver(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetObserver, error)
	UpsertPolicyConstraints(ctx context.Context, constraints []*PolicyConstraintAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertPolicyConstraints, error)
	ListPolicyConstraints(ctx context.Context, after *string, first *int64, before *string, last *int64, namespace *string, kind *string, q *string, interceptors ...clientv2.RequestInterceptor) (*ListPolicyConstraints, error)
	ListViolationStatistics(ctx context.Context, field ConstraintViolationField, interceptors ...clientv2.RequestInterceptor) (*ListViolationStatistics, error)
	GetPersona(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPersona, error)
	CreatePersona(ctx context.Context, attributes PersonaAttributes, interceptors ...clientv2.RequestInterceptor) (*CreatePersona, error)
	UpdatePersona(ctx context.Context, id string, attributes PersonaAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdatePersona, error)
	DeletePersona(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePersona, error)
	SavePipeline(ctx context.Context, name string, attributes PipelineAttributes, interceptors ...clientv2.RequestInterceptor) (*SavePipeline, error)
	DeletePipeline(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePipeline, error)
	GetPipeline(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPipeline, error)
	GetPipelines(ctx context.Context, after *string, interceptors ...clientv2.RequestInterceptor) (*GetPipelines, error)
	CreatePipelineContext(ctx context.Context, pipelineID string, attributes PipelineContextAttributes, interceptors ...clientv2.RequestInterceptor) (*CreatePipelineContext, error)
	GetPipelineContext(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPipelineContext, error)
	ListComplianceReportGenerators(ctx context.Context, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListComplianceReportGenerators, error)
	GetComplianceReportGenerator(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetComplianceReportGenerator, error)
	UpsertComplianceReportGenerator(ctx context.Context, attributes ComplianceReportGeneratorAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertComplianceReportGenerator, error)
	DeleteComplianceReportGenerator(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteComplianceReportGenerator, error)
	GetPreviewEnvironmentTemplate(ctx context.Context, id *string, flowID *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetPreviewEnvironmentTemplate, error)
	UpsertPreviewEnvironmentTemplate(ctx context.Context, attributes PreviewEnvironmentTemplateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertPreviewEnvironmentTemplate, error)
	DeletePreviewEnvironmentTemplate(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePreviewEnvironmentTemplate, error)
	ListProjects(ctx context.Context, after *string, before *string, first *int64, last *int64, q *string, interceptors ...clientv2.RequestInterceptor) (*ListProjects, error)
	GetProject(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetProject, error)
	CreateProject(ctx context.Context, attributes ProjectAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateProject, error)
	UpdateProject(ctx context.Context, id string, attributes ProjectAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateProject, error)
	DeleteProject(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteProject, error)
	CreateProviderCredential(ctx context.Context, attributes ProviderCredentialAttributes, name string, interceptors ...clientv2.RequestInterceptor) (*CreateProviderCredential, error)
	DeleteProviderCredential(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteProviderCredential, error)
	ListProviders(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListProviders, error)
	UpdateRbac(ctx context.Context, rbac RbacAttributes, serviceID *string, clusterID *string, providerID *string, interceptors ...clientv2.RequestInterceptor) (*UpdateRbac, error)
	CreateSentinel(ctx context.Context, attributes *SentinelAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateSentinel, error)
	UpdateSentinel(ctx context.Context, id string, attributes *SentinelAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateSentinel, error)
	DeleteSentinel(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteSentinel, error)
	GetSentinel(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetSentinel, error)
	ServiceAccounts(ctx context.Context, after *string, first *int64, before *string, last *int64, q *string, interceptors ...clientv2.RequestInterceptor) (*ServiceAccounts, error)
	CreateServiceAccount(ctx context.Context, attributes ServiceAccountAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceAccount, error)
	UpdateServiceAccount(ctx context.Context, id string, attributes ServiceAccountAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceAccount, error)
	CreateServiceAccountToken(ctx context.Context, id string, scopes []*ScopeAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceAccountToken, error)
	ShareSecret(ctx context.Context, attributes SharedSecretAttributes, interceptors ...clientv2.RequestInterceptor) (*ShareSecret, error)
	ListClusterStacks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterStacks, error)
	ListClusterStackIds(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterStackIds, error)
	ListClusterMinimalStacks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterMinimalStacks, error)
	ListInfrastructureStacks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListInfrastructureStacks, error)
	GetStackRunMinimal(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackRunMinimal, error)
	GetStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackRun, error)
	GetStackRunBase(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackRunBase, error)
	UpdateStackRun(ctx context.Context, id string, attributes StackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStackRun, error)
	ApproveStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*ApproveStackRun, error)
	CreateStack(ctx context.Context, attributes StackAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateStack, error)
	UpdateStack(ctx context.Context, id string, attributes StackAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStack, error)
	DetachStack(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DetachStack, error)
	DeleteStack(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteStack, error)
	GetInfrastructureStack(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInfrastructureStack, error)
	GetInfrastructureStackID(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInfrastructureStackID, error)
	GetInfrastructureStackStatus(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInfrastructureStackStatus, error)
	CompletesStackRun(ctx context.Context, id string, attributes StackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*CompletesStackRun, error)
	AddStackRunLogs(ctx context.Context, id string, attributes RunLogAttributes, interceptors ...clientv2.RequestInterceptor) (*AddStackRunLogs, error)
	UpdateStackRunStep(ctx context.Context, id string, attributes RunStepAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStackRunStep, error)
	UpdateCustomStackRun(ctx context.Context, id string, attributes CustomStackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateCustomStackRun, error)
	CreateCustomStackRun(ctx context.Context, attributes CustomStackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateCustomStackRun, error)
	DeleteCustomStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCustomStackRun, error)
	GetCustomStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetCustomStackRun, error)
	ListStackRuns(ctx context.Context, id string, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListStackRuns, error)
	TriggerRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*TriggerRun, error)
	GetStackDefinition(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackDefinition, error)
	ListStackDefinitions(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListStackDefinitions, error)
	CreateStackDefinition(ctx context.Context, attributes StackDefinitionAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateStackDefinition, error)
	UpdateStackDefinition(ctx context.Context, id string, attributes StackDefinitionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStackDefinition, error)
	DeleteStackDefinition(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteStackDefinition, error)
	ListAccessTokens(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListAccessTokens, error)
	GetAccessToken(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAccessToken, error)
	TokenExchange(ctx context.Context, token string, interceptors ...clientv2.RequestInterceptor) (*TokenExchange, error)
	CreateAccessToken(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*CreateAccessToken, error)
	DeleteAccessToken(ctx context.Context, token string, interceptors ...clientv2.RequestInterceptor) (*DeleteAccessToken, error)
	SaveUpgradeInsights(ctx context.Context, insights []*UpgradeInsightAttributes, addons []*CloudAddonAttributes, interceptors ...clientv2.RequestInterceptor) (*SaveUpgradeInsights, error)
	GetUser(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetUser, error)
	CreateUser(ctx context.Context, attributes UserAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error)
	UpdateUser(ctx context.Context, id *string, attributes UserAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error)
	UpsertUser(ctx context.Context, attributes UserAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertUser, error)
	DeleteUser(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error)
	AddGroupMember(ctx context.Context, groupID string, userID string, interceptors ...clientv2.RequestInterceptor) (*AddGroupMember, error)
	DeleteGroupMember(ctx context.Context, userID string, groupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroupMember, error)
	UpsertVulnerabilities(ctx context.Context, vulnerabilities []*VulnerabilityReportAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertVulnerabilities, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) ConsoleClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type AgentRuntimeFragment struct {
	ID             string                   "json:\"id\" graphql:\"id\""
	Name           string                   "json:\"name\" graphql:\"name\""
	Type           AgentRuntimeType         "json:\"type\" graphql:\"type\""
	AiProxy        *bool                    "json:\"aiProxy,omitempty\" graphql:\"aiProxy\""
	Cluster        *TinyClusterFragment     "json:\"cluster,omitempty\" graphql:\"cluster\""
	CreateBindings []*PolicyBindingFragment "json:\"createBindings,omitempty\" graphql:\"createBindings\""
}

func (t *AgentRuntimeFragment) GetID() string {
	if t == nil {
		t = &AgentRuntimeFragment{}
	}
	return t.ID
}
func (t *AgentRuntimeFragment) GetName() string {
	if t == nil {
		t = &AgentRuntimeFragment{}
	}
	return t.Name
}
func (t *AgentRuntimeFragment) GetType() *AgentRuntimeType {
	if t == nil {
		t = &AgentRuntimeFragment{}
	}
	return &t.Type
}
func (t *AgentRuntimeFragment) GetAiProxy() *bool {
	if t == nil {
		t = &AgentRuntimeFragment{}
	}
	return t.AiProxy
}
func (t *AgentRuntimeFragment) GetCluster() *TinyClusterFragment {
	if t == nil {
		t = &AgentRuntimeFragment{}
	}
	return t.Cluster
}
func (t *AgentRuntimeFragment) GetCreateBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &AgentRuntimeFragment{}
	}
	return t.CreateBindings
}

type AgentPodReferenceFragment struct {
	Name      string "json:\"name\" graphql:\"name\""
	Namespace string "json:\"namespace\" graphql:\"namespace\""
}

func (t *AgentPodReferenceFragment) GetName() string {
	if t == nil {
		t = &AgentPodReferenceFragment{}
	}
	return t.Name
}
func (t *AgentPodReferenceFragment) GetNamespace() string {
	if t == nil {
		t = &AgentPodReferenceFragment{}
	}
	return t.Namespace
}

type AgentAnalysisFragment struct {
	Summary  string    "json:\"summary\" graphql:\"summary\""
	Analysis string    "json:\"analysis\" graphql:\"analysis\""
	Bullets  []*string "json:\"bullets,omitempty\" graphql:\"bullets\""
}

func (t *AgentAnalysisFragment) GetSummary() string {
	if t == nil {
		t = &AgentAnalysisFragment{}
	}
	return t.Summary
}
func (t *AgentAnalysisFragment) GetAnalysis() string {
	if t == nil {
		t = &AgentAnalysisFragment{}
	}
	return t.Analysis
}
func (t *AgentAnalysisFragment) GetBullets() []*string {
	if t == nil {
		t = &AgentAnalysisFragment{}
	}
	return t.Bullets
}

type AgentTodoFragment struct {
	Description string "json:\"description\" graphql:\"description\""
	Done        *bool  "json:\"done,omitempty\" graphql:\"done\""
	Title       string "json:\"title\" graphql:\"title\""
}

func (t *AgentTodoFragment) GetDescription() string {
	if t == nil {
		t = &AgentTodoFragment{}
	}
	return t.Description
}
func (t *AgentTodoFragment) GetDone() *bool {
	if t == nil {
		t = &AgentTodoFragment{}
	}
	return t.Done
}
func (t *AgentTodoFragment) GetTitle() string {
	if t == nil {
		t = &AgentTodoFragment{}
	}
	return t.Title
}

type ScmCredentialFragment struct {
	Token    string "json:\"token\" graphql:\"token\""
	Username string "json:\"username\" graphql:\"username\""
}

func (t *ScmCredentialFragment) GetToken() string {
	if t == nil {
		t = &ScmCredentialFragment{}
	}
	return t.Token
}
func (t *ScmCredentialFragment) GetUsername() string {
	if t == nil {
		t = &ScmCredentialFragment{}
	}
	return t.Username
}

type PluralCredsFragment struct {
	Token *string "json:\"token,omitempty\" graphql:\"token\""
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
}

func (t *PluralCredsFragment) GetToken() *string {
	if t == nil {
		t = &PluralCredsFragment{}
	}
	return t.Token
}
func (t *PluralCredsFragment) GetURL() *string {
	if t == nil {
		t = &PluralCredsFragment{}
	}
	return t.URL
}

type AgentRunFragment struct {
	ID           string                     "json:\"id\" graphql:\"id\""
	Prompt       string                     "json:\"prompt\" graphql:\"prompt\""
	Repository   string                     "json:\"repository\" graphql:\"repository\""
	Status       AgentRunStatus             "json:\"status\" graphql:\"status\""
	Mode         AgentRunMode               "json:\"mode\" graphql:\"mode\""
	PodReference *AgentPodReferenceFragment "json:\"podReference,omitempty\" graphql:\"podReference\""
	Error        *string                    "json:\"error,omitempty\" graphql:\"error\""
	Analysis     *AgentAnalysisFragment     "json:\"analysis,omitempty\" graphql:\"analysis\""
	Todos        []*AgentTodoFragment       "json:\"todos,omitempty\" graphql:\"todos\""
	ScmCreds     *ScmCredentialFragment     "json:\"scmCreds,omitempty\" graphql:\"scmCreds\""
	PluralCreds  *PluralCredsFragment       "json:\"pluralCreds,omitempty\" graphql:\"pluralCreds\""
	Runtime      *AgentRuntimeFragment      "json:\"runtime,omitempty\" graphql:\"runtime\""
	User         *AgentRunFragment_User     "json:\"user,omitempty\" graphql:\"user\""
	Flow         *AgentRunFragment_Flow     "json:\"flow,omitempty\" graphql:\"flow\""
	PullRequests []*PullRequestFragment     "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
}

func (t *AgentRunFragment) GetID() string {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.ID
}
func (t *AgentRunFragment) GetPrompt() string {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Prompt
}
func (t *AgentRunFragment) GetRepository() string {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Repository
}
func (t *AgentRunFragment) GetStatus() *AgentRunStatus {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return &t.Status
}
func (t *AgentRunFragment) GetMode() *AgentRunMode {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return &t.Mode
}
func (t *AgentRunFragment) GetPodReference() *AgentPodReferenceFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.PodReference
}
func (t *AgentRunFragment) GetError() *string {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Error
}
func (t *AgentRunFragment) GetAnalysis() *AgentAnalysisFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Analysis
}
func (t *AgentRunFragment) GetTodos() []*AgentTodoFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Todos
}
func (t *AgentRunFragment) GetScmCreds() *ScmCredentialFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.ScmCreds
}
func (t *AgentRunFragment) GetPluralCreds() *PluralCredsFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.PluralCreds
}
func (t *AgentRunFragment) GetRuntime() *AgentRuntimeFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Runtime
}
func (t *AgentRunFragment) GetUser() *AgentRunFragment_User {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.User
}
func (t *AgentRunFragment) GetFlow() *AgentRunFragment_Flow {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.Flow
}
func (t *AgentRunFragment) GetPullRequests() []*PullRequestFragment {
	if t == nil {
		t = &AgentRunFragment{}
	}
	return t.PullRequests
}

type ScmWebhookFragment struct {
	ID         string  "json:\"id\" graphql:\"id\""
	InsertedAt *string "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Name       string  "json:\"name\" graphql:\"name\""
	Owner      string  "json:\"owner\" graphql:\"owner\""
	Type       ScmType "json:\"type\" graphql:\"type\""
	URL        string  "json:\"url\" graphql:\"url\""
}

func (t *ScmWebhookFragment) GetID() string {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return t.ID
}
func (t *ScmWebhookFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return t.InsertedAt
}
func (t *ScmWebhookFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return t.UpdatedAt
}
func (t *ScmWebhookFragment) GetName() string {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return t.Name
}
func (t *ScmWebhookFragment) GetOwner() string {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return t.Owner
}
func (t *ScmWebhookFragment) GetType() *ScmType {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return &t.Type
}
func (t *ScmWebhookFragment) GetURL() string {
	if t == nil {
		t = &ScmWebhookFragment{}
	}
	return t.URL
}

type ObservabilityWebhookFragment struct {
	ID         string                   "json:\"id\" graphql:\"id\""
	InsertedAt *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Name       string                   "json:\"name\" graphql:\"name\""
	Type       ObservabilityWebhookType "json:\"type\" graphql:\"type\""
	URL        string                   "json:\"url\" graphql:\"url\""
}

func (t *ObservabilityWebhookFragment) GetID() string {
	if t == nil {
		t = &ObservabilityWebhookFragment{}
	}
	return t.ID
}
func (t *ObservabilityWebhookFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ObservabilityWebhookFragment{}
	}
	return t.InsertedAt
}
func (t *ObservabilityWebhookFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ObservabilityWebhookFragment{}
	}
	return t.UpdatedAt
}
func (t *ObservabilityWebhookFragment) GetName() string {
	if t == nil {
		t = &ObservabilityWebhookFragment{}
	}
	return t.Name
}
func (t *ObservabilityWebhookFragment) GetType() *ObservabilityWebhookType {
	if t == nil {
		t = &ObservabilityWebhookFragment{}
	}
	return &t.Type
}
func (t *ObservabilityWebhookFragment) GetURL() string {
	if t == nil {
		t = &ObservabilityWebhookFragment{}
	}
	return t.URL
}

type ClusterBackupFragment struct {
	ID               string                         "json:\"id\" graphql:\"id\""
	Name             string                         "json:\"name\" graphql:\"name\""
	Cluster          *ClusterBackupFragment_Cluster "json:\"cluster,omitempty\" graphql:\"cluster\""
	GarbageCollected *bool                          "json:\"garbageCollected,omitempty\" graphql:\"garbageCollected\""
}

func (t *ClusterBackupFragment) GetID() string {
	if t == nil {
		t = &ClusterBackupFragment{}
	}
	return t.ID
}
func (t *ClusterBackupFragment) GetName() string {
	if t == nil {
		t = &ClusterBackupFragment{}
	}
	return t.Name
}
func (t *ClusterBackupFragment) GetCluster() *ClusterBackupFragment_Cluster {
	if t == nil {
		t = &ClusterBackupFragment{}
	}
	return t.Cluster
}
func (t *ClusterBackupFragment) GetGarbageCollected() *bool {
	if t == nil {
		t = &ClusterBackupFragment{}
	}
	return t.GarbageCollected
}

type ClusterRestoreFragment struct {
	ID     string                 "json:\"id\" graphql:\"id\""
	Status RestoreStatus          "json:\"status\" graphql:\"status\""
	Backup *ClusterBackupFragment "json:\"backup,omitempty\" graphql:\"backup\""
}

func (t *ClusterRestoreFragment) GetID() string {
	if t == nil {
		t = &ClusterRestoreFragment{}
	}
	return t.ID
}
func (t *ClusterRestoreFragment) GetStatus() *RestoreStatus {
	if t == nil {
		t = &ClusterRestoreFragment{}
	}
	return &t.Status
}
func (t *ClusterRestoreFragment) GetBackup() *ClusterBackupFragment {
	if t == nil {
		t = &ClusterRestoreFragment{}
	}
	return t.Backup
}

type BootstrapTokenBase struct {
	ID    string "json:\"id\" graphql:\"id\""
	Token string "json:\"token\" graphql:\"token\""
}

func (t *BootstrapTokenBase) GetID() string {
	if t == nil {
		t = &BootstrapTokenBase{}
	}
	return t.ID
}
func (t *BootstrapTokenBase) GetToken() string {
	if t == nil {
		t = &BootstrapTokenBase{}
	}
	return t.Token
}

type CatalogFragment struct {
	ID            string                   "json:\"id\" graphql:\"id\""
	Name          string                   "json:\"name\" graphql:\"name\""
	Description   *string                  "json:\"description,omitempty\" graphql:\"description\""
	Category      *string                  "json:\"category,omitempty\" graphql:\"category\""
	Author        *string                  "json:\"author,omitempty\" graphql:\"author\""
	Project       *ProjectFragment         "json:\"project,omitempty\" graphql:\"project\""
	ReadBindings  []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	WriteBindings []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	InsertedAt    *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt     *string                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *CatalogFragment) GetID() string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.ID
}
func (t *CatalogFragment) GetName() string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.Name
}
func (t *CatalogFragment) GetDescription() *string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.Description
}
func (t *CatalogFragment) GetCategory() *string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.Category
}
func (t *CatalogFragment) GetAuthor() *string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.Author
}
func (t *CatalogFragment) GetProject() *ProjectFragment {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.Project
}
func (t *CatalogFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.ReadBindings
}
func (t *CatalogFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.WriteBindings
}
func (t *CatalogFragment) GetInsertedAt() *string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.InsertedAt
}
func (t *CatalogFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &CatalogFragment{}
	}
	return t.UpdatedAt
}

type CloudConnectionFragment struct {
	ID           string                   "json:\"id\" graphql:\"id\""
	Name         string                   "json:\"name\" graphql:\"name\""
	ReadBindings []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	Provider     Provider                 "json:\"provider\" graphql:\"provider\""
}

func (t *CloudConnectionFragment) GetID() string {
	if t == nil {
		t = &CloudConnectionFragment{}
	}
	return t.ID
}
func (t *CloudConnectionFragment) GetName() string {
	if t == nil {
		t = &CloudConnectionFragment{}
	}
	return t.Name
}
func (t *CloudConnectionFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &CloudConnectionFragment{}
	}
	return t.ReadBindings
}
func (t *CloudConnectionFragment) GetProvider() *Provider {
	if t == nil {
		t = &CloudConnectionFragment{}
	}
	return &t.Provider
}

type ClusterFragment struct {
	ID             string                   "json:\"id\" graphql:\"id\""
	Name           string                   "json:\"name\" graphql:\"name\""
	Handle         *string                  "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool                    "json:\"self,omitempty\" graphql:\"self\""
	Version        *string                  "json:\"version,omitempty\" graphql:\"version\""
	InsertedAt     *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	PingedAt       *string                  "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Protect        *bool                    "json:\"protect,omitempty\" graphql:\"protect\""
	CurrentVersion *string                  "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string                  "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	DeletedAt      *string                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Metadata       map[string]any           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Distro         *ClusterDistro           "json:\"distro,omitempty\" graphql:\"distro\""
	Tags           []*ClusterTags           "json:\"tags,omitempty\" graphql:\"tags\""
	Provider       *ClusterProviderFragment "json:\"provider,omitempty\" graphql:\"provider\""
	NodePools      []*NodePoolFragment      "json:\"nodePools,omitempty\" graphql:\"nodePools\""
	Status         *ClusterStatusFragment   "json:\"status,omitempty\" graphql:\"status\""
	Project        *TinyProjectFragment     "json:\"project,omitempty\" graphql:\"project\""
	WriteBindings  []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	ReadBindings   []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
}

func (t *ClusterFragment) GetID() string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.ID
}
func (t *ClusterFragment) GetName() string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Name
}
func (t *ClusterFragment) GetHandle() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Handle
}
func (t *ClusterFragment) GetSelf() *bool {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Self
}
func (t *ClusterFragment) GetVersion() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Version
}
func (t *ClusterFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.InsertedAt
}
func (t *ClusterFragment) GetPingedAt() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.PingedAt
}
func (t *ClusterFragment) GetProtect() *bool {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Protect
}
func (t *ClusterFragment) GetCurrentVersion() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.CurrentVersion
}
func (t *ClusterFragment) GetKasURL() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.KasURL
}
func (t *ClusterFragment) GetDeletedAt() *string {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.DeletedAt
}
func (t *ClusterFragment) GetMetadata() map[string]any {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Metadata
}
func (t *ClusterFragment) GetDistro() *ClusterDistro {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Distro
}
func (t *ClusterFragment) GetTags() []*ClusterTags {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Tags
}
func (t *ClusterFragment) GetProvider() *ClusterProviderFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Provider
}
func (t *ClusterFragment) GetNodePools() []*NodePoolFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.NodePools
}
func (t *ClusterFragment) GetStatus() *ClusterStatusFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Status
}
func (t *ClusterFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.Project
}
func (t *ClusterFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.WriteBindings
}
func (t *ClusterFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &ClusterFragment{}
	}
	return t.ReadBindings
}

type TinyClusterFragment struct {
	ID        string               "json:\"id\" graphql:\"id\""
	Name      string               "json:\"name\" graphql:\"name\""
	Handle    *string              "json:\"handle,omitempty\" graphql:\"handle\""
	Self      *bool                "json:\"self,omitempty\" graphql:\"self\""
	DeletedAt *string              "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Project   *TinyProjectFragment "json:\"project,omitempty\" graphql:\"project\""
}

func (t *TinyClusterFragment) GetID() string {
	if t == nil {
		t = &TinyClusterFragment{}
	}
	return t.ID
}
func (t *TinyClusterFragment) GetName() string {
	if t == nil {
		t = &TinyClusterFragment{}
	}
	return t.Name
}
func (t *TinyClusterFragment) GetHandle() *string {
	if t == nil {
		t = &TinyClusterFragment{}
	}
	return t.Handle
}
func (t *TinyClusterFragment) GetSelf() *bool {
	if t == nil {
		t = &TinyClusterFragment{}
	}
	return t.Self
}
func (t *TinyClusterFragment) GetDeletedAt() *string {
	if t == nil {
		t = &TinyClusterFragment{}
	}
	return t.DeletedAt
}
func (t *TinyClusterFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &TinyClusterFragment{}
	}
	return t.Project
}

type ClusterTags struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ClusterTags) GetName() string {
	if t == nil {
		t = &ClusterTags{}
	}
	return t.Name
}
func (t *ClusterTags) GetValue() string {
	if t == nil {
		t = &ClusterTags{}
	}
	return t.Value
}

type ClusterProviderFragment struct {
	ID          string                        "json:\"id\" graphql:\"id\""
	Name        string                        "json:\"name\" graphql:\"name\""
	Namespace   string                        "json:\"namespace\" graphql:\"namespace\""
	Cloud       string                        "json:\"cloud\" graphql:\"cloud\""
	Editable    *bool                         "json:\"editable,omitempty\" graphql:\"editable\""
	DeletedAt   *string                       "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Repository  *GitRepositoryFragment        "json:\"repository,omitempty\" graphql:\"repository\""
	Service     *ServiceDeploymentFragment    "json:\"service,omitempty\" graphql:\"service\""
	Credentials []*ProviderCredentialFragment "json:\"credentials,omitempty\" graphql:\"credentials\""
}

func (t *ClusterProviderFragment) GetID() string {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.ID
}
func (t *ClusterProviderFragment) GetName() string {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Name
}
func (t *ClusterProviderFragment) GetNamespace() string {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Namespace
}
func (t *ClusterProviderFragment) GetCloud() string {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Cloud
}
func (t *ClusterProviderFragment) GetEditable() *bool {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Editable
}
func (t *ClusterProviderFragment) GetDeletedAt() *string {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.DeletedAt
}
func (t *ClusterProviderFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Repository
}
func (t *ClusterProviderFragment) GetService() *ServiceDeploymentFragment {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Service
}
func (t *ClusterProviderFragment) GetCredentials() []*ProviderCredentialFragment {
	if t == nil {
		t = &ClusterProviderFragment{}
	}
	return t.Credentials
}

type NodePoolFragment struct {
	ID           string                   "json:\"id\" graphql:\"id\""
	Name         string                   "json:\"name\" graphql:\"name\""
	MinSize      int64                    "json:\"minSize\" graphql:\"minSize\""
	MaxSize      int64                    "json:\"maxSize\" graphql:\"maxSize\""
	InstanceType string                   "json:\"instanceType\" graphql:\"instanceType\""
	Labels       map[string]any           "json:\"labels,omitempty\" graphql:\"labels\""
	Taints       []*NodePoolTaintFragment "json:\"taints,omitempty\" graphql:\"taints\""
}

func (t *NodePoolFragment) GetID() string {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.ID
}
func (t *NodePoolFragment) GetName() string {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.Name
}
func (t *NodePoolFragment) GetMinSize() int64 {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.MinSize
}
func (t *NodePoolFragment) GetMaxSize() int64 {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.MaxSize
}
func (t *NodePoolFragment) GetInstanceType() string {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.InstanceType
}
func (t *NodePoolFragment) GetLabels() map[string]any {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.Labels
}
func (t *NodePoolFragment) GetTaints() []*NodePoolTaintFragment {
	if t == nil {
		t = &NodePoolFragment{}
	}
	return t.Taints
}

type NodePoolTaintFragment struct {
	Key    string "json:\"key\" graphql:\"key\""
	Value  string "json:\"value\" graphql:\"value\""
	Effect string "json:\"effect\" graphql:\"effect\""
}

func (t *NodePoolTaintFragment) GetKey() string {
	if t == nil {
		t = &NodePoolTaintFragment{}
	}
	return t.Key
}
func (t *NodePoolTaintFragment) GetValue() string {
	if t == nil {
		t = &NodePoolTaintFragment{}
	}
	return t.Value
}
func (t *NodePoolTaintFragment) GetEffect() string {
	if t == nil {
		t = &NodePoolTaintFragment{}
	}
	return t.Effect
}

type ClusterStatusFragment struct {
	Conditions []*ClusterConditionFragment "json:\"conditions,omitempty\" graphql:\"conditions\""
}

func (t *ClusterStatusFragment) GetConditions() []*ClusterConditionFragment {
	if t == nil {
		t = &ClusterStatusFragment{}
	}
	return t.Conditions
}

type ClusterConditionFragment struct {
	Status  *string "json:\"status,omitempty\" graphql:\"status\""
	Type    *string "json:\"type,omitempty\" graphql:\"type\""
	Message *string "json:\"message,omitempty\" graphql:\"message\""
	Reason  *string "json:\"reason,omitempty\" graphql:\"reason\""
}

func (t *ClusterConditionFragment) GetStatus() *string {
	if t == nil {
		t = &ClusterConditionFragment{}
	}
	return t.Status
}
func (t *ClusterConditionFragment) GetType() *string {
	if t == nil {
		t = &ClusterConditionFragment{}
	}
	return t.Type
}
func (t *ClusterConditionFragment) GetMessage() *string {
	if t == nil {
		t = &ClusterConditionFragment{}
	}
	return t.Message
}
func (t *ClusterConditionFragment) GetReason() *string {
	if t == nil {
		t = &ClusterConditionFragment{}
	}
	return t.Reason
}

type DiffNormalizerFragment struct {
	Namespace    *string   "json:\"namespace,omitempty\" graphql:\"namespace\""
	Name         *string   "json:\"name,omitempty\" graphql:\"name\""
	Kind         *string   "json:\"kind,omitempty\" graphql:\"kind\""
	Backfill     *bool     "json:\"backfill,omitempty\" graphql:\"backfill\""
	JSONPointers []*string "json:\"jsonPointers,omitempty\" graphql:\"jsonPointers\""
}

func (t *DiffNormalizerFragment) GetNamespace() *string {
	if t == nil {
		t = &DiffNormalizerFragment{}
	}
	return t.Namespace
}
func (t *DiffNormalizerFragment) GetName() *string {
	if t == nil {
		t = &DiffNormalizerFragment{}
	}
	return t.Name
}
func (t *DiffNormalizerFragment) GetKind() *string {
	if t == nil {
		t = &DiffNormalizerFragment{}
	}
	return t.Kind
}
func (t *DiffNormalizerFragment) GetBackfill() *bool {
	if t == nil {
		t = &DiffNormalizerFragment{}
	}
	return t.Backfill
}
func (t *DiffNormalizerFragment) GetJSONPointers() []*string {
	if t == nil {
		t = &DiffNormalizerFragment{}
	}
	return t.JSONPointers
}

type ServiceDeploymentForAgent struct {
	ID            string                                     "json:\"id\" graphql:\"id\""
	Name          string                                     "json:\"name\" graphql:\"name\""
	Namespace     string                                     "json:\"namespace\" graphql:\"namespace\""
	Version       string                                     "json:\"version\" graphql:\"version\""
	Tarball       *string                                    "json:\"tarball,omitempty\" graphql:\"tarball\""
	DeletedAt     *string                                    "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DryRun        *bool                                      "json:\"dryRun,omitempty\" graphql:\"dryRun\""
	Templated     *bool                                      "json:\"templated,omitempty\" graphql:\"templated\""
	Sha           *string                                    "json:\"sha,omitempty\" graphql:\"sha\""
	Cluster       *ServiceDeploymentForAgent_Cluster         "json:\"cluster,omitempty\" graphql:\"cluster\""
	Kustomize     *KustomizeFragment                         "json:\"kustomize,omitempty\" graphql:\"kustomize\""
	Helm          *ServiceDeploymentForAgent_Helm            "json:\"helm,omitempty\" graphql:\"helm\""
	Configuration []*ServiceDeploymentForAgent_Configuration "json:\"configuration,omitempty\" graphql:\"configuration\""
	Contexts      []*ServiceDeploymentForAgent_Contexts      "json:\"contexts,omitempty\" graphql:\"contexts\""
	SyncConfig    *ServiceDeploymentForAgent_SyncConfig      "json:\"syncConfig,omitempty\" graphql:\"syncConfig\""
	Revision      *ServiceDeploymentForAgent_Revision        "json:\"revision,omitempty\" graphql:\"revision\""
	Imports       []*ServiceDeploymentForAgent_Imports       "json:\"imports,omitempty\" graphql:\"imports\""
	Renderers     []*RendererFragment                        "json:\"renderers,omitempty\" graphql:\"renderers\""
}

func (t *ServiceDeploymentForAgent) GetID() string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.ID
}
func (t *ServiceDeploymentForAgent) GetName() string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Name
}
func (t *ServiceDeploymentForAgent) GetNamespace() string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Namespace
}
func (t *ServiceDeploymentForAgent) GetVersion() string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Version
}
func (t *ServiceDeploymentForAgent) GetTarball() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Tarball
}
func (t *ServiceDeploymentForAgent) GetDeletedAt() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.DeletedAt
}
func (t *ServiceDeploymentForAgent) GetDryRun() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.DryRun
}
func (t *ServiceDeploymentForAgent) GetTemplated() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Templated
}
func (t *ServiceDeploymentForAgent) GetSha() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Sha
}
func (t *ServiceDeploymentForAgent) GetCluster() *ServiceDeploymentForAgent_Cluster {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Cluster
}
func (t *ServiceDeploymentForAgent) GetKustomize() *KustomizeFragment {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Kustomize
}
func (t *ServiceDeploymentForAgent) GetHelm() *ServiceDeploymentForAgent_Helm {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Helm
}
func (t *ServiceDeploymentForAgent) GetConfiguration() []*ServiceDeploymentForAgent_Configuration {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Configuration
}
func (t *ServiceDeploymentForAgent) GetContexts() []*ServiceDeploymentForAgent_Contexts {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Contexts
}
func (t *ServiceDeploymentForAgent) GetSyncConfig() *ServiceDeploymentForAgent_SyncConfig {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.SyncConfig
}
func (t *ServiceDeploymentForAgent) GetRevision() *ServiceDeploymentForAgent_Revision {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Revision
}
func (t *ServiceDeploymentForAgent) GetImports() []*ServiceDeploymentForAgent_Imports {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Imports
}
func (t *ServiceDeploymentForAgent) GetRenderers() []*RendererFragment {
	if t == nil {
		t = &ServiceDeploymentForAgent{}
	}
	return t.Renderers
}

type ClusterRegistrationFragment struct {
	ID         string               "json:\"id\" graphql:\"id\""
	InsertedAt *string              "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	MachineID  string               "json:\"machineId\" graphql:\"machineId\""
	Name       *string              "json:\"name,omitempty\" graphql:\"name\""
	Handle     *string              "json:\"handle,omitempty\" graphql:\"handle\""
	Metadata   map[string]any       "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags       []*ClusterTags       "json:\"tags,omitempty\" graphql:\"tags\""
	Creator    *UserFragment        "json:\"creator,omitempty\" graphql:\"creator\""
	Project    *TinyProjectFragment "json:\"project,omitempty\" graphql:\"project\""
}

func (t *ClusterRegistrationFragment) GetID() string {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.ID
}
func (t *ClusterRegistrationFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.InsertedAt
}
func (t *ClusterRegistrationFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.UpdatedAt
}
func (t *ClusterRegistrationFragment) GetMachineID() string {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.MachineID
}
func (t *ClusterRegistrationFragment) GetName() *string {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.Name
}
func (t *ClusterRegistrationFragment) GetHandle() *string {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.Handle
}
func (t *ClusterRegistrationFragment) GetMetadata() map[string]any {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.Metadata
}
func (t *ClusterRegistrationFragment) GetTags() []*ClusterTags {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.Tags
}
func (t *ClusterRegistrationFragment) GetCreator() *UserFragment {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.Creator
}
func (t *ClusterRegistrationFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &ClusterRegistrationFragment{}
	}
	return t.Project
}

type ClusterIsoImageFragment struct {
	ID       string               "json:\"id\" graphql:\"id\""
	Image    string               "json:\"image\" graphql:\"image\""
	Project  *TinyProjectFragment "json:\"project,omitempty\" graphql:\"project\""
	Registry string               "json:\"registry\" graphql:\"registry\""
	User     *string              "json:\"user,omitempty\" graphql:\"user\""
}

func (t *ClusterIsoImageFragment) GetID() string {
	if t == nil {
		t = &ClusterIsoImageFragment{}
	}
	return t.ID
}
func (t *ClusterIsoImageFragment) GetImage() string {
	if t == nil {
		t = &ClusterIsoImageFragment{}
	}
	return t.Image
}
func (t *ClusterIsoImageFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &ClusterIsoImageFragment{}
	}
	return t.Project
}
func (t *ClusterIsoImageFragment) GetRegistry() string {
	if t == nil {
		t = &ClusterIsoImageFragment{}
	}
	return t.Registry
}
func (t *ClusterIsoImageFragment) GetUser() *string {
	if t == nil {
		t = &ClusterIsoImageFragment{}
	}
	return t.User
}

type FederatedCredentialFragment struct {
	ID         string                            "json:\"id\" graphql:\"id\""
	ClaimsLike map[string]any                    "json:\"claimsLike,omitempty\" graphql:\"claimsLike\""
	Issuer     string                            "json:\"issuer\" graphql:\"issuer\""
	Scopes     []*string                         "json:\"scopes,omitempty\" graphql:\"scopes\""
	InsertedAt *string                           "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	User       *FederatedCredentialFragment_User "json:\"user,omitempty\" graphql:\"user\""
}

func (t *FederatedCredentialFragment) GetID() string {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.ID
}
func (t *FederatedCredentialFragment) GetClaimsLike() map[string]any {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.ClaimsLike
}
func (t *FederatedCredentialFragment) GetIssuer() string {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.Issuer
}
func (t *FederatedCredentialFragment) GetScopes() []*string {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.Scopes
}
func (t *FederatedCredentialFragment) GetInsertedAt() *string {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.InsertedAt
}
func (t *FederatedCredentialFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.UpdatedAt
}
func (t *FederatedCredentialFragment) GetUser() *FederatedCredentialFragment_User {
	if t == nil {
		t = &FederatedCredentialFragment{}
	}
	return t.User
}

type FlowFragment struct {
	ID            string                   "json:\"id\" graphql:\"id\""
	Name          string                   "json:\"name\" graphql:\"name\""
	Description   *string                  "json:\"description,omitempty\" graphql:\"description\""
	ReadBindings  []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	WriteBindings []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	Project       *ProjectFragment         "json:\"project,omitempty\" graphql:\"project\""
}

func (t *FlowFragment) GetID() string {
	if t == nil {
		t = &FlowFragment{}
	}
	return t.ID
}
func (t *FlowFragment) GetName() string {
	if t == nil {
		t = &FlowFragment{}
	}
	return t.Name
}
func (t *FlowFragment) GetDescription() *string {
	if t == nil {
		t = &FlowFragment{}
	}
	return t.Description
}
func (t *FlowFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &FlowFragment{}
	}
	return t.ReadBindings
}
func (t *FlowFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &FlowFragment{}
	}
	return t.WriteBindings
}
func (t *FlowFragment) GetProject() *ProjectFragment {
	if t == nil {
		t = &FlowFragment{}
	}
	return t.Project
}

type PipelineGateIDsEdgeFragment struct {
	Node *PipelineGateIDsEdgeFragment_Node_ "json:\"node,omitempty\" graphql:\"node\""
}

func (t *PipelineGateIDsEdgeFragment) GetNode() *PipelineGateIDsEdgeFragment_Node_ {
	if t == nil {
		t = &PipelineGateIDsEdgeFragment{}
	}
	return t.Node
}

type PipelineGateEdgeFragment struct {
	Node *PipelineGateFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *PipelineGateEdgeFragment) GetNode() *PipelineGateFragment {
	if t == nil {
		t = &PipelineGateEdgeFragment{}
	}
	return t.Node
}

type PipelineGateFragment struct {
	ID        string              "json:\"id\" graphql:\"id\""
	Name      string              "json:\"name\" graphql:\"name\""
	Type      GateType            "json:\"type\" graphql:\"type\""
	State     GateState           "json:\"state\" graphql:\"state\""
	UpdatedAt *string             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Spec      *GateSpecFragment   "json:\"spec,omitempty\" graphql:\"spec\""
	Status    *GateStatusFragment "json:\"status,omitempty\" graphql:\"status\""
}

func (t *PipelineGateFragment) GetID() string {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return t.ID
}
func (t *PipelineGateFragment) GetName() string {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return t.Name
}
func (t *PipelineGateFragment) GetType() *GateType {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return &t.Type
}
func (t *PipelineGateFragment) GetState() *GateState {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return &t.State
}
func (t *PipelineGateFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return t.UpdatedAt
}
func (t *PipelineGateFragment) GetSpec() *GateSpecFragment {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return t.Spec
}
func (t *PipelineGateFragment) GetStatus() *GateStatusFragment {
	if t == nil {
		t = &PipelineGateFragment{}
	}
	return t.Status
}

type GateSpecFragment struct {
	Job *JobSpecFragment "json:\"job,omitempty\" graphql:\"job\""
}

func (t *GateSpecFragment) GetJob() *JobSpecFragment {
	if t == nil {
		t = &GateSpecFragment{}
	}
	return t.Job
}

type GateStatusFragment struct {
	JobRef *JobReferenceFragment "json:\"jobRef,omitempty\" graphql:\"jobRef\""
}

func (t *GateStatusFragment) GetJobRef() *JobReferenceFragment {
	if t == nil {
		t = &GateStatusFragment{}
	}
	return t.JobRef
}

type JobSpecFragment struct {
	Namespace      string                      "json:\"namespace\" graphql:\"namespace\""
	Raw            *string                     "json:\"raw,omitempty\" graphql:\"raw\""
	Containers     []*ContainerSpecFragment    "json:\"containers,omitempty\" graphql:\"containers\""
	Labels         map[string]any              "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations    map[string]any              "json:\"annotations,omitempty\" graphql:\"annotations\""
	ServiceAccount *string                     "json:\"serviceAccount,omitempty\" graphql:\"serviceAccount\""
	Requests       *ContainerResourcesFragment "json:\"requests,omitempty\" graphql:\"requests\""
}

func (t *JobSpecFragment) GetNamespace() string {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.Namespace
}
func (t *JobSpecFragment) GetRaw() *string {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.Raw
}
func (t *JobSpecFragment) GetContainers() []*ContainerSpecFragment {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.Containers
}
func (t *JobSpecFragment) GetLabels() map[string]any {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.Labels
}
func (t *JobSpecFragment) GetAnnotations() map[string]any {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.Annotations
}
func (t *JobSpecFragment) GetServiceAccount() *string {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.ServiceAccount
}
func (t *JobSpecFragment) GetRequests() *ContainerResourcesFragment {
	if t == nil {
		t = &JobSpecFragment{}
	}
	return t.Requests
}

type ContainerResourcesFragment struct {
	Requests *ResourceRequestFragment "json:\"requests,omitempty\" graphql:\"requests\""
	Limits   *ResourceRequestFragment "json:\"limits,omitempty\" graphql:\"limits\""
}

func (t *ContainerResourcesFragment) GetRequests() *ResourceRequestFragment {
	if t == nil {
		t = &ContainerResourcesFragment{}
	}
	return t.Requests
}
func (t *ContainerResourcesFragment) GetLimits() *ResourceRequestFragment {
	if t == nil {
		t = &ContainerResourcesFragment{}
	}
	return t.Limits
}

type ResourceRequestFragment struct {
	CPU    *string "json:\"cpu,omitempty\" graphql:\"cpu\""
	Memory *string "json:\"memory,omitempty\" graphql:\"memory\""
}

func (t *ResourceRequestFragment) GetCPU() *string {
	if t == nil {
		t = &ResourceRequestFragment{}
	}
	return t.CPU
}
func (t *ResourceRequestFragment) GetMemory() *string {
	if t == nil {
		t = &ResourceRequestFragment{}
	}
	return t.Memory
}

type JobReferenceFragment struct {
	Name      string "json:\"name\" graphql:\"name\""
	Namespace string "json:\"namespace\" graphql:\"namespace\""
}

func (t *JobReferenceFragment) GetName() string {
	if t == nil {
		t = &JobReferenceFragment{}
	}
	return t.Name
}
func (t *JobReferenceFragment) GetNamespace() string {
	if t == nil {
		t = &JobReferenceFragment{}
	}
	return t.Namespace
}

type ContainerSpecFragment struct {
	Image   string                           "json:\"image\" graphql:\"image\""
	Args    []*string                        "json:\"args,omitempty\" graphql:\"args\""
	Env     []*ContainerSpecFragment_Env     "json:\"env,omitempty\" graphql:\"env\""
	EnvFrom []*ContainerSpecFragment_EnvFrom "json:\"envFrom,omitempty\" graphql:\"envFrom\""
}

func (t *ContainerSpecFragment) GetImage() string {
	if t == nil {
		t = &ContainerSpecFragment{}
	}
	return t.Image
}
func (t *ContainerSpecFragment) GetArgs() []*string {
	if t == nil {
		t = &ContainerSpecFragment{}
	}
	return t.Args
}
func (t *ContainerSpecFragment) GetEnv() []*ContainerSpecFragment_Env {
	if t == nil {
		t = &ContainerSpecFragment{}
	}
	return t.Env
}
func (t *ContainerSpecFragment) GetEnvFrom() []*ContainerSpecFragment_EnvFrom {
	if t == nil {
		t = &ContainerSpecFragment{}
	}
	return t.EnvFrom
}

type GitRepositoryFragment struct {
	ID         string      "json:\"id\" graphql:\"id\""
	Error      *string     "json:\"error,omitempty\" graphql:\"error\""
	Health     *GitHealth  "json:\"health,omitempty\" graphql:\"health\""
	AuthMethod *AuthMethod "json:\"authMethod,omitempty\" graphql:\"authMethod\""
	URL        string      "json:\"url\" graphql:\"url\""
	Decrypt    *bool       "json:\"decrypt,omitempty\" graphql:\"decrypt\""
}

func (t *GitRepositoryFragment) GetID() string {
	if t == nil {
		t = &GitRepositoryFragment{}
	}
	return t.ID
}
func (t *GitRepositoryFragment) GetError() *string {
	if t == nil {
		t = &GitRepositoryFragment{}
	}
	return t.Error
}
func (t *GitRepositoryFragment) GetHealth() *GitHealth {
	if t == nil {
		t = &GitRepositoryFragment{}
	}
	return t.Health
}
func (t *GitRepositoryFragment) GetAuthMethod() *AuthMethod {
	if t == nil {
		t = &GitRepositoryFragment{}
	}
	return t.AuthMethod
}
func (t *GitRepositoryFragment) GetURL() string {
	if t == nil {
		t = &GitRepositoryFragment{}
	}
	return t.URL
}
func (t *GitRepositoryFragment) GetDecrypt() *bool {
	if t == nil {
		t = &GitRepositoryFragment{}
	}
	return t.Decrypt
}

type PrGovernanceFragment struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *PrGovernanceFragment) GetID() string {
	if t == nil {
		t = &PrGovernanceFragment{}
	}
	return t.ID
}
func (t *PrGovernanceFragment) GetName() string {
	if t == nil {
		t = &PrGovernanceFragment{}
	}
	return t.Name
}

type HelmRepositoryFragment struct {
	ID         string            "json:\"id\" graphql:\"id\""
	InsertedAt *string           "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	URL        string            "json:\"url\" graphql:\"url\""
	Provider   *HelmAuthProvider "json:\"provider,omitempty\" graphql:\"provider\""
	Health     *GitHealth        "json:\"health,omitempty\" graphql:\"health\""
}

func (t *HelmRepositoryFragment) GetID() string {
	if t == nil {
		t = &HelmRepositoryFragment{}
	}
	return t.ID
}
func (t *HelmRepositoryFragment) GetInsertedAt() *string {
	if t == nil {
		t = &HelmRepositoryFragment{}
	}
	return t.InsertedAt
}
func (t *HelmRepositoryFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &HelmRepositoryFragment{}
	}
	return t.UpdatedAt
}
func (t *HelmRepositoryFragment) GetURL() string {
	if t == nil {
		t = &HelmRepositoryFragment{}
	}
	return t.URL
}
func (t *HelmRepositoryFragment) GetProvider() *HelmAuthProvider {
	if t == nil {
		t = &HelmRepositoryFragment{}
	}
	return t.Provider
}
func (t *HelmRepositoryFragment) GetHealth() *GitHealth {
	if t == nil {
		t = &HelmRepositoryFragment{}
	}
	return t.Health
}

type MCPServerFragment struct {
	ID             string                            "json:\"id\" graphql:\"id\""
	Name           string                            "json:\"name\" graphql:\"name\""
	URL            string                            "json:\"url\" graphql:\"url\""
	Authentication *MCPServerFragment_Authentication "json:\"authentication,omitempty\" graphql:\"authentication\""
	Confirm        *bool                             "json:\"confirm,omitempty\" graphql:\"confirm\""
}

func (t *MCPServerFragment) GetID() string {
	if t == nil {
		t = &MCPServerFragment{}
	}
	return t.ID
}
func (t *MCPServerFragment) GetName() string {
	if t == nil {
		t = &MCPServerFragment{}
	}
	return t.Name
}
func (t *MCPServerFragment) GetURL() string {
	if t == nil {
		t = &MCPServerFragment{}
	}
	return t.URL
}
func (t *MCPServerFragment) GetAuthentication() *MCPServerFragment_Authentication {
	if t == nil {
		t = &MCPServerFragment{}
	}
	return t.Authentication
}
func (t *MCPServerFragment) GetConfirm() *bool {
	if t == nil {
		t = &MCPServerFragment{}
	}
	return t.Confirm
}

type KustomizeFragment struct {
	Path       string "json:\"path\" graphql:\"path\""
	EnableHelm *bool  "json:\"enableHelm,omitempty\" graphql:\"enableHelm\""
}

func (t *KustomizeFragment) GetPath() string {
	if t == nil {
		t = &KustomizeFragment{}
	}
	return t.Path
}
func (t *KustomizeFragment) GetEnableHelm() *bool {
	if t == nil {
		t = &KustomizeFragment{}
	}
	return t.EnableHelm
}

type HelmMinimalFragment struct {
	Values      *string   "json:\"values,omitempty\" graphql:\"values\""
	ValuesFiles []*string "json:\"valuesFiles,omitempty\" graphql:\"valuesFiles\""
	Release     *string   "json:\"release,omitempty\" graphql:\"release\""
}

func (t *HelmMinimalFragment) GetValues() *string {
	if t == nil {
		t = &HelmMinimalFragment{}
	}
	return t.Values
}
func (t *HelmMinimalFragment) GetValuesFiles() []*string {
	if t == nil {
		t = &HelmMinimalFragment{}
	}
	return t.ValuesFiles
}
func (t *HelmMinimalFragment) GetRelease() *string {
	if t == nil {
		t = &HelmMinimalFragment{}
	}
	return t.Release
}

type RendererFragment struct {
	Path string               "json:\"path\" graphql:\"path\""
	Type RendererType         "json:\"type\" graphql:\"type\""
	Helm *HelmMinimalFragment "json:\"helm,omitempty\" graphql:\"helm\""
}

func (t *RendererFragment) GetPath() string {
	if t == nil {
		t = &RendererFragment{}
	}
	return t.Path
}
func (t *RendererFragment) GetType() *RendererType {
	if t == nil {
		t = &RendererFragment{}
	}
	return &t.Type
}
func (t *RendererFragment) GetHelm() *HelmMinimalFragment {
	if t == nil {
		t = &RendererFragment{}
	}
	return t.Helm
}

type ServiceDeploymentBaseFragment struct {
	ID         string                  "json:\"id\" graphql:\"id\""
	Name       string                  "json:\"name\" graphql:\"name\""
	Namespace  string                  "json:\"namespace\" graphql:\"namespace\""
	Version    string                  "json:\"version\" graphql:\"version\""
	Status     ServiceDeploymentStatus "json:\"status\" graphql:\"status\""
	Kustomize  *KustomizeFragment      "json:\"kustomize,omitempty\" graphql:\"kustomize\""
	Git        *GitRefFragment         "json:\"git,omitempty\" graphql:\"git\""
	Helm       *HelmSpecFragment       "json:\"helm,omitempty\" graphql:\"helm\""
	Repository *GitRepositoryFragment  "json:\"repository,omitempty\" graphql:\"repository\""
}

func (t *ServiceDeploymentBaseFragment) GetID() string {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.ID
}
func (t *ServiceDeploymentBaseFragment) GetName() string {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Name
}
func (t *ServiceDeploymentBaseFragment) GetNamespace() string {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Namespace
}
func (t *ServiceDeploymentBaseFragment) GetVersion() string {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Version
}
func (t *ServiceDeploymentBaseFragment) GetStatus() *ServiceDeploymentStatus {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return &t.Status
}
func (t *ServiceDeploymentBaseFragment) GetKustomize() *KustomizeFragment {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Kustomize
}
func (t *ServiceDeploymentBaseFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Git
}
func (t *ServiceDeploymentBaseFragment) GetHelm() *HelmSpecFragment {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Helm
}
func (t *ServiceDeploymentBaseFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &ServiceDeploymentBaseFragment{}
	}
	return t.Repository
}

type ServiceDeploymentIDFragment struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ServiceDeploymentIDFragment) GetID() string {
	if t == nil {
		t = &ServiceDeploymentIDFragment{}
	}
	return t.ID
}

type ServiceContextFragment struct {
	ID            string         "json:\"id\" graphql:\"id\""
	Name          string         "json:\"name\" graphql:\"name\""
	Configuration map[string]any "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *ServiceContextFragment) GetID() string {
	if t == nil {
		t = &ServiceContextFragment{}
	}
	return t.ID
}
func (t *ServiceContextFragment) GetName() string {
	if t == nil {
		t = &ServiceContextFragment{}
	}
	return t.Name
}
func (t *ServiceContextFragment) GetConfiguration() map[string]any {
	if t == nil {
		t = &ServiceContextFragment{}
	}
	return t.Configuration
}

type ComponentContentFragment struct {
	ID      string  "json:\"id\" graphql:\"id\""
	Live    *string "json:\"live,omitempty\" graphql:\"live\""
	Desired *string "json:\"desired,omitempty\" graphql:\"desired\""
}

func (t *ComponentContentFragment) GetID() string {
	if t == nil {
		t = &ComponentContentFragment{}
	}
	return t.ID
}
func (t *ComponentContentFragment) GetLive() *string {
	if t == nil {
		t = &ComponentContentFragment{}
	}
	return t.Live
}
func (t *ComponentContentFragment) GetDesired() *string {
	if t == nil {
		t = &ComponentContentFragment{}
	}
	return t.Desired
}

type ServiceDeploymentFragment struct {
	ID            string                                     "json:\"id\" graphql:\"id\""
	Name          string                                     "json:\"name\" graphql:\"name\""
	Namespace     string                                     "json:\"namespace\" graphql:\"namespace\""
	Version       string                                     "json:\"version\" graphql:\"version\""
	Status        ServiceDeploymentStatus                    "json:\"status\" graphql:\"status\""
	Kustomize     *KustomizeFragment                         "json:\"kustomize,omitempty\" graphql:\"kustomize\""
	Git           *GitRefFragment                            "json:\"git,omitempty\" graphql:\"git\""
	Helm          *HelmSpecFragment                          "json:\"helm,omitempty\" graphql:\"helm\""
	Repository    *GitRepositoryFragment                     "json:\"repository,omitempty\" graphql:\"repository\""
	Components    []*ServiceDeploymentFragment_Components    "json:\"components,omitempty\" graphql:\"components\""
	Protect       *bool                                      "json:\"protect,omitempty\" graphql:\"protect\""
	DeletedAt     *string                                    "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Sha           *string                                    "json:\"sha,omitempty\" graphql:\"sha\""
	Tarball       *string                                    "json:\"tarball,omitempty\" graphql:\"tarball\""
	DryRun        *bool                                      "json:\"dryRun,omitempty\" graphql:\"dryRun\""
	Templated     *bool                                      "json:\"templated,omitempty\" graphql:\"templated\""
	Configuration []*ServiceDeploymentFragment_Configuration "json:\"configuration,omitempty\" graphql:\"configuration\""
	Flow          *ServiceDeploymentFragment_Flow            "json:\"flow,omitempty\" graphql:\"flow\""
	SyncConfig    *ServiceDeploymentFragment_SyncConfig      "json:\"syncConfig,omitempty\" graphql:\"syncConfig\""
}

func (t *ServiceDeploymentFragment) GetID() string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.ID
}
func (t *ServiceDeploymentFragment) GetName() string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Name
}
func (t *ServiceDeploymentFragment) GetNamespace() string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Namespace
}
func (t *ServiceDeploymentFragment) GetVersion() string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Version
}
func (t *ServiceDeploymentFragment) GetStatus() *ServiceDeploymentStatus {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return &t.Status
}
func (t *ServiceDeploymentFragment) GetKustomize() *KustomizeFragment {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Kustomize
}
func (t *ServiceDeploymentFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Git
}
func (t *ServiceDeploymentFragment) GetHelm() *HelmSpecFragment {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Helm
}
func (t *ServiceDeploymentFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Repository
}
func (t *ServiceDeploymentFragment) GetComponents() []*ServiceDeploymentFragment_Components {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Components
}
func (t *ServiceDeploymentFragment) GetProtect() *bool {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Protect
}
func (t *ServiceDeploymentFragment) GetDeletedAt() *string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.DeletedAt
}
func (t *ServiceDeploymentFragment) GetSha() *string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Sha
}
func (t *ServiceDeploymentFragment) GetTarball() *string {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Tarball
}
func (t *ServiceDeploymentFragment) GetDryRun() *bool {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.DryRun
}
func (t *ServiceDeploymentFragment) GetTemplated() *bool {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Templated
}
func (t *ServiceDeploymentFragment) GetConfiguration() []*ServiceDeploymentFragment_Configuration {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Configuration
}
func (t *ServiceDeploymentFragment) GetFlow() *ServiceDeploymentFragment_Flow {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.Flow
}
func (t *ServiceDeploymentFragment) GetSyncConfig() *ServiceDeploymentFragment_SyncConfig {
	if t == nil {
		t = &ServiceDeploymentFragment{}
	}
	return t.SyncConfig
}

type ServiceDeploymentExtended struct {
	Cluster       *BaseClusterFragment                                                 "json:\"cluster,omitempty\" graphql:\"cluster\""
	Errors        []*ErrorFragment                                                     "json:\"errors,omitempty\" graphql:\"errors\""
	Revision      *RevisionFragment                                                    "json:\"revision,omitempty\" graphql:\"revision\""
	Contexts      []*ServiceContextFragment                                            "json:\"contexts,omitempty\" graphql:\"contexts\""
	ID            string                                                               "json:\"id\" graphql:\"id\""
	Name          string                                                               "json:\"name\" graphql:\"name\""
	Namespace     string                                                               "json:\"namespace\" graphql:\"namespace\""
	Version       string                                                               "json:\"version\" graphql:\"version\""
	Status        ServiceDeploymentStatus                                              "json:\"status\" graphql:\"status\""
	Kustomize     *KustomizeFragment                                                   "json:\"kustomize,omitempty\" graphql:\"kustomize\""
	Git           *GitRefFragment                                                      "json:\"git,omitempty\" graphql:\"git\""
	Helm          *HelmSpecFragment                                                    "json:\"helm,omitempty\" graphql:\"helm\""
	Repository    *GitRepositoryFragment                                               "json:\"repository,omitempty\" graphql:\"repository\""
	Components    []*ServiceDeploymentExtended_ServiceDeploymentFragment_Components    "json:\"components,omitempty\" graphql:\"components\""
	Protect       *bool                                                                "json:\"protect,omitempty\" graphql:\"protect\""
	DeletedAt     *string                                                              "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Sha           *string                                                              "json:\"sha,omitempty\" graphql:\"sha\""
	Tarball       *string                                                              "json:\"tarball,omitempty\" graphql:\"tarball\""
	DryRun        *bool                                                                "json:\"dryRun,omitempty\" graphql:\"dryRun\""
	Templated     *bool                                                                "json:\"templated,omitempty\" graphql:\"templated\""
	Configuration []*ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration "json:\"configuration,omitempty\" graphql:\"configuration\""
	Flow          *ServiceDeploymentExtended_ServiceDeploymentFragment_Flow            "json:\"flow,omitempty\" graphql:\"flow\""
	SyncConfig    *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig      "json:\"syncConfig,omitempty\" graphql:\"syncConfig\""
}

func (t *ServiceDeploymentExtended) GetCluster() *BaseClusterFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Cluster
}
func (t *ServiceDeploymentExtended) GetErrors() []*ErrorFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Errors
}
func (t *ServiceDeploymentExtended) GetRevision() *RevisionFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Revision
}
func (t *ServiceDeploymentExtended) GetContexts() []*ServiceContextFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Contexts
}
func (t *ServiceDeploymentExtended) GetID() string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.ID
}
func (t *ServiceDeploymentExtended) GetName() string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Name
}
func (t *ServiceDeploymentExtended) GetNamespace() string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Namespace
}
func (t *ServiceDeploymentExtended) GetVersion() string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Version
}
func (t *ServiceDeploymentExtended) GetStatus() *ServiceDeploymentStatus {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return &t.Status
}
func (t *ServiceDeploymentExtended) GetKustomize() *KustomizeFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Kustomize
}
func (t *ServiceDeploymentExtended) GetGit() *GitRefFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Git
}
func (t *ServiceDeploymentExtended) GetHelm() *HelmSpecFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Helm
}
func (t *ServiceDeploymentExtended) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Repository
}
func (t *ServiceDeploymentExtended) GetComponents() []*ServiceDeploymentExtended_ServiceDeploymentFragment_Components {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Components
}
func (t *ServiceDeploymentExtended) GetProtect() *bool {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Protect
}
func (t *ServiceDeploymentExtended) GetDeletedAt() *string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.DeletedAt
}
func (t *ServiceDeploymentExtended) GetSha() *string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Sha
}
func (t *ServiceDeploymentExtended) GetTarball() *string {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Tarball
}
func (t *ServiceDeploymentExtended) GetDryRun() *bool {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.DryRun
}
func (t *ServiceDeploymentExtended) GetTemplated() *bool {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Templated
}
func (t *ServiceDeploymentExtended) GetConfiguration() []*ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Configuration
}
func (t *ServiceDeploymentExtended) GetFlow() *ServiceDeploymentExtended_ServiceDeploymentFragment_Flow {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.Flow
}
func (t *ServiceDeploymentExtended) GetSyncConfig() *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig {
	if t == nil {
		t = &ServiceDeploymentExtended{}
	}
	return t.SyncConfig
}

type ErrorFragment struct {
	Source  string "json:\"source\" graphql:\"source\""
	Message string "json:\"message\" graphql:\"message\""
}

func (t *ErrorFragment) GetSource() string {
	if t == nil {
		t = &ErrorFragment{}
	}
	return t.Source
}
func (t *ErrorFragment) GetMessage() string {
	if t == nil {
		t = &ErrorFragment{}
	}
	return t.Message
}

type RevisionFragment struct {
	ID  string                "json:\"id\" graphql:\"id\""
	Sha *string               "json:\"sha,omitempty\" graphql:\"sha\""
	Git *RevisionFragment_Git "json:\"git,omitempty\" graphql:\"git\""
}

func (t *RevisionFragment) GetID() string {
	if t == nil {
		t = &RevisionFragment{}
	}
	return t.ID
}
func (t *RevisionFragment) GetSha() *string {
	if t == nil {
		t = &RevisionFragment{}
	}
	return t.Sha
}
func (t *RevisionFragment) GetGit() *RevisionFragment_Git {
	if t == nil {
		t = &RevisionFragment{}
	}
	return t.Git
}

type PolicyBindingFragment struct {
	ID    *string        "json:\"id,omitempty\" graphql:\"id\""
	Group *GroupFragment "json:\"group,omitempty\" graphql:\"group\""
	User  *UserFragment  "json:\"user,omitempty\" graphql:\"user\""
}

func (t *PolicyBindingFragment) GetID() *string {
	if t == nil {
		t = &PolicyBindingFragment{}
	}
	return t.ID
}
func (t *PolicyBindingFragment) GetGroup() *GroupFragment {
	if t == nil {
		t = &PolicyBindingFragment{}
	}
	return t.Group
}
func (t *PolicyBindingFragment) GetUser() *UserFragment {
	if t == nil {
		t = &PolicyBindingFragment{}
	}
	return t.User
}

type UserFragment struct {
	Name  string "json:\"name\" graphql:\"name\""
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UserFragment) GetName() string {
	if t == nil {
		t = &UserFragment{}
	}
	return t.Name
}
func (t *UserFragment) GetID() string {
	if t == nil {
		t = &UserFragment{}
	}
	return t.ID
}
func (t *UserFragment) GetEmail() string {
	if t == nil {
		t = &UserFragment{}
	}
	return t.Email
}

type GroupFragment struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	Global      *bool   "json:\"global,omitempty\" graphql:\"global\""
}

func (t *GroupFragment) GetID() string {
	if t == nil {
		t = &GroupFragment{}
	}
	return t.ID
}
func (t *GroupFragment) GetName() string {
	if t == nil {
		t = &GroupFragment{}
	}
	return t.Name
}
func (t *GroupFragment) GetDescription() *string {
	if t == nil {
		t = &GroupFragment{}
	}
	return t.Description
}
func (t *GroupFragment) GetGlobal() *bool {
	if t == nil {
		t = &GroupFragment{}
	}
	return t.Global
}

type GroupMemberFragment struct {
	ID    string                     "json:\"id\" graphql:\"id\""
	User  *GroupMemberFragment_User  "json:\"user,omitempty\" graphql:\"user\""
	Group *GroupMemberFragment_Group "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GroupMemberFragment) GetID() string {
	if t == nil {
		t = &GroupMemberFragment{}
	}
	return t.ID
}
func (t *GroupMemberFragment) GetUser() *GroupMemberFragment_User {
	if t == nil {
		t = &GroupMemberFragment{}
	}
	return t.User
}
func (t *GroupMemberFragment) GetGroup() *GroupMemberFragment_Group {
	if t == nil {
		t = &GroupMemberFragment{}
	}
	return t.Group
}

type GitRefFragment struct {
	Folder string "json:\"folder\" graphql:\"folder\""
	Ref    string "json:\"ref\" graphql:\"ref\""
}

func (t *GitRefFragment) GetFolder() string {
	if t == nil {
		t = &GitRefFragment{}
	}
	return t.Folder
}
func (t *GitRefFragment) GetRef() string {
	if t == nil {
		t = &GitRefFragment{}
	}
	return t.Ref
}

type HelmSpecFragment struct {
	ValuesFiles []*string "json:\"valuesFiles,omitempty\" graphql:\"valuesFiles\""
}

func (t *HelmSpecFragment) GetValuesFiles() []*string {
	if t == nil {
		t = &HelmSpecFragment{}
	}
	return t.ValuesFiles
}

type BaseClusterFragment struct {
	ID             string                       "json:\"id\" graphql:\"id\""
	Name           string                       "json:\"name\" graphql:\"name\""
	Handle         *string                      "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool                        "json:\"self,omitempty\" graphql:\"self\""
	Version        *string                      "json:\"version,omitempty\" graphql:\"version\""
	PingedAt       *string                      "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	CurrentVersion *string                      "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string                      "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	Metadata       map[string]any               "json:\"metadata,omitempty\" graphql:\"metadata\""
	Credential     *ProviderCredentialFragment  "json:\"credential,omitempty\" graphql:\"credential\""
	Provider       *BaseClusterProviderFragment "json:\"provider,omitempty\" graphql:\"provider\""
	NodePools      []*NodePoolFragment          "json:\"nodePools,omitempty\" graphql:\"nodePools\""
	Project        *TinyProjectFragment         "json:\"project,omitempty\" graphql:\"project\""
}

func (t *BaseClusterFragment) GetID() string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.ID
}
func (t *BaseClusterFragment) GetName() string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Name
}
func (t *BaseClusterFragment) GetHandle() *string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Handle
}
func (t *BaseClusterFragment) GetSelf() *bool {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Self
}
func (t *BaseClusterFragment) GetVersion() *string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Version
}
func (t *BaseClusterFragment) GetPingedAt() *string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.PingedAt
}
func (t *BaseClusterFragment) GetCurrentVersion() *string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.CurrentVersion
}
func (t *BaseClusterFragment) GetKasURL() *string {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.KasURL
}
func (t *BaseClusterFragment) GetMetadata() map[string]any {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Metadata
}
func (t *BaseClusterFragment) GetCredential() *ProviderCredentialFragment {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Credential
}
func (t *BaseClusterFragment) GetProvider() *BaseClusterProviderFragment {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Provider
}
func (t *BaseClusterFragment) GetNodePools() []*NodePoolFragment {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.NodePools
}
func (t *BaseClusterFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &BaseClusterFragment{}
	}
	return t.Project
}

type BaseClusterProviderFragment struct {
	ID         string                 "json:\"id\" graphql:\"id\""
	Name       string                 "json:\"name\" graphql:\"name\""
	Namespace  string                 "json:\"namespace\" graphql:\"namespace\""
	Cloud      string                 "json:\"cloud\" graphql:\"cloud\""
	Editable   *bool                  "json:\"editable,omitempty\" graphql:\"editable\""
	Repository *GitRepositoryFragment "json:\"repository,omitempty\" graphql:\"repository\""
}

func (t *BaseClusterProviderFragment) GetID() string {
	if t == nil {
		t = &BaseClusterProviderFragment{}
	}
	return t.ID
}
func (t *BaseClusterProviderFragment) GetName() string {
	if t == nil {
		t = &BaseClusterProviderFragment{}
	}
	return t.Name
}
func (t *BaseClusterProviderFragment) GetNamespace() string {
	if t == nil {
		t = &BaseClusterProviderFragment{}
	}
	return t.Namespace
}
func (t *BaseClusterProviderFragment) GetCloud() string {
	if t == nil {
		t = &BaseClusterProviderFragment{}
	}
	return t.Cloud
}
func (t *BaseClusterProviderFragment) GetEditable() *bool {
	if t == nil {
		t = &BaseClusterProviderFragment{}
	}
	return t.Editable
}
func (t *BaseClusterProviderFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &BaseClusterProviderFragment{}
	}
	return t.Repository
}

type GitRepositoryEdgeFragment struct {
	Node   *GitRepositoryFragment "json:\"node,omitempty\" graphql:\"node\""
	Cursor *string                "json:\"cursor,omitempty\" graphql:\"cursor\""
}

func (t *GitRepositoryEdgeFragment) GetNode() *GitRepositoryFragment {
	if t == nil {
		t = &GitRepositoryEdgeFragment{}
	}
	return t.Node
}
func (t *GitRepositoryEdgeFragment) GetCursor() *string {
	if t == nil {
		t = &GitRepositoryEdgeFragment{}
	}
	return t.Cursor
}

type DeploymentSettingsFragment struct {
	ID                 string                   "json:\"id\" graphql:\"id\""
	Name               string                   "json:\"name\" graphql:\"name\""
	AgentHelmValues    *string                  "json:\"agentHelmValues,omitempty\" graphql:\"agentHelmValues\""
	AgentVsn           string                   "json:\"agentVsn\" graphql:\"agentVsn\""
	WriteBindings      []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	ReadBindings       []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	CreateBindings     []*PolicyBindingFragment "json:\"createBindings,omitempty\" graphql:\"createBindings\""
	ArtifactRepository *GitRepositoryFragment   "json:\"artifactRepository,omitempty\" graphql:\"artifactRepository\""
	DeployerRepository *GitRepositoryFragment   "json:\"deployerRepository,omitempty\" graphql:\"deployerRepository\""
	Ai                 *AISettingsFragment      "json:\"ai,omitempty\" graphql:\"ai\""
}

func (t *DeploymentSettingsFragment) GetID() string {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.ID
}
func (t *DeploymentSettingsFragment) GetName() string {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.Name
}
func (t *DeploymentSettingsFragment) GetAgentHelmValues() *string {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.AgentHelmValues
}
func (t *DeploymentSettingsFragment) GetAgentVsn() string {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.AgentVsn
}
func (t *DeploymentSettingsFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.WriteBindings
}
func (t *DeploymentSettingsFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.ReadBindings
}
func (t *DeploymentSettingsFragment) GetCreateBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.CreateBindings
}
func (t *DeploymentSettingsFragment) GetArtifactRepository() *GitRepositoryFragment {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.ArtifactRepository
}
func (t *DeploymentSettingsFragment) GetDeployerRepository() *GitRepositoryFragment {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.DeployerRepository
}
func (t *DeploymentSettingsFragment) GetAi() *AISettingsFragment {
	if t == nil {
		t = &DeploymentSettingsFragment{}
	}
	return t.Ai
}

type ClusterEdgeFragment struct {
	Node *ClusterFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ClusterEdgeFragment) GetNode() *ClusterFragment {
	if t == nil {
		t = &ClusterEdgeFragment{}
	}
	return t.Node
}

type ServiceDeploymentEdgeFragment struct {
	Node *ServiceDeploymentBaseFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ServiceDeploymentEdgeFragment) GetNode() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &ServiceDeploymentEdgeFragment{}
	}
	return t.Node
}

type ServiceDeploymentEdgeFragmentForAgent struct {
	Node *ServiceDeploymentForAgent "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent) GetNode() *ServiceDeploymentForAgent {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent{}
	}
	return t.Node
}

type ServiceDeploymentIDEdgeFragment struct {
	Node *ServiceDeploymentIDFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ServiceDeploymentIDEdgeFragment) GetNode() *ServiceDeploymentIDFragment {
	if t == nil {
		t = &ServiceDeploymentIDEdgeFragment{}
	}
	return t.Node
}

type GlobalServiceFragment struct {
	ID       string                          "json:\"id\" graphql:\"id\""
	Name     string                          "json:\"name\" graphql:\"name\""
	Distro   *ClusterDistro                  "json:\"distro,omitempty\" graphql:\"distro\""
	Provider *GlobalServiceFragment_Provider "json:\"provider,omitempty\" graphql:\"provider\""
	Service  *GlobalServiceFragment_Service  "json:\"service,omitempty\" graphql:\"service\""
	Tags     []*ClusterTags                  "json:\"tags,omitempty\" graphql:\"tags\""
	Project  *TinyProjectFragment            "json:\"project,omitempty\" graphql:\"project\""
}

func (t *GlobalServiceFragment) GetID() string {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.ID
}
func (t *GlobalServiceFragment) GetName() string {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.Name
}
func (t *GlobalServiceFragment) GetDistro() *ClusterDistro {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.Distro
}
func (t *GlobalServiceFragment) GetProvider() *GlobalServiceFragment_Provider {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.Provider
}
func (t *GlobalServiceFragment) GetService() *GlobalServiceFragment_Service {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.Service
}
func (t *GlobalServiceFragment) GetTags() []*ClusterTags {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.Tags
}
func (t *GlobalServiceFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &GlobalServiceFragment{}
	}
	return t.Project
}

type ScmConnectionFragment struct {
	ID         string  "json:\"id\" graphql:\"id\""
	Name       string  "json:\"name\" graphql:\"name\""
	APIURL     *string "json:\"apiUrl,omitempty\" graphql:\"apiUrl\""
	BaseURL    *string "json:\"baseUrl,omitempty\" graphql:\"baseUrl\""
	Type       ScmType "json:\"type\" graphql:\"type\""
	Username   *string "json:\"username,omitempty\" graphql:\"username\""
	InsertedAt *string "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *ScmConnectionFragment) GetID() string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.ID
}
func (t *ScmConnectionFragment) GetName() string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.Name
}
func (t *ScmConnectionFragment) GetAPIURL() *string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.APIURL
}
func (t *ScmConnectionFragment) GetBaseURL() *string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.BaseURL
}
func (t *ScmConnectionFragment) GetType() *ScmType {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return &t.Type
}
func (t *ScmConnectionFragment) GetUsername() *string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.Username
}
func (t *ScmConnectionFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.InsertedAt
}
func (t *ScmConnectionFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ScmConnectionFragment{}
	}
	return t.UpdatedAt
}

type PrAutomationFragment struct {
	ID         string  "json:\"id\" graphql:\"id\""
	Name       string  "json:\"name\" graphql:\"name\""
	Title      string  "json:\"title\" graphql:\"title\""
	Addon      *string "json:\"addon,omitempty\" graphql:\"addon\""
	Message    string  "json:\"message\" graphql:\"message\""
	Identifier *string "json:\"identifier,omitempty\" graphql:\"identifier\""
	InsertedAt *string "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *PrAutomationFragment) GetID() string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.ID
}
func (t *PrAutomationFragment) GetName() string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.Name
}
func (t *PrAutomationFragment) GetTitle() string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.Title
}
func (t *PrAutomationFragment) GetAddon() *string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.Addon
}
func (t *PrAutomationFragment) GetMessage() string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.Message
}
func (t *PrAutomationFragment) GetIdentifier() *string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.Identifier
}
func (t *PrAutomationFragment) GetInsertedAt() *string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.InsertedAt
}
func (t *PrAutomationFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &PrAutomationFragment{}
	}
	return t.UpdatedAt
}

type PageInfoFragment struct {
	HasNextPage bool    "json:\"hasNextPage\" graphql:\"hasNextPage\""
	EndCursor   *string "json:\"endCursor,omitempty\" graphql:\"endCursor\""
}

func (t *PageInfoFragment) GetHasNextPage() bool {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.HasNextPage
}
func (t *PageInfoFragment) GetEndCursor() *string {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.EndCursor
}

type PipelineContextFragment struct {
	ID      string         "json:\"id\" graphql:\"id\""
	Context map[string]any "json:\"context\" graphql:\"context\""
}

func (t *PipelineContextFragment) GetID() string {
	if t == nil {
		t = &PipelineContextFragment{}
	}
	return t.ID
}
func (t *PipelineContextFragment) GetContext() map[string]any {
	if t == nil {
		t = &PipelineContextFragment{}
	}
	return t.Context
}

type PullRequestFragment struct {
	ID      string    "json:\"id\" graphql:\"id\""
	Status  *PrStatus "json:\"status,omitempty\" graphql:\"status\""
	URL     string    "json:\"url\" graphql:\"url\""
	Title   *string   "json:\"title,omitempty\" graphql:\"title\""
	Creator *string   "json:\"creator,omitempty\" graphql:\"creator\""
}

func (t *PullRequestFragment) GetID() string {
	if t == nil {
		t = &PullRequestFragment{}
	}
	return t.ID
}
func (t *PullRequestFragment) GetStatus() *PrStatus {
	if t == nil {
		t = &PullRequestFragment{}
	}
	return t.Status
}
func (t *PullRequestFragment) GetURL() string {
	if t == nil {
		t = &PullRequestFragment{}
	}
	return t.URL
}
func (t *PullRequestFragment) GetTitle() *string {
	if t == nil {
		t = &PullRequestFragment{}
	}
	return t.Title
}
func (t *PullRequestFragment) GetCreator() *string {
	if t == nil {
		t = &PullRequestFragment{}
	}
	return t.Creator
}

type SyncConfigFragment struct {
	CreateNamespace   *bool                      "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	NamespaceMetadata *NamespaceMetadataFragment "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
}

func (t *SyncConfigFragment) GetCreateNamespace() *bool {
	if t == nil {
		t = &SyncConfigFragment{}
	}
	return t.CreateNamespace
}
func (t *SyncConfigFragment) GetNamespaceMetadata() *NamespaceMetadataFragment {
	if t == nil {
		t = &SyncConfigFragment{}
	}
	return t.NamespaceMetadata
}

type NamespaceMetadataFragment struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *NamespaceMetadataFragment) GetLabels() map[string]any {
	if t == nil {
		t = &NamespaceMetadataFragment{}
	}
	return t.Labels
}
func (t *NamespaceMetadataFragment) GetAnnotations() map[string]any {
	if t == nil {
		t = &NamespaceMetadataFragment{}
	}
	return t.Annotations
}

type ClusterTargetFragment struct {
	Tags   map[string]any "json:\"tags,omitempty\" graphql:\"tags\""
	Distro *ClusterDistro "json:\"distro,omitempty\" graphql:\"distro\""
}

func (t *ClusterTargetFragment) GetTags() map[string]any {
	if t == nil {
		t = &ClusterTargetFragment{}
	}
	return t.Tags
}
func (t *ClusterTargetFragment) GetDistro() *ClusterDistro {
	if t == nil {
		t = &ClusterTargetFragment{}
	}
	return t.Distro
}

type AISettingsFragment struct {
	Enabled   *bool                         "json:\"enabled,omitempty\" graphql:\"enabled\""
	Provider  *AiProvider                   "json:\"provider,omitempty\" graphql:\"provider\""
	Openai    *AISettingsFragment_Openai    "json:\"openai,omitempty\" graphql:\"openai\""
	Anthropic *AISettingsFragment_Anthropic "json:\"anthropic,omitempty\" graphql:\"anthropic\""
}

func (t *AISettingsFragment) GetEnabled() *bool {
	if t == nil {
		t = &AISettingsFragment{}
	}
	return t.Enabled
}
func (t *AISettingsFragment) GetProvider() *AiProvider {
	if t == nil {
		t = &AISettingsFragment{}
	}
	return t.Provider
}
func (t *AISettingsFragment) GetOpenai() *AISettingsFragment_Openai {
	if t == nil {
		t = &AISettingsFragment{}
	}
	return t.Openai
}
func (t *AISettingsFragment) GetAnthropic() *AISettingsFragment_Anthropic {
	if t == nil {
		t = &AISettingsFragment{}
	}
	return t.Anthropic
}

type ManagedNamespaceEdgeFragment struct {
	Cursor *string                          "json:\"cursor,omitempty\" graphql:\"cursor\""
	Node   *ManagedNamespaceMinimalFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ManagedNamespaceEdgeFragment) GetCursor() *string {
	if t == nil {
		t = &ManagedNamespaceEdgeFragment{}
	}
	return t.Cursor
}
func (t *ManagedNamespaceEdgeFragment) GetNode() *ManagedNamespaceMinimalFragment {
	if t == nil {
		t = &ManagedNamespaceEdgeFragment{}
	}
	return t.Node
}

type ManagedNamespaceMinimalFragment struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *ManagedNamespaceMinimalFragment) GetID() string {
	if t == nil {
		t = &ManagedNamespaceMinimalFragment{}
	}
	return t.ID
}
func (t *ManagedNamespaceMinimalFragment) GetName() string {
	if t == nil {
		t = &ManagedNamespaceMinimalFragment{}
	}
	return t.Name
}
func (t *ManagedNamespaceMinimalFragment) GetDescription() *string {
	if t == nil {
		t = &ManagedNamespaceMinimalFragment{}
	}
	return t.Description
}

type ManagedNamespaceFragment struct {
	ID          string                   "json:\"id\" graphql:\"id\""
	Name        string                   "json:\"name\" graphql:\"name\""
	Description *string                  "json:\"description,omitempty\" graphql:\"description\""
	Labels      map[string]any           "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any           "json:\"annotations,omitempty\" graphql:\"annotations\""
	PullSecrets []*string                "json:\"pullSecrets,omitempty\" graphql:\"pullSecrets\""
	Service     *ServiceTemplateFragment "json:\"service,omitempty\" graphql:\"service\""
	Target      *ClusterTargetFragment   "json:\"target,omitempty\" graphql:\"target\""
	DeletedAt   *string                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
}

func (t *ManagedNamespaceFragment) GetID() string {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.ID
}
func (t *ManagedNamespaceFragment) GetName() string {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.Name
}
func (t *ManagedNamespaceFragment) GetDescription() *string {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.Description
}
func (t *ManagedNamespaceFragment) GetLabels() map[string]any {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.Labels
}
func (t *ManagedNamespaceFragment) GetAnnotations() map[string]any {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.Annotations
}
func (t *ManagedNamespaceFragment) GetPullSecrets() []*string {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.PullSecrets
}
func (t *ManagedNamespaceFragment) GetService() *ServiceTemplateFragment {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.Service
}
func (t *ManagedNamespaceFragment) GetTarget() *ClusterTargetFragment {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.Target
}
func (t *ManagedNamespaceFragment) GetDeletedAt() *string {
	if t == nil {
		t = &ManagedNamespaceFragment{}
	}
	return t.DeletedAt
}

type ServiceTemplateFragment struct {
	Name         *string             "json:\"name,omitempty\" graphql:\"name\""
	Namespace    *string             "json:\"namespace,omitempty\" graphql:\"namespace\""
	Templated    *bool               "json:\"templated,omitempty\" graphql:\"templated\""
	RepositoryID *string             "json:\"repositoryId,omitempty\" graphql:\"repositoryId\""
	Contexts     []*string           "json:\"contexts,omitempty\" graphql:\"contexts\""
	Git          *GitRefFragment     "json:\"git,omitempty\" graphql:\"git\""
	Helm         *HelmSpecFragment   "json:\"helm,omitempty\" graphql:\"helm\""
	Kustomize    *KustomizeFragment  "json:\"kustomize,omitempty\" graphql:\"kustomize\""
	SyncConfig   *SyncConfigFragment "json:\"syncConfig,omitempty\" graphql:\"syncConfig\""
}

func (t *ServiceTemplateFragment) GetName() *string {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Name
}
func (t *ServiceTemplateFragment) GetNamespace() *string {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Namespace
}
func (t *ServiceTemplateFragment) GetTemplated() *bool {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Templated
}
func (t *ServiceTemplateFragment) GetRepositoryID() *string {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.RepositoryID
}
func (t *ServiceTemplateFragment) GetContexts() []*string {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Contexts
}
func (t *ServiceTemplateFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Git
}
func (t *ServiceTemplateFragment) GetHelm() *HelmSpecFragment {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Helm
}
func (t *ServiceTemplateFragment) GetKustomize() *KustomizeFragment {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.Kustomize
}
func (t *ServiceTemplateFragment) GetSyncConfig() *SyncConfigFragment {
	if t == nil {
		t = &ServiceTemplateFragment{}
	}
	return t.SyncConfig
}

type NotificationRouterFragment struct {
	ID     string                      "json:\"id\" graphql:\"id\""
	Name   string                      "json:\"name\" graphql:\"name\""
	Sinks  []*NotificationSinkFragment "json:\"sinks,omitempty\" graphql:\"sinks\""
	Events []string                    "json:\"events,omitempty\" graphql:\"events\""
}

func (t *NotificationRouterFragment) GetID() string {
	if t == nil {
		t = &NotificationRouterFragment{}
	}
	return t.ID
}
func (t *NotificationRouterFragment) GetName() string {
	if t == nil {
		t = &NotificationRouterFragment{}
	}
	return t.Name
}
func (t *NotificationRouterFragment) GetSinks() []*NotificationSinkFragment {
	if t == nil {
		t = &NotificationRouterFragment{}
	}
	return t.Sinks
}
func (t *NotificationRouterFragment) GetEvents() []string {
	if t == nil {
		t = &NotificationRouterFragment{}
	}
	return t.Events
}

type NotificationSinkEdgeFragment struct {
	Cursor *string                   "json:\"cursor,omitempty\" graphql:\"cursor\""
	Node   *NotificationSinkFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *NotificationSinkEdgeFragment) GetCursor() *string {
	if t == nil {
		t = &NotificationSinkEdgeFragment{}
	}
	return t.Cursor
}
func (t *NotificationSinkEdgeFragment) GetNode() *NotificationSinkFragment {
	if t == nil {
		t = &NotificationSinkEdgeFragment{}
	}
	return t.Node
}

type NotificationSinkFragment struct {
	ID                   string                    "json:\"id\" graphql:\"id\""
	Name                 string                    "json:\"name\" graphql:\"name\""
	Type                 SinkType                  "json:\"type\" graphql:\"type\""
	Configuration        SinkConfigurationFragment "json:\"configuration\" graphql:\"configuration\""
	NotificationBindings []*PolicyBindingFragment  "json:\"notificationBindings,omitempty\" graphql:\"notificationBindings\""
}

func (t *NotificationSinkFragment) GetID() string {
	if t == nil {
		t = &NotificationSinkFragment{}
	}
	return t.ID
}
func (t *NotificationSinkFragment) GetName() string {
	if t == nil {
		t = &NotificationSinkFragment{}
	}
	return t.Name
}
func (t *NotificationSinkFragment) GetType() *SinkType {
	if t == nil {
		t = &NotificationSinkFragment{}
	}
	return &t.Type
}
func (t *NotificationSinkFragment) GetConfiguration() *SinkConfigurationFragment {
	if t == nil {
		t = &NotificationSinkFragment{}
	}
	return &t.Configuration
}
func (t *NotificationSinkFragment) GetNotificationBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &NotificationSinkFragment{}
	}
	return t.NotificationBindings
}

type SinkConfigurationFragment struct {
	ID    string                        "json:\"id\" graphql:\"id\""
	Slack *URLSinkConfigurationFragment "json:\"slack,omitempty\" graphql:\"slack\""
	Teams *URLSinkConfigurationFragment "json:\"teams,omitempty\" graphql:\"teams\""
}

func (t *SinkConfigurationFragment) GetID() string {
	if t == nil {
		t = &SinkConfigurationFragment{}
	}
	return t.ID
}
func (t *SinkConfigurationFragment) GetSlack() *URLSinkConfigurationFragment {
	if t == nil {
		t = &SinkConfigurationFragment{}
	}
	return t.Slack
}
func (t *SinkConfigurationFragment) GetTeams() *URLSinkConfigurationFragment {
	if t == nil {
		t = &SinkConfigurationFragment{}
	}
	return t.Teams
}

type URLSinkConfigurationFragment struct {
	URL string "json:\"url\" graphql:\"url\""
}

func (t *URLSinkConfigurationFragment) GetURL() string {
	if t == nil {
		t = &URLSinkConfigurationFragment{}
	}
	return t.URL
}

type OIDCProviderFragment struct {
	ID            string                   "json:\"id\" graphql:\"id\""
	Name          string                   "json:\"name\" graphql:\"name\""
	Description   *string                  "json:\"description,omitempty\" graphql:\"description\""
	ClientID      string                   "json:\"clientId\" graphql:\"clientId\""
	ClientSecret  string                   "json:\"clientSecret\" graphql:\"clientSecret\""
	AuthMethod    *OidcAuthMethod          "json:\"authMethod,omitempty\" graphql:\"authMethod\""
	RedirectUris  []*string                "json:\"redirectUris,omitempty\" graphql:\"redirectUris\""
	Bindings      []*PolicyBindingFragment "json:\"bindings,omitempty\" graphql:\"bindings\""
	WriteBindings []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
}

func (t *OIDCProviderFragment) GetID() string {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.ID
}
func (t *OIDCProviderFragment) GetName() string {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.Name
}
func (t *OIDCProviderFragment) GetDescription() *string {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.Description
}
func (t *OIDCProviderFragment) GetClientID() string {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.ClientID
}
func (t *OIDCProviderFragment) GetClientSecret() string {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.ClientSecret
}
func (t *OIDCProviderFragment) GetAuthMethod() *OidcAuthMethod {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.AuthMethod
}
func (t *OIDCProviderFragment) GetRedirectUris() []*string {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.RedirectUris
}
func (t *OIDCProviderFragment) GetBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.Bindings
}
func (t *OIDCProviderFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &OIDCProviderFragment{}
	}
	return t.WriteBindings
}

type ObservabilityProviderFragment struct {
	ID         string                    "json:\"id\" graphql:\"id\""
	Name       string                    "json:\"name\" graphql:\"name\""
	Type       ObservabilityProviderType "json:\"type\" graphql:\"type\""
	UpdatedAt  *string                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	InsertedAt *string                   "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
}

func (t *ObservabilityProviderFragment) GetID() string {
	if t == nil {
		t = &ObservabilityProviderFragment{}
	}
	return t.ID
}
func (t *ObservabilityProviderFragment) GetName() string {
	if t == nil {
		t = &ObservabilityProviderFragment{}
	}
	return t.Name
}
func (t *ObservabilityProviderFragment) GetType() *ObservabilityProviderType {
	if t == nil {
		t = &ObservabilityProviderFragment{}
	}
	return &t.Type
}
func (t *ObservabilityProviderFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ObservabilityProviderFragment{}
	}
	return t.UpdatedAt
}
func (t *ObservabilityProviderFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ObservabilityProviderFragment{}
	}
	return t.InsertedAt
}

type ObserverFragment struct {
	ID         string                    "json:\"id\" graphql:\"id\""
	Name       string                    "json:\"name\" graphql:\"name\""
	Status     ObserverStatus            "json:\"status\" graphql:\"status\""
	Crontab    string                    "json:\"crontab\" graphql:\"crontab\""
	Target     ObserverTargetFragment    "json:\"target\" graphql:\"target\""
	Actions    []*ObserverActionFragment "json:\"actions,omitempty\" graphql:\"actions\""
	Project    *ProjectFragment          "json:\"project,omitempty\" graphql:\"project\""
	Errors     []*ErrorFragment          "json:\"errors,omitempty\" graphql:\"errors\""
	InsertedAt *string                   "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *ObserverFragment) GetID() string {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.ID
}
func (t *ObserverFragment) GetName() string {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.Name
}
func (t *ObserverFragment) GetStatus() *ObserverStatus {
	if t == nil {
		t = &ObserverFragment{}
	}
	return &t.Status
}
func (t *ObserverFragment) GetCrontab() string {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.Crontab
}
func (t *ObserverFragment) GetTarget() *ObserverTargetFragment {
	if t == nil {
		t = &ObserverFragment{}
	}
	return &t.Target
}
func (t *ObserverFragment) GetActions() []*ObserverActionFragment {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.Actions
}
func (t *ObserverFragment) GetProject() *ProjectFragment {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.Project
}
func (t *ObserverFragment) GetErrors() []*ErrorFragment {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.Errors
}
func (t *ObserverFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.InsertedAt
}
func (t *ObserverFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ObserverFragment{}
	}
	return t.UpdatedAt
}

type ObserverActionFragment struct {
	Type          ObserverActionType                  "json:\"type\" graphql:\"type\""
	Configuration ObserverActionConfigurationFragment "json:\"configuration\" graphql:\"configuration\""
}

func (t *ObserverActionFragment) GetType() *ObserverActionType {
	if t == nil {
		t = &ObserverActionFragment{}
	}
	return &t.Type
}
func (t *ObserverActionFragment) GetConfiguration() *ObserverActionConfigurationFragment {
	if t == nil {
		t = &ObserverActionFragment{}
	}
	return &t.Configuration
}

type ObserverActionConfigurationFragment struct {
	Pr       *ObserverPrActionFragment       "json:\"pr,omitempty\" graphql:\"pr\""
	Pipeline *ObserverPipelineActionFragment "json:\"pipeline,omitempty\" graphql:\"pipeline\""
}

func (t *ObserverActionConfigurationFragment) GetPr() *ObserverPrActionFragment {
	if t == nil {
		t = &ObserverActionConfigurationFragment{}
	}
	return t.Pr
}
func (t *ObserverActionConfigurationFragment) GetPipeline() *ObserverPipelineActionFragment {
	if t == nil {
		t = &ObserverActionConfigurationFragment{}
	}
	return t.Pipeline
}

type ObserverPipelineActionFragment struct {
	PipelineID string         "json:\"pipelineId\" graphql:\"pipelineId\""
	Context    map[string]any "json:\"context\" graphql:\"context\""
}

func (t *ObserverPipelineActionFragment) GetPipelineID() string {
	if t == nil {
		t = &ObserverPipelineActionFragment{}
	}
	return t.PipelineID
}
func (t *ObserverPipelineActionFragment) GetContext() map[string]any {
	if t == nil {
		t = &ObserverPipelineActionFragment{}
	}
	return t.Context
}

type ObserverPrActionFragment struct {
	AutomationID   string         "json:\"automationId\" graphql:\"automationId\""
	Repository     *string        "json:\"repository,omitempty\" graphql:\"repository\""
	BranchTemplate *string        "json:\"branchTemplate,omitempty\" graphql:\"branchTemplate\""
	Context        map[string]any "json:\"context\" graphql:\"context\""
}

func (t *ObserverPrActionFragment) GetAutomationID() string {
	if t == nil {
		t = &ObserverPrActionFragment{}
	}
	return t.AutomationID
}
func (t *ObserverPrActionFragment) GetRepository() *string {
	if t == nil {
		t = &ObserverPrActionFragment{}
	}
	return t.Repository
}
func (t *ObserverPrActionFragment) GetBranchTemplate() *string {
	if t == nil {
		t = &ObserverPrActionFragment{}
	}
	return t.BranchTemplate
}
func (t *ObserverPrActionFragment) GetContext() map[string]any {
	if t == nil {
		t = &ObserverPrActionFragment{}
	}
	return t.Context
}

type ObserverTargetFragment struct {
	Helm *ObserverHelmRepoFragment "json:\"helm,omitempty\" graphql:\"helm\""
	Oci  *ObserverOciRepoFragment  "json:\"oci,omitempty\" graphql:\"oci\""
}

func (t *ObserverTargetFragment) GetHelm() *ObserverHelmRepoFragment {
	if t == nil {
		t = &ObserverTargetFragment{}
	}
	return t.Helm
}
func (t *ObserverTargetFragment) GetOci() *ObserverOciRepoFragment {
	if t == nil {
		t = &ObserverTargetFragment{}
	}
	return t.Oci
}

type ObserverOciRepoFragment struct {
	URL      string            "json:\"url\" graphql:\"url\""
	Provider *HelmAuthProvider "json:\"provider,omitempty\" graphql:\"provider\""
}

func (t *ObserverOciRepoFragment) GetURL() string {
	if t == nil {
		t = &ObserverOciRepoFragment{}
	}
	return t.URL
}
func (t *ObserverOciRepoFragment) GetProvider() *HelmAuthProvider {
	if t == nil {
		t = &ObserverOciRepoFragment{}
	}
	return t.Provider
}

type ObserverHelmRepoFragment struct {
	URL      string            "json:\"url\" graphql:\"url\""
	Chart    string            "json:\"chart\" graphql:\"chart\""
	Provider *HelmAuthProvider "json:\"provider,omitempty\" graphql:\"provider\""
}

func (t *ObserverHelmRepoFragment) GetURL() string {
	if t == nil {
		t = &ObserverHelmRepoFragment{}
	}
	return t.URL
}
func (t *ObserverHelmRepoFragment) GetChart() string {
	if t == nil {
		t = &ObserverHelmRepoFragment{}
	}
	return t.Chart
}
func (t *ObserverHelmRepoFragment) GetProvider() *HelmAuthProvider {
	if t == nil {
		t = &ObserverHelmRepoFragment{}
	}
	return t.Provider
}

type PolicyConstraintConnectionFragment struct {
	PageInfo PageInfoFragment                "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*PolicyConstraintEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PolicyConstraintConnectionFragment) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &PolicyConstraintConnectionFragment{}
	}
	return &t.PageInfo
}
func (t *PolicyConstraintConnectionFragment) GetEdges() []*PolicyConstraintEdgeFragment {
	if t == nil {
		t = &PolicyConstraintConnectionFragment{}
	}
	return t.Edges
}

type PolicyConstraintEdgeFragment struct {
	Cursor *string                   "json:\"cursor,omitempty\" graphql:\"cursor\""
	Node   *PolicyConstraintFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *PolicyConstraintEdgeFragment) GetCursor() *string {
	if t == nil {
		t = &PolicyConstraintEdgeFragment{}
	}
	return t.Cursor
}
func (t *PolicyConstraintEdgeFragment) GetNode() *PolicyConstraintFragment {
	if t == nil {
		t = &PolicyConstraintEdgeFragment{}
	}
	return t.Node
}

type PolicyConstraintFragment struct {
	ID             string                 "json:\"id\" graphql:\"id\""
	Name           string                 "json:\"name\" graphql:\"name\""
	Description    *string                "json:\"description,omitempty\" graphql:\"description\""
	Recommendation *string                "json:\"recommendation,omitempty\" graphql:\"recommendation\""
	ViolationCount *int64                 "json:\"violationCount,omitempty\" graphql:\"violationCount\""
	Ref            *ConstraintRefFragment "json:\"ref,omitempty\" graphql:\"ref\""
	Violations     []*ViolationFragment   "json:\"violations,omitempty\" graphql:\"violations\""
}

func (t *PolicyConstraintFragment) GetID() string {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.ID
}
func (t *PolicyConstraintFragment) GetName() string {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.Name
}
func (t *PolicyConstraintFragment) GetDescription() *string {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.Description
}
func (t *PolicyConstraintFragment) GetRecommendation() *string {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.Recommendation
}
func (t *PolicyConstraintFragment) GetViolationCount() *int64 {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.ViolationCount
}
func (t *PolicyConstraintFragment) GetRef() *ConstraintRefFragment {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.Ref
}
func (t *PolicyConstraintFragment) GetViolations() []*ViolationFragment {
	if t == nil {
		t = &PolicyConstraintFragment{}
	}
	return t.Violations
}

type ConstraintRefFragment struct {
	Kind string "json:\"kind\" graphql:\"kind\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ConstraintRefFragment) GetKind() string {
	if t == nil {
		t = &ConstraintRefFragment{}
	}
	return t.Kind
}
func (t *ConstraintRefFragment) GetName() string {
	if t == nil {
		t = &ConstraintRefFragment{}
	}
	return t.Name
}

type ViolationFragment struct {
	ID        string  "json:\"id\" graphql:\"id\""
	Group     *string "json:\"group,omitempty\" graphql:\"group\""
	Version   *string "json:\"version,omitempty\" graphql:\"version\""
	Kind      *string "json:\"kind,omitempty\" graphql:\"kind\""
	Namespace *string "json:\"namespace,omitempty\" graphql:\"namespace\""
	Name      *string "json:\"name,omitempty\" graphql:\"name\""
	Message   *string "json:\"message,omitempty\" graphql:\"message\""
}

func (t *ViolationFragment) GetID() string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.ID
}
func (t *ViolationFragment) GetGroup() *string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.Group
}
func (t *ViolationFragment) GetVersion() *string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.Version
}
func (t *ViolationFragment) GetKind() *string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.Kind
}
func (t *ViolationFragment) GetNamespace() *string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.Namespace
}
func (t *ViolationFragment) GetName() *string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.Name
}
func (t *ViolationFragment) GetMessage() *string {
	if t == nil {
		t = &ViolationFragment{}
	}
	return t.Message
}

type ViolationStatisticFragment struct {
	Value      *string "json:\"value,omitempty\" graphql:\"value\""
	Violations *int64  "json:\"violations,omitempty\" graphql:\"violations\""
	Count      *int64  "json:\"count,omitempty\" graphql:\"count\""
}

func (t *ViolationStatisticFragment) GetValue() *string {
	if t == nil {
		t = &ViolationStatisticFragment{}
	}
	return t.Value
}
func (t *ViolationStatisticFragment) GetViolations() *int64 {
	if t == nil {
		t = &ViolationStatisticFragment{}
	}
	return t.Violations
}
func (t *ViolationStatisticFragment) GetCount() *int64 {
	if t == nil {
		t = &ViolationStatisticFragment{}
	}
	return t.Count
}

type PersonaFragment struct {
	ID            string                        "json:\"id\" graphql:\"id\""
	Name          string                        "json:\"name\" graphql:\"name\""
	Description   *string                       "json:\"description,omitempty\" graphql:\"description\""
	Configuration *PersonaConfigurationFragment "json:\"configuration,omitempty\" graphql:\"configuration\""
	Bindings      []*PolicyBindingFragment      "json:\"bindings,omitempty\" graphql:\"bindings\""
}

func (t *PersonaFragment) GetID() string {
	if t == nil {
		t = &PersonaFragment{}
	}
	return t.ID
}
func (t *PersonaFragment) GetName() string {
	if t == nil {
		t = &PersonaFragment{}
	}
	return t.Name
}
func (t *PersonaFragment) GetDescription() *string {
	if t == nil {
		t = &PersonaFragment{}
	}
	return t.Description
}
func (t *PersonaFragment) GetConfiguration() *PersonaConfigurationFragment {
	if t == nil {
		t = &PersonaFragment{}
	}
	return t.Configuration
}
func (t *PersonaFragment) GetBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &PersonaFragment{}
	}
	return t.Bindings
}

type PersonaConfigurationFragment struct {
	All         *bool                                     "json:\"all,omitempty\" graphql:\"all\""
	Deployments *PersonaConfigurationFragment_Deployments "json:\"deployments,omitempty\" graphql:\"deployments\""
	Home        *PersonaConfigurationFragment_Home        "json:\"home,omitempty\" graphql:\"home\""
	Sidebar     *PersonaConfigurationFragment_Sidebar     "json:\"sidebar,omitempty\" graphql:\"sidebar\""
}

func (t *PersonaConfigurationFragment) GetAll() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment{}
	}
	return t.All
}
func (t *PersonaConfigurationFragment) GetDeployments() *PersonaConfigurationFragment_Deployments {
	if t == nil {
		t = &PersonaConfigurationFragment{}
	}
	return t.Deployments
}
func (t *PersonaConfigurationFragment) GetHome() *PersonaConfigurationFragment_Home {
	if t == nil {
		t = &PersonaConfigurationFragment{}
	}
	return t.Home
}
func (t *PersonaConfigurationFragment) GetSidebar() *PersonaConfigurationFragment_Sidebar {
	if t == nil {
		t = &PersonaConfigurationFragment{}
	}
	return t.Sidebar
}

type PipelineFragment struct {
	ID      string                       "json:\"id\" graphql:\"id\""
	Name    string                       "json:\"name\" graphql:\"name\""
	Stages  []*PipelineStageFragment     "json:\"stages,omitempty\" graphql:\"stages\""
	Edges   []*PipelineStageEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
	Project *TinyProjectFragment         "json:\"project,omitempty\" graphql:\"project\""
}

func (t *PipelineFragment) GetID() string {
	if t == nil {
		t = &PipelineFragment{}
	}
	return t.ID
}
func (t *PipelineFragment) GetName() string {
	if t == nil {
		t = &PipelineFragment{}
	}
	return t.Name
}
func (t *PipelineFragment) GetStages() []*PipelineStageFragment {
	if t == nil {
		t = &PipelineFragment{}
	}
	return t.Stages
}
func (t *PipelineFragment) GetEdges() []*PipelineStageEdgeFragment {
	if t == nil {
		t = &PipelineFragment{}
	}
	return t.Edges
}
func (t *PipelineFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &PipelineFragment{}
	}
	return t.Project
}

type PipelineFragmentMinimal struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *PipelineFragmentMinimal) GetID() string {
	if t == nil {
		t = &PipelineFragmentMinimal{}
	}
	return t.ID
}
func (t *PipelineFragmentMinimal) GetName() string {
	if t == nil {
		t = &PipelineFragmentMinimal{}
	}
	return t.Name
}

type PipelineFragmentID struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PipelineFragmentID) GetID() string {
	if t == nil {
		t = &PipelineFragmentID{}
	}
	return t.ID
}

type PipelineStageFragment struct {
	ID       string                            "json:\"id\" graphql:\"id\""
	Name     string                            "json:\"name\" graphql:\"name\""
	Services []*PipelineStageFragment_Services "json:\"services,omitempty\" graphql:\"services\""
}

func (t *PipelineStageFragment) GetID() string {
	if t == nil {
		t = &PipelineStageFragment{}
	}
	return t.ID
}
func (t *PipelineStageFragment) GetName() string {
	if t == nil {
		t = &PipelineStageFragment{}
	}
	return t.Name
}
func (t *PipelineStageFragment) GetServices() []*PipelineStageFragment_Services {
	if t == nil {
		t = &PipelineStageFragment{}
	}
	return t.Services
}

type PipelineStageEdgeFragment struct {
	ID   string                "json:\"id\" graphql:\"id\""
	From PipelineStageFragment "json:\"from\" graphql:\"from\""
	To   PipelineStageFragment "json:\"to\" graphql:\"to\""
}

func (t *PipelineStageEdgeFragment) GetID() string {
	if t == nil {
		t = &PipelineStageEdgeFragment{}
	}
	return t.ID
}
func (t *PipelineStageEdgeFragment) GetFrom() *PipelineStageFragment {
	if t == nil {
		t = &PipelineStageEdgeFragment{}
	}
	return &t.From
}
func (t *PipelineStageEdgeFragment) GetTo() *PipelineStageFragment {
	if t == nil {
		t = &PipelineStageEdgeFragment{}
	}
	return &t.To
}

type PipelineEdgeFragment struct {
	Node *PipelineFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *PipelineEdgeFragment) GetNode() *PipelineFragment {
	if t == nil {
		t = &PipelineEdgeFragment{}
	}
	return t.Node
}

type ComplianceReportGeneratorFragment struct {
	ID           string                   "json:\"id\" graphql:\"id\""
	Name         string                   "json:\"name\" graphql:\"name\""
	Format       ComplianceReportFormat   "json:\"format\" graphql:\"format\""
	ReadBindings []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
}

func (t *ComplianceReportGeneratorFragment) GetID() string {
	if t == nil {
		t = &ComplianceReportGeneratorFragment{}
	}
	return t.ID
}
func (t *ComplianceReportGeneratorFragment) GetName() string {
	if t == nil {
		t = &ComplianceReportGeneratorFragment{}
	}
	return t.Name
}
func (t *ComplianceReportGeneratorFragment) GetFormat() *ComplianceReportFormat {
	if t == nil {
		t = &ComplianceReportGeneratorFragment{}
	}
	return &t.Format
}
func (t *ComplianceReportGeneratorFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &ComplianceReportGeneratorFragment{}
	}
	return t.ReadBindings
}

type PreviewEnvironmentTemplateFragment struct {
	ID              string                                         "json:\"id\" graphql:\"id\""
	Name            string                                         "json:\"name\" graphql:\"name\""
	CommentTemplate *string                                        "json:\"commentTemplate,omitempty\" graphql:\"commentTemplate\""
	Flow            *PreviewEnvironmentTemplateFragment_Flow       "json:\"flow,omitempty\" graphql:\"flow\""
	Connection      *PreviewEnvironmentTemplateFragment_Connection "json:\"connection,omitempty\" graphql:\"connection\""
	Template        *PreviewEnvironmentTemplateFragment_Template   "json:\"template,omitempty\" graphql:\"template\""
}

func (t *PreviewEnvironmentTemplateFragment) GetID() string {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment{}
	}
	return t.ID
}
func (t *PreviewEnvironmentTemplateFragment) GetName() string {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment{}
	}
	return t.Name
}
func (t *PreviewEnvironmentTemplateFragment) GetCommentTemplate() *string {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment{}
	}
	return t.CommentTemplate
}
func (t *PreviewEnvironmentTemplateFragment) GetFlow() *PreviewEnvironmentTemplateFragment_Flow {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment{}
	}
	return t.Flow
}
func (t *PreviewEnvironmentTemplateFragment) GetConnection() *PreviewEnvironmentTemplateFragment_Connection {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment{}
	}
	return t.Connection
}
func (t *PreviewEnvironmentTemplateFragment) GetTemplate() *PreviewEnvironmentTemplateFragment_Template {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment{}
	}
	return t.Template
}

type ProjectFragment struct {
	ID            string                   "json:\"id\" graphql:\"id\""
	InsertedAt    *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt     *string                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Name          string                   "json:\"name\" graphql:\"name\""
	Default       *bool                    "json:\"default,omitempty\" graphql:\"default\""
	Description   *string                  "json:\"description,omitempty\" graphql:\"description\""
	ReadBindings  []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	WriteBindings []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
}

func (t *ProjectFragment) GetID() string {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.ID
}
func (t *ProjectFragment) GetInsertedAt() *string {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.InsertedAt
}
func (t *ProjectFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.UpdatedAt
}
func (t *ProjectFragment) GetName() string {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.Name
}
func (t *ProjectFragment) GetDefault() *bool {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.Default
}
func (t *ProjectFragment) GetDescription() *string {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.Description
}
func (t *ProjectFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.ReadBindings
}
func (t *ProjectFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &ProjectFragment{}
	}
	return t.WriteBindings
}

type TinyProjectFragment struct {
	ID      string "json:\"id\" graphql:\"id\""
	Name    string "json:\"name\" graphql:\"name\""
	Default *bool  "json:\"default,omitempty\" graphql:\"default\""
}

func (t *TinyProjectFragment) GetID() string {
	if t == nil {
		t = &TinyProjectFragment{}
	}
	return t.ID
}
func (t *TinyProjectFragment) GetName() string {
	if t == nil {
		t = &TinyProjectFragment{}
	}
	return t.Name
}
func (t *TinyProjectFragment) GetDefault() *bool {
	if t == nil {
		t = &TinyProjectFragment{}
	}
	return t.Default
}

type ProviderCredentialFragment struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	Namespace string "json:\"namespace\" graphql:\"namespace\""
	Kind      string "json:\"kind\" graphql:\"kind\""
}

func (t *ProviderCredentialFragment) GetID() string {
	if t == nil {
		t = &ProviderCredentialFragment{}
	}
	return t.ID
}
func (t *ProviderCredentialFragment) GetName() string {
	if t == nil {
		t = &ProviderCredentialFragment{}
	}
	return t.Name
}
func (t *ProviderCredentialFragment) GetNamespace() string {
	if t == nil {
		t = &ProviderCredentialFragment{}
	}
	return t.Namespace
}
func (t *ProviderCredentialFragment) GetKind() string {
	if t == nil {
		t = &ProviderCredentialFragment{}
	}
	return t.Kind
}

type SentinelFragment struct {
	ID          string                   "json:\"id\" graphql:\"id\""
	Name        string                   "json:\"name\" graphql:\"name\""
	Description *string                  "json:\"description,omitempty\" graphql:\"description\""
	Git         *GitRefFragment          "json:\"git,omitempty\" graphql:\"git\""
	Repository  *GitRepositoryFragment   "json:\"repository,omitempty\" graphql:\"repository\""
	Project     *TinyProjectFragment     "json:\"project,omitempty\" graphql:\"project\""
	Checks      []*SentinelCheckFragment "json:\"checks,omitempty\" graphql:\"checks\""
}

func (t *SentinelFragment) GetID() string {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.ID
}
func (t *SentinelFragment) GetName() string {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.Name
}
func (t *SentinelFragment) GetDescription() *string {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.Description
}
func (t *SentinelFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.Git
}
func (t *SentinelFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.Repository
}
func (t *SentinelFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.Project
}
func (t *SentinelFragment) GetChecks() []*SentinelCheckFragment {
	if t == nil {
		t = &SentinelFragment{}
	}
	return t.Checks
}

type SentinelCheckFragment struct {
	ID            string                              "json:\"id\" graphql:\"id\""
	Name          string                              "json:\"name\" graphql:\"name\""
	Type          SentinelCheckType                   "json:\"type\" graphql:\"type\""
	RuleFile      *string                             "json:\"ruleFile,omitempty\" graphql:\"ruleFile\""
	Configuration *SentinelCheckConfigurationFragment "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *SentinelCheckFragment) GetID() string {
	if t == nil {
		t = &SentinelCheckFragment{}
	}
	return t.ID
}
func (t *SentinelCheckFragment) GetName() string {
	if t == nil {
		t = &SentinelCheckFragment{}
	}
	return t.Name
}
func (t *SentinelCheckFragment) GetType() *SentinelCheckType {
	if t == nil {
		t = &SentinelCheckFragment{}
	}
	return &t.Type
}
func (t *SentinelCheckFragment) GetRuleFile() *string {
	if t == nil {
		t = &SentinelCheckFragment{}
	}
	return t.RuleFile
}
func (t *SentinelCheckFragment) GetConfiguration() *SentinelCheckConfigurationFragment {
	if t == nil {
		t = &SentinelCheckFragment{}
	}
	return t.Configuration
}

type SentinelCheckConfigurationFragment struct {
	Log        *SentinelCheckLogConfigurationFragment        "json:\"log,omitempty\" graphql:\"log\""
	Kubernetes *SentinelCheckKubernetesConfigurationFragment "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
}

func (t *SentinelCheckConfigurationFragment) GetLog() *SentinelCheckLogConfigurationFragment {
	if t == nil {
		t = &SentinelCheckConfigurationFragment{}
	}
	return t.Log
}
func (t *SentinelCheckConfigurationFragment) GetKubernetes() *SentinelCheckKubernetesConfigurationFragment {
	if t == nil {
		t = &SentinelCheckConfigurationFragment{}
	}
	return t.Kubernetes
}

type SentinelCheckLogConfigurationFragment struct {
	Namespaces []*string                                       "json:\"namespaces,omitempty\" graphql:\"namespaces\""
	Query      string                                          "json:\"query\" graphql:\"query\""
	ClusterID  *string                                         "json:\"clusterId,omitempty\" graphql:\"clusterId\""
	Facets     []*SentinelCheckLogConfigurationFragment_Facets "json:\"facets,omitempty\" graphql:\"facets\""
	Duration   string                                          "json:\"duration\" graphql:\"duration\""
}

func (t *SentinelCheckLogConfigurationFragment) GetNamespaces() []*string {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment{}
	}
	return t.Namespaces
}
func (t *SentinelCheckLogConfigurationFragment) GetQuery() string {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment{}
	}
	return t.Query
}
func (t *SentinelCheckLogConfigurationFragment) GetClusterID() *string {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment{}
	}
	return t.ClusterID
}
func (t *SentinelCheckLogConfigurationFragment) GetFacets() []*SentinelCheckLogConfigurationFragment_Facets {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment{}
	}
	return t.Facets
}
func (t *SentinelCheckLogConfigurationFragment) GetDuration() string {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment{}
	}
	return t.Duration
}

type SentinelCheckKubernetesConfigurationFragment struct {
	Group     *string "json:\"group,omitempty\" graphql:\"group\""
	Version   string  "json:\"version\" graphql:\"version\""
	Kind      string  "json:\"kind\" graphql:\"kind\""
	Name      string  "json:\"name\" graphql:\"name\""
	Namespace *string "json:\"namespace,omitempty\" graphql:\"namespace\""
}

func (t *SentinelCheckKubernetesConfigurationFragment) GetGroup() *string {
	if t == nil {
		t = &SentinelCheckKubernetesConfigurationFragment{}
	}
	return t.Group
}
func (t *SentinelCheckKubernetesConfigurationFragment) GetVersion() string {
	if t == nil {
		t = &SentinelCheckKubernetesConfigurationFragment{}
	}
	return t.Version
}
func (t *SentinelCheckKubernetesConfigurationFragment) GetKind() string {
	if t == nil {
		t = &SentinelCheckKubernetesConfigurationFragment{}
	}
	return t.Kind
}
func (t *SentinelCheckKubernetesConfigurationFragment) GetName() string {
	if t == nil {
		t = &SentinelCheckKubernetesConfigurationFragment{}
	}
	return t.Name
}
func (t *SentinelCheckKubernetesConfigurationFragment) GetNamespace() *string {
	if t == nil {
		t = &SentinelCheckKubernetesConfigurationFragment{}
	}
	return t.Namespace
}

type InfrastructureStackEdgeFragment struct {
	Node *InfrastructureStackFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *InfrastructureStackEdgeFragment) GetNode() *InfrastructureStackFragment {
	if t == nil {
		t = &InfrastructureStackEdgeFragment{}
	}
	return t.Node
}

type StackRunEdgeFragment struct {
	Node *StackRunFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *StackRunEdgeFragment) GetNode() *StackRunFragment {
	if t == nil {
		t = &StackRunEdgeFragment{}
	}
	return t.Node
}

type MinimalStackRunEdgeFragment struct {
	Node *StackRunMinimalFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *MinimalStackRunEdgeFragment) GetNode() *StackRunMinimalFragment {
	if t == nil {
		t = &MinimalStackRunEdgeFragment{}
	}
	return t.Node
}

type StackRunIDEdgeFragment struct {
	Node *StackRunIDFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *StackRunIDEdgeFragment) GetNode() *StackRunIDFragment {
	if t == nil {
		t = &StackRunIDEdgeFragment{}
	}
	return t.Node
}

type InfrastructureStackIDFragment struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *InfrastructureStackIDFragment) GetID() *string {
	if t == nil {
		t = &InfrastructureStackIDFragment{}
	}
	return t.ID
}

type InfrastructureStackStatusFragment struct {
	Status StackStatus "json:\"status\" graphql:\"status\""
}

func (t *InfrastructureStackStatusFragment) GetStatus() *StackStatus {
	if t == nil {
		t = &InfrastructureStackStatusFragment{}
	}
	return &t.Status
}

type PolicyEngineFragment struct {
	Type        PolicyEngineType "json:\"type\" graphql:\"type\""
	MaxSeverity *VulnSeverity    "json:\"maxSeverity,omitempty\" graphql:\"maxSeverity\""
}

func (t *PolicyEngineFragment) GetType() *PolicyEngineType {
	if t == nil {
		t = &PolicyEngineFragment{}
	}
	return &t.Type
}
func (t *PolicyEngineFragment) GetMaxSeverity() *VulnSeverity {
	if t == nil {
		t = &PolicyEngineFragment{}
	}
	return t.MaxSeverity
}

type InfrastructureStackFragment struct {
	ID            *string                     "json:\"id,omitempty\" graphql:\"id\""
	Name          string                      "json:\"name\" graphql:\"name\""
	Type          StackType                   "json:\"type\" graphql:\"type\""
	Variables     map[string]any              "json:\"variables,omitempty\" graphql:\"variables\""
	Approval      *bool                       "json:\"approval,omitempty\" graphql:\"approval\""
	Workdir       *string                     "json:\"workdir,omitempty\" graphql:\"workdir\""
	ManageState   *bool                       "json:\"manageState,omitempty\" graphql:\"manageState\""
	DeletedAt     *string                     "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Git           GitRefFragment              "json:\"git\" graphql:\"git\""
	JobSpec       *JobSpecFragment            "json:\"jobSpec,omitempty\" graphql:\"jobSpec\""
	Configuration StackConfigurationFragment  "json:\"configuration\" graphql:\"configuration\""
	Cluster       *TinyClusterFragment        "json:\"cluster,omitempty\" graphql:\"cluster\""
	Project       *TinyProjectFragment        "json:\"project,omitempty\" graphql:\"project\""
	Files         []*StackFileFragment        "json:\"files,omitempty\" graphql:\"files\""
	Environment   []*StackEnvironmentFragment "json:\"environment,omitempty\" graphql:\"environment\""
	Output        []*StackOutputFragment      "json:\"output,omitempty\" graphql:\"output\""
	State         *StackStateFragment         "json:\"state,omitempty\" graphql:\"state\""
	Repository    *GitRepositoryFragment      "json:\"repository,omitempty\" graphql:\"repository\""
	WriteBindings []*PolicyBindingFragment    "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	ReadBindings  []*PolicyBindingFragment    "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	PolicyEngine  *PolicyEngineFragment       "json:\"policyEngine,omitempty\" graphql:\"policyEngine\""
}

func (t *InfrastructureStackFragment) GetID() *string {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.ID
}
func (t *InfrastructureStackFragment) GetName() string {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Name
}
func (t *InfrastructureStackFragment) GetType() *StackType {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return &t.Type
}
func (t *InfrastructureStackFragment) GetVariables() map[string]any {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Variables
}
func (t *InfrastructureStackFragment) GetApproval() *bool {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Approval
}
func (t *InfrastructureStackFragment) GetWorkdir() *string {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Workdir
}
func (t *InfrastructureStackFragment) GetManageState() *bool {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.ManageState
}
func (t *InfrastructureStackFragment) GetDeletedAt() *string {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.DeletedAt
}
func (t *InfrastructureStackFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return &t.Git
}
func (t *InfrastructureStackFragment) GetJobSpec() *JobSpecFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.JobSpec
}
func (t *InfrastructureStackFragment) GetConfiguration() *StackConfigurationFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return &t.Configuration
}
func (t *InfrastructureStackFragment) GetCluster() *TinyClusterFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Cluster
}
func (t *InfrastructureStackFragment) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Project
}
func (t *InfrastructureStackFragment) GetFiles() []*StackFileFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Files
}
func (t *InfrastructureStackFragment) GetEnvironment() []*StackEnvironmentFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Environment
}
func (t *InfrastructureStackFragment) GetOutput() []*StackOutputFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Output
}
func (t *InfrastructureStackFragment) GetState() *StackStateFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.State
}
func (t *InfrastructureStackFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.Repository
}
func (t *InfrastructureStackFragment) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.WriteBindings
}
func (t *InfrastructureStackFragment) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.ReadBindings
}
func (t *InfrastructureStackFragment) GetPolicyEngine() *PolicyEngineFragment {
	if t == nil {
		t = &InfrastructureStackFragment{}
	}
	return t.PolicyEngine
}

type StackRunIDFragment struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *StackRunIDFragment) GetID() string {
	if t == nil {
		t = &StackRunIDFragment{}
	}
	return t.ID
}

type StackRunFragment struct {
	ID            string                                             "json:\"id\" graphql:\"id\""
	Type          StackType                                          "json:\"type\" graphql:\"type\""
	Status        StackStatus                                        "json:\"status\" graphql:\"status\""
	Approval      *bool                                              "json:\"approval,omitempty\" graphql:\"approval\""
	ApprovedAt    *string                                            "json:\"approvedAt,omitempty\" graphql:\"approvedAt\""
	Tarball       string                                             "json:\"tarball\" graphql:\"tarball\""
	Workdir       *string                                            "json:\"workdir,omitempty\" graphql:\"workdir\""
	ManageState   *bool                                              "json:\"manageState,omitempty\" graphql:\"manageState\""
	Variables     map[string]any                                     "json:\"variables,omitempty\" graphql:\"variables\""
	DryRun        bool                                               "json:\"dryRun\" graphql:\"dryRun\""
	StateUrls     *StackRunFragment_StackRunBaseFragment_StateUrls   "json:\"stateUrls,omitempty\" graphql:\"stateUrls\""
	PluralCreds   *StackRunFragment_StackRunBaseFragment_PluralCreds "json:\"pluralCreds,omitempty\" graphql:\"pluralCreds\""
	Actor         *UserFragment                                      "json:\"actor,omitempty\" graphql:\"actor\""
	Stack         *InfrastructureStackFragment                       "json:\"stack,omitempty\" graphql:\"stack\""
	State         *StackStateFragment                                "json:\"state,omitempty\" graphql:\"state\""
	Steps         []*RunStepFragment                                 "json:\"steps,omitempty\" graphql:\"steps\""
	Files         []*StackFileFragment                               "json:\"files,omitempty\" graphql:\"files\""
	Git           GitRefFragment                                     "json:\"git\" graphql:\"git\""
	Repository    *GitRepositoryFragment                             "json:\"repository,omitempty\" graphql:\"repository\""
	JobSpec       *JobSpecFragment                                   "json:\"jobSpec,omitempty\" graphql:\"jobSpec\""
	Configuration StackConfigurationFragment                         "json:\"configuration\" graphql:\"configuration\""
	Environment   []*StackEnvironmentFragment                        "json:\"environment,omitempty\" graphql:\"environment\""
	Output        []*StackOutputFragment                             "json:\"output,omitempty\" graphql:\"output\""
	Errors        []*ServiceErrorFragment                            "json:\"errors,omitempty\" graphql:\"errors\""
	Violations    []*StackPolicyViolationFragment                    "json:\"violations,omitempty\" graphql:\"violations\""
	PolicyEngine  *PolicyEngineFragment                              "json:\"policyEngine,omitempty\" graphql:\"policyEngine\""
	Approver      *UserFragment                                      "json:\"approver,omitempty\" graphql:\"approver\""
}

func (t *StackRunFragment) GetID() string {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.ID
}
func (t *StackRunFragment) GetType() *StackType {
	if t == nil {
		t = &StackRunFragment{}
	}
	return &t.Type
}
func (t *StackRunFragment) GetStatus() *StackStatus {
	if t == nil {
		t = &StackRunFragment{}
	}
	return &t.Status
}
func (t *StackRunFragment) GetApproval() *bool {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Approval
}
func (t *StackRunFragment) GetApprovedAt() *string {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.ApprovedAt
}
func (t *StackRunFragment) GetTarball() string {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Tarball
}
func (t *StackRunFragment) GetWorkdir() *string {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Workdir
}
func (t *StackRunFragment) GetManageState() *bool {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.ManageState
}
func (t *StackRunFragment) GetVariables() map[string]any {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Variables
}
func (t *StackRunFragment) GetDryRun() bool {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.DryRun
}
func (t *StackRunFragment) GetStateUrls() *StackRunFragment_StackRunBaseFragment_StateUrls {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.StateUrls
}
func (t *StackRunFragment) GetPluralCreds() *StackRunFragment_StackRunBaseFragment_PluralCreds {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.PluralCreds
}
func (t *StackRunFragment) GetActor() *UserFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Actor
}
func (t *StackRunFragment) GetStack() *InfrastructureStackFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Stack
}
func (t *StackRunFragment) GetState() *StackStateFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.State
}
func (t *StackRunFragment) GetSteps() []*RunStepFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Steps
}
func (t *StackRunFragment) GetFiles() []*StackFileFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Files
}
func (t *StackRunFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return &t.Git
}
func (t *StackRunFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Repository
}
func (t *StackRunFragment) GetJobSpec() *JobSpecFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.JobSpec
}
func (t *StackRunFragment) GetConfiguration() *StackConfigurationFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return &t.Configuration
}
func (t *StackRunFragment) GetEnvironment() []*StackEnvironmentFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Environment
}
func (t *StackRunFragment) GetOutput() []*StackOutputFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Output
}
func (t *StackRunFragment) GetErrors() []*ServiceErrorFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Errors
}
func (t *StackRunFragment) GetViolations() []*StackPolicyViolationFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Violations
}
func (t *StackRunFragment) GetPolicyEngine() *PolicyEngineFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.PolicyEngine
}
func (t *StackRunFragment) GetApprover() *UserFragment {
	if t == nil {
		t = &StackRunFragment{}
	}
	return t.Approver
}

type StackRunMinimalFragment struct {
	ID            string                     "json:\"id\" graphql:\"id\""
	Type          StackType                  "json:\"type\" graphql:\"type\""
	Status        StackStatus                "json:\"status\" graphql:\"status\""
	Approval      *bool                      "json:\"approval,omitempty\" graphql:\"approval\""
	ApprovedAt    *string                    "json:\"approvedAt,omitempty\" graphql:\"approvedAt\""
	Tarball       string                     "json:\"tarball\" graphql:\"tarball\""
	Workdir       *string                    "json:\"workdir,omitempty\" graphql:\"workdir\""
	ManageState   *bool                      "json:\"manageState,omitempty\" graphql:\"manageState\""
	JobSpec       *JobSpecFragment           "json:\"jobSpec,omitempty\" graphql:\"jobSpec\""
	Configuration StackConfigurationFragment "json:\"configuration\" graphql:\"configuration\""
}

func (t *StackRunMinimalFragment) GetID() string {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.ID
}
func (t *StackRunMinimalFragment) GetType() *StackType {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return &t.Type
}
func (t *StackRunMinimalFragment) GetStatus() *StackStatus {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return &t.Status
}
func (t *StackRunMinimalFragment) GetApproval() *bool {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.Approval
}
func (t *StackRunMinimalFragment) GetApprovedAt() *string {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.ApprovedAt
}
func (t *StackRunMinimalFragment) GetTarball() string {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.Tarball
}
func (t *StackRunMinimalFragment) GetWorkdir() *string {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.Workdir
}
func (t *StackRunMinimalFragment) GetManageState() *bool {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.ManageState
}
func (t *StackRunMinimalFragment) GetJobSpec() *JobSpecFragment {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return t.JobSpec
}
func (t *StackRunMinimalFragment) GetConfiguration() *StackConfigurationFragment {
	if t == nil {
		t = &StackRunMinimalFragment{}
	}
	return &t.Configuration
}

type StackRunBaseFragment struct {
	ID            string                            "json:\"id\" graphql:\"id\""
	Type          StackType                         "json:\"type\" graphql:\"type\""
	Status        StackStatus                       "json:\"status\" graphql:\"status\""
	Approval      *bool                             "json:\"approval,omitempty\" graphql:\"approval\""
	ApprovedAt    *string                           "json:\"approvedAt,omitempty\" graphql:\"approvedAt\""
	Tarball       string                            "json:\"tarball\" graphql:\"tarball\""
	Workdir       *string                           "json:\"workdir,omitempty\" graphql:\"workdir\""
	ManageState   *bool                             "json:\"manageState,omitempty\" graphql:\"manageState\""
	Variables     map[string]any                    "json:\"variables,omitempty\" graphql:\"variables\""
	DryRun        bool                              "json:\"dryRun\" graphql:\"dryRun\""
	StateUrls     *StackRunBaseFragment_StateUrls   "json:\"stateUrls,omitempty\" graphql:\"stateUrls\""
	PluralCreds   *StackRunBaseFragment_PluralCreds "json:\"pluralCreds,omitempty\" graphql:\"pluralCreds\""
	Actor         *UserFragment                     "json:\"actor,omitempty\" graphql:\"actor\""
	Stack         *InfrastructureStackFragment      "json:\"stack,omitempty\" graphql:\"stack\""
	State         *StackStateFragment               "json:\"state,omitempty\" graphql:\"state\""
	Steps         []*RunStepFragment                "json:\"steps,omitempty\" graphql:\"steps\""
	Files         []*StackFileFragment              "json:\"files,omitempty\" graphql:\"files\""
	Git           GitRefFragment                    "json:\"git\" graphql:\"git\""
	Repository    *GitRepositoryFragment            "json:\"repository,omitempty\" graphql:\"repository\""
	JobSpec       *JobSpecFragment                  "json:\"jobSpec,omitempty\" graphql:\"jobSpec\""
	Configuration StackConfigurationFragment        "json:\"configuration\" graphql:\"configuration\""
	Environment   []*StackEnvironmentFragment       "json:\"environment,omitempty\" graphql:\"environment\""
	Output        []*StackOutputFragment            "json:\"output,omitempty\" graphql:\"output\""
	Errors        []*ServiceErrorFragment           "json:\"errors,omitempty\" graphql:\"errors\""
	Violations    []*StackPolicyViolationFragment   "json:\"violations,omitempty\" graphql:\"violations\""
	PolicyEngine  *PolicyEngineFragment             "json:\"policyEngine,omitempty\" graphql:\"policyEngine\""
}

func (t *StackRunBaseFragment) GetID() string {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.ID
}
func (t *StackRunBaseFragment) GetType() *StackType {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return &t.Type
}
func (t *StackRunBaseFragment) GetStatus() *StackStatus {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return &t.Status
}
func (t *StackRunBaseFragment) GetApproval() *bool {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Approval
}
func (t *StackRunBaseFragment) GetApprovedAt() *string {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.ApprovedAt
}
func (t *StackRunBaseFragment) GetTarball() string {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Tarball
}
func (t *StackRunBaseFragment) GetWorkdir() *string {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Workdir
}
func (t *StackRunBaseFragment) GetManageState() *bool {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.ManageState
}
func (t *StackRunBaseFragment) GetVariables() map[string]any {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Variables
}
func (t *StackRunBaseFragment) GetDryRun() bool {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.DryRun
}
func (t *StackRunBaseFragment) GetStateUrls() *StackRunBaseFragment_StateUrls {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.StateUrls
}
func (t *StackRunBaseFragment) GetPluralCreds() *StackRunBaseFragment_PluralCreds {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.PluralCreds
}
func (t *StackRunBaseFragment) GetActor() *UserFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Actor
}
func (t *StackRunBaseFragment) GetStack() *InfrastructureStackFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Stack
}
func (t *StackRunBaseFragment) GetState() *StackStateFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.State
}
func (t *StackRunBaseFragment) GetSteps() []*RunStepFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Steps
}
func (t *StackRunBaseFragment) GetFiles() []*StackFileFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Files
}
func (t *StackRunBaseFragment) GetGit() *GitRefFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return &t.Git
}
func (t *StackRunBaseFragment) GetRepository() *GitRepositoryFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Repository
}
func (t *StackRunBaseFragment) GetJobSpec() *JobSpecFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.JobSpec
}
func (t *StackRunBaseFragment) GetConfiguration() *StackConfigurationFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return &t.Configuration
}
func (t *StackRunBaseFragment) GetEnvironment() []*StackEnvironmentFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Environment
}
func (t *StackRunBaseFragment) GetOutput() []*StackOutputFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Output
}
func (t *StackRunBaseFragment) GetErrors() []*ServiceErrorFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Errors
}
func (t *StackRunBaseFragment) GetViolations() []*StackPolicyViolationFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.Violations
}
func (t *StackRunBaseFragment) GetPolicyEngine() *PolicyEngineFragment {
	if t == nil {
		t = &StackRunBaseFragment{}
	}
	return t.PolicyEngine
}

type StackPolicyViolationFragment struct {
	ID           string                         "json:\"id\" graphql:\"id\""
	Title        string                         "json:\"title\" graphql:\"title\""
	Description  *string                        "json:\"description,omitempty\" graphql:\"description\""
	PolicyID     string                         "json:\"policyId\" graphql:\"policyId\""
	PolicyModule *string                        "json:\"policyModule,omitempty\" graphql:\"policyModule\""
	PolicyURL    *string                        "json:\"policyUrl,omitempty\" graphql:\"policyUrl\""
	Severity     VulnSeverity                   "json:\"severity\" graphql:\"severity\""
	Resolution   *string                        "json:\"resolution,omitempty\" graphql:\"resolution\""
	Causes       []*StackViolationCauseFragment "json:\"causes,omitempty\" graphql:\"causes\""
}

func (t *StackPolicyViolationFragment) GetID() string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.ID
}
func (t *StackPolicyViolationFragment) GetTitle() string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.Title
}
func (t *StackPolicyViolationFragment) GetDescription() *string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.Description
}
func (t *StackPolicyViolationFragment) GetPolicyID() string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.PolicyID
}
func (t *StackPolicyViolationFragment) GetPolicyModule() *string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.PolicyModule
}
func (t *StackPolicyViolationFragment) GetPolicyURL() *string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.PolicyURL
}
func (t *StackPolicyViolationFragment) GetSeverity() *VulnSeverity {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return &t.Severity
}
func (t *StackPolicyViolationFragment) GetResolution() *string {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.Resolution
}
func (t *StackPolicyViolationFragment) GetCauses() []*StackViolationCauseFragment {
	if t == nil {
		t = &StackPolicyViolationFragment{}
	}
	return t.Causes
}

type StackViolationCauseFragment struct {
	Start    int64                              "json:\"start\" graphql:\"start\""
	End      int64                              "json:\"end\" graphql:\"end\""
	Resource string                             "json:\"resource\" graphql:\"resource\""
	Filename *string                            "json:\"filename,omitempty\" graphql:\"filename\""
	Lines    []*StackViolationCauseLineFragment "json:\"lines,omitempty\" graphql:\"lines\""
}

func (t *StackViolationCauseFragment) GetStart() int64 {
	if t == nil {
		t = &StackViolationCauseFragment{}
	}
	return t.Start
}
func (t *StackViolationCauseFragment) GetEnd() int64 {
	if t == nil {
		t = &StackViolationCauseFragment{}
	}
	return t.End
}
func (t *StackViolationCauseFragment) GetResource() string {
	if t == nil {
		t = &StackViolationCauseFragment{}
	}
	return t.Resource
}
func (t *StackViolationCauseFragment) GetFilename() *string {
	if t == nil {
		t = &StackViolationCauseFragment{}
	}
	return t.Filename
}
func (t *StackViolationCauseFragment) GetLines() []*StackViolationCauseLineFragment {
	if t == nil {
		t = &StackViolationCauseFragment{}
	}
	return t.Lines
}

type StackViolationCauseLineFragment struct {
	First   *bool  "json:\"first,omitempty\" graphql:\"first\""
	Last    *bool  "json:\"last,omitempty\" graphql:\"last\""
	Content string "json:\"content\" graphql:\"content\""
	Line    int64  "json:\"line\" graphql:\"line\""
}

func (t *StackViolationCauseLineFragment) GetFirst() *bool {
	if t == nil {
		t = &StackViolationCauseLineFragment{}
	}
	return t.First
}
func (t *StackViolationCauseLineFragment) GetLast() *bool {
	if t == nil {
		t = &StackViolationCauseLineFragment{}
	}
	return t.Last
}
func (t *StackViolationCauseLineFragment) GetContent() string {
	if t == nil {
		t = &StackViolationCauseLineFragment{}
	}
	return t.Content
}
func (t *StackViolationCauseLineFragment) GetLine() int64 {
	if t == nil {
		t = &StackViolationCauseLineFragment{}
	}
	return t.Line
}

type ServiceErrorFragment struct {
	Source  string "json:\"source\" graphql:\"source\""
	Message string "json:\"message\" graphql:\"message\""
}

func (t *ServiceErrorFragment) GetSource() string {
	if t == nil {
		t = &ServiceErrorFragment{}
	}
	return t.Source
}
func (t *ServiceErrorFragment) GetMessage() string {
	if t == nil {
		t = &ServiceErrorFragment{}
	}
	return t.Message
}

type StackOutputFragment struct {
	Name   string "json:\"name\" graphql:\"name\""
	Value  string "json:\"value\" graphql:\"value\""
	Secret *bool  "json:\"secret,omitempty\" graphql:\"secret\""
}

func (t *StackOutputFragment) GetName() string {
	if t == nil {
		t = &StackOutputFragment{}
	}
	return t.Name
}
func (t *StackOutputFragment) GetValue() string {
	if t == nil {
		t = &StackOutputFragment{}
	}
	return t.Value
}
func (t *StackOutputFragment) GetSecret() *bool {
	if t == nil {
		t = &StackOutputFragment{}
	}
	return t.Secret
}

type StackStateFragment struct {
	ID    string                        "json:\"id\" graphql:\"id\""
	Plan  *string                       "json:\"plan,omitempty\" graphql:\"plan\""
	State []*StackStateResourceFragment "json:\"state,omitempty\" graphql:\"state\""
}

func (t *StackStateFragment) GetID() string {
	if t == nil {
		t = &StackStateFragment{}
	}
	return t.ID
}
func (t *StackStateFragment) GetPlan() *string {
	if t == nil {
		t = &StackStateFragment{}
	}
	return t.Plan
}
func (t *StackStateFragment) GetState() []*StackStateResourceFragment {
	if t == nil {
		t = &StackStateFragment{}
	}
	return t.State
}

type StackStateResourceFragment struct {
	Identifier    string         "json:\"identifier\" graphql:\"identifier\""
	Resource      string         "json:\"resource\" graphql:\"resource\""
	Name          string         "json:\"name\" graphql:\"name\""
	Configuration map[string]any "json:\"configuration,omitempty\" graphql:\"configuration\""
	Links         []*string      "json:\"links,omitempty\" graphql:\"links\""
}

func (t *StackStateResourceFragment) GetIdentifier() string {
	if t == nil {
		t = &StackStateResourceFragment{}
	}
	return t.Identifier
}
func (t *StackStateResourceFragment) GetResource() string {
	if t == nil {
		t = &StackStateResourceFragment{}
	}
	return t.Resource
}
func (t *StackStateResourceFragment) GetName() string {
	if t == nil {
		t = &StackStateResourceFragment{}
	}
	return t.Name
}
func (t *StackStateResourceFragment) GetConfiguration() map[string]any {
	if t == nil {
		t = &StackStateResourceFragment{}
	}
	return t.Configuration
}
func (t *StackStateResourceFragment) GetLinks() []*string {
	if t == nil {
		t = &StackStateResourceFragment{}
	}
	return t.Links
}

type StackEnvironmentFragment struct {
	Name   string "json:\"name\" graphql:\"name\""
	Value  string "json:\"value\" graphql:\"value\""
	Secret *bool  "json:\"secret,omitempty\" graphql:\"secret\""
}

func (t *StackEnvironmentFragment) GetName() string {
	if t == nil {
		t = &StackEnvironmentFragment{}
	}
	return t.Name
}
func (t *StackEnvironmentFragment) GetValue() string {
	if t == nil {
		t = &StackEnvironmentFragment{}
	}
	return t.Value
}
func (t *StackEnvironmentFragment) GetSecret() *bool {
	if t == nil {
		t = &StackEnvironmentFragment{}
	}
	return t.Secret
}

type StackFileFragment struct {
	Path    string "json:\"path\" graphql:\"path\""
	Content string "json:\"content\" graphql:\"content\""
}

func (t *StackFileFragment) GetPath() string {
	if t == nil {
		t = &StackFileFragment{}
	}
	return t.Path
}
func (t *StackFileFragment) GetContent() string {
	if t == nil {
		t = &StackFileFragment{}
	}
	return t.Content
}

type RunStepFragment struct {
	ID              string     "json:\"id\" graphql:\"id\""
	Status          StepStatus "json:\"status\" graphql:\"status\""
	Stage           StepStage  "json:\"stage\" graphql:\"stage\""
	Name            string     "json:\"name\" graphql:\"name\""
	Cmd             string     "json:\"cmd\" graphql:\"cmd\""
	Args            []string   "json:\"args,omitempty\" graphql:\"args\""
	RequireApproval *bool      "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
	Index           int64      "json:\"index\" graphql:\"index\""
}

func (t *RunStepFragment) GetID() string {
	if t == nil {
		t = &RunStepFragment{}
	}
	return t.ID
}
func (t *RunStepFragment) GetStatus() *StepStatus {
	if t == nil {
		t = &RunStepFragment{}
	}
	return &t.Status
}
func (t *RunStepFragment) GetStage() *StepStage {
	if t == nil {
		t = &RunStepFragment{}
	}
	return &t.Stage
}
func (t *RunStepFragment) GetName() string {
	if t == nil {
		t = &RunStepFragment{}
	}
	return t.Name
}
func (t *RunStepFragment) GetCmd() string {
	if t == nil {
		t = &RunStepFragment{}
	}
	return t.Cmd
}
func (t *RunStepFragment) GetArgs() []string {
	if t == nil {
		t = &RunStepFragment{}
	}
	return t.Args
}
func (t *RunStepFragment) GetRequireApproval() *bool {
	if t == nil {
		t = &RunStepFragment{}
	}
	return t.RequireApproval
}
func (t *RunStepFragment) GetIndex() int64 {
	if t == nil {
		t = &RunStepFragment{}
	}
	return t.Index
}

type StackConfigurationFragment struct {
	Image     *string                               "json:\"image,omitempty\" graphql:\"image\""
	Version   *string                               "json:\"version,omitempty\" graphql:\"version\""
	Tag       *string                               "json:\"tag,omitempty\" graphql:\"tag\""
	Hooks     []*StackHookFragment                  "json:\"hooks,omitempty\" graphql:\"hooks\""
	Terraform *StackConfigurationFragment_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *StackConfigurationFragment) GetImage() *string {
	if t == nil {
		t = &StackConfigurationFragment{}
	}
	return t.Image
}
func (t *StackConfigurationFragment) GetVersion() *string {
	if t == nil {
		t = &StackConfigurationFragment{}
	}
	return t.Version
}
func (t *StackConfigurationFragment) GetTag() *string {
	if t == nil {
		t = &StackConfigurationFragment{}
	}
	return t.Tag
}
func (t *StackConfigurationFragment) GetHooks() []*StackHookFragment {
	if t == nil {
		t = &StackConfigurationFragment{}
	}
	return t.Hooks
}
func (t *StackConfigurationFragment) GetTerraform() *StackConfigurationFragment_Terraform {
	if t == nil {
		t = &StackConfigurationFragment{}
	}
	return t.Terraform
}

type StackHookFragment struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *StackHookFragment) GetCmd() string {
	if t == nil {
		t = &StackHookFragment{}
	}
	return t.Cmd
}
func (t *StackHookFragment) GetArgs() []*string {
	if t == nil {
		t = &StackHookFragment{}
	}
	return t.Args
}
func (t *StackHookFragment) GetAfterStage() *StepStage {
	if t == nil {
		t = &StackHookFragment{}
	}
	return &t.AfterStage
}

type CustomStackRunFragment struct {
	ID            string                        "json:\"id\" graphql:\"id\""
	Name          string                        "json:\"name\" graphql:\"name\""
	Stack         *CustomStackRunFragment_Stack "json:\"stack,omitempty\" graphql:\"stack\""
	Documentation *string                       "json:\"documentation,omitempty\" graphql:\"documentation\""
	Commands      []*StackCommandFragment       "json:\"commands,omitempty\" graphql:\"commands\""
	Configuration []*PrConfigurationFragment    "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *CustomStackRunFragment) GetID() string {
	if t == nil {
		t = &CustomStackRunFragment{}
	}
	return t.ID
}
func (t *CustomStackRunFragment) GetName() string {
	if t == nil {
		t = &CustomStackRunFragment{}
	}
	return t.Name
}
func (t *CustomStackRunFragment) GetStack() *CustomStackRunFragment_Stack {
	if t == nil {
		t = &CustomStackRunFragment{}
	}
	return t.Stack
}
func (t *CustomStackRunFragment) GetDocumentation() *string {
	if t == nil {
		t = &CustomStackRunFragment{}
	}
	return t.Documentation
}
func (t *CustomStackRunFragment) GetCommands() []*StackCommandFragment {
	if t == nil {
		t = &CustomStackRunFragment{}
	}
	return t.Commands
}
func (t *CustomStackRunFragment) GetConfiguration() []*PrConfigurationFragment {
	if t == nil {
		t = &CustomStackRunFragment{}
	}
	return t.Configuration
}

type StackCommandFragment struct {
	Cmd  string    "json:\"cmd\" graphql:\"cmd\""
	Args []*string "json:\"args,omitempty\" graphql:\"args\""
	Dir  *string   "json:\"dir,omitempty\" graphql:\"dir\""
}

func (t *StackCommandFragment) GetCmd() string {
	if t == nil {
		t = &StackCommandFragment{}
	}
	return t.Cmd
}
func (t *StackCommandFragment) GetArgs() []*string {
	if t == nil {
		t = &StackCommandFragment{}
	}
	return t.Args
}
func (t *StackCommandFragment) GetDir() *string {
	if t == nil {
		t = &StackCommandFragment{}
	}
	return t.Dir
}

type PrConfigurationFragment struct {
	Type          ConfigurationType                 "json:\"type\" graphql:\"type\""
	Name          string                            "json:\"name\" graphql:\"name\""
	Default       *string                           "json:\"default,omitempty\" graphql:\"default\""
	Documentation *string                           "json:\"documentation,omitempty\" graphql:\"documentation\""
	Longform      *string                           "json:\"longform,omitempty\" graphql:\"longform\""
	Placeholder   *string                           "json:\"placeholder,omitempty\" graphql:\"placeholder\""
	Optional      *bool                             "json:\"optional,omitempty\" graphql:\"optional\""
	Condition     *PrConfigurationConditionFragment "json:\"condition,omitempty\" graphql:\"condition\""
}

func (t *PrConfigurationFragment) GetType() *ConfigurationType {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return &t.Type
}
func (t *PrConfigurationFragment) GetName() string {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Name
}
func (t *PrConfigurationFragment) GetDefault() *string {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Default
}
func (t *PrConfigurationFragment) GetDocumentation() *string {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Documentation
}
func (t *PrConfigurationFragment) GetLongform() *string {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Longform
}
func (t *PrConfigurationFragment) GetPlaceholder() *string {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Placeholder
}
func (t *PrConfigurationFragment) GetOptional() *bool {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Optional
}
func (t *PrConfigurationFragment) GetCondition() *PrConfigurationConditionFragment {
	if t == nil {
		t = &PrConfigurationFragment{}
	}
	return t.Condition
}

type PrConfigurationConditionFragment struct {
	Operation Operation "json:\"operation\" graphql:\"operation\""
	Field     string    "json:\"field\" graphql:\"field\""
	Value     *string   "json:\"value,omitempty\" graphql:\"value\""
}

func (t *PrConfigurationConditionFragment) GetOperation() *Operation {
	if t == nil {
		t = &PrConfigurationConditionFragment{}
	}
	return &t.Operation
}
func (t *PrConfigurationConditionFragment) GetField() string {
	if t == nil {
		t = &PrConfigurationConditionFragment{}
	}
	return t.Field
}
func (t *PrConfigurationConditionFragment) GetValue() *string {
	if t == nil {
		t = &PrConfigurationConditionFragment{}
	}
	return t.Value
}

type StackDefinitionFragment struct {
	ID            string                                "json:\"id\" graphql:\"id\""
	Name          string                                "json:\"name\" graphql:\"name\""
	Description   *string                               "json:\"description,omitempty\" graphql:\"description\""
	InsertedAt    *string                               "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt     *string                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Configuration StackDefinitionFragment_Configuration "json:\"configuration\" graphql:\"configuration\""
	Steps         []*StackDefinitionFragment_Steps      "json:\"steps,omitempty\" graphql:\"steps\""
}

func (t *StackDefinitionFragment) GetID() string {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return t.ID
}
func (t *StackDefinitionFragment) GetName() string {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return t.Name
}
func (t *StackDefinitionFragment) GetDescription() *string {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return t.Description
}
func (t *StackDefinitionFragment) GetInsertedAt() *string {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return t.InsertedAt
}
func (t *StackDefinitionFragment) GetUpdatedAt() *string {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return t.UpdatedAt
}
func (t *StackDefinitionFragment) GetConfiguration() *StackDefinitionFragment_Configuration {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return &t.Configuration
}
func (t *StackDefinitionFragment) GetSteps() []*StackDefinitionFragment_Steps {
	if t == nil {
		t = &StackDefinitionFragment{}
	}
	return t.Steps
}

type AccessTokenFragment struct {
	ID    *string "json:\"id,omitempty\" graphql:\"id\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *AccessTokenFragment) GetID() *string {
	if t == nil {
		t = &AccessTokenFragment{}
	}
	return t.ID
}
func (t *AccessTokenFragment) GetToken() *string {
	if t == nil {
		t = &AccessTokenFragment{}
	}
	return t.Token
}

type AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &AgentRunFragment_User{}
	}
	return t.ID
}
func (t *AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &AgentRunFragment_User{}
	}
	return t.Name
}
func (t *AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &AgentRunFragment_User{}
	}
	return t.Email
}

type AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &AgentRunFragment_Flow{}
	}
	return t.Name
}

type ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                            "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                            "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                        "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ServiceDeploymentForAgent_Cluster struct {
	ID             string         "json:\"id\" graphql:\"id\""
	Name           string         "json:\"name\" graphql:\"name\""
	Handle         *string        "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool          "json:\"self,omitempty\" graphql:\"self\""
	Version        *string        "json:\"version,omitempty\" graphql:\"version\""
	PingedAt       *string        "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Metadata       map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	CurrentVersion *string        "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string        "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	Distro         *ClusterDistro "json:\"distro,omitempty\" graphql:\"distro\""
}

func (t *ServiceDeploymentForAgent_Cluster) GetID() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.ID
}
func (t *ServiceDeploymentForAgent_Cluster) GetName() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.Name
}
func (t *ServiceDeploymentForAgent_Cluster) GetHandle() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.Handle
}
func (t *ServiceDeploymentForAgent_Cluster) GetSelf() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.Self
}
func (t *ServiceDeploymentForAgent_Cluster) GetVersion() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.Version
}
func (t *ServiceDeploymentForAgent_Cluster) GetPingedAt() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.PingedAt
}
func (t *ServiceDeploymentForAgent_Cluster) GetMetadata() map[string]any {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.Metadata
}
func (t *ServiceDeploymentForAgent_Cluster) GetCurrentVersion() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.CurrentVersion
}
func (t *ServiceDeploymentForAgent_Cluster) GetKasURL() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.KasURL
}
func (t *ServiceDeploymentForAgent_Cluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &ServiceDeploymentForAgent_Cluster{}
	}
	return t.Distro
}

type ServiceDeploymentForAgent_Helm struct {
	Release     *string   "json:\"release,omitempty\" graphql:\"release\""
	ValuesFiles []*string "json:\"valuesFiles,omitempty\" graphql:\"valuesFiles\""
	Values      *string   "json:\"values,omitempty\" graphql:\"values\""
	IgnoreHooks *bool     "json:\"ignoreHooks,omitempty\" graphql:\"ignoreHooks\""
	IgnoreCrds  *bool     "json:\"ignoreCrds,omitempty\" graphql:\"ignoreCrds\""
	LuaScript   *string   "json:\"luaScript,omitempty\" graphql:\"luaScript\""
	LuaFile     *string   "json:\"luaFile,omitempty\" graphql:\"luaFile\""
	LuaFolder   *string   "json:\"luaFolder,omitempty\" graphql:\"luaFolder\""
}

func (t *ServiceDeploymentForAgent_Helm) GetRelease() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.Release
}
func (t *ServiceDeploymentForAgent_Helm) GetValuesFiles() []*string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.ValuesFiles
}
func (t *ServiceDeploymentForAgent_Helm) GetValues() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.Values
}
func (t *ServiceDeploymentForAgent_Helm) GetIgnoreHooks() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreHooks
}
func (t *ServiceDeploymentForAgent_Helm) GetIgnoreCrds() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreCrds
}
func (t *ServiceDeploymentForAgent_Helm) GetLuaScript() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaScript
}
func (t *ServiceDeploymentForAgent_Helm) GetLuaFile() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFile
}
func (t *ServiceDeploymentForAgent_Helm) GetLuaFolder() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFolder
}

type ServiceDeploymentForAgent_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ServiceDeploymentForAgent_Configuration) GetName() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Configuration{}
	}
	return t.Name
}
func (t *ServiceDeploymentForAgent_Configuration) GetValue() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Configuration{}
	}
	return t.Value
}

type ServiceDeploymentForAgent_Contexts struct {
	Name          string         "json:\"name\" graphql:\"name\""
	Configuration map[string]any "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *ServiceDeploymentForAgent_Contexts) GetName() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Contexts{}
	}
	return t.Name
}
func (t *ServiceDeploymentForAgent_Contexts) GetConfiguration() map[string]any {
	if t == nil {
		t = &ServiceDeploymentForAgent_Contexts{}
	}
	return t.Configuration
}

type ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ServiceDeploymentForAgent_SyncConfig struct {
	CreateNamespace   *bool                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	DeleteNamespace   *bool                                                   "json:\"deleteNamespace,omitempty\" graphql:\"deleteNamespace\""
	NamespaceMetadata *ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ServiceDeploymentForAgent_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ServiceDeploymentForAgent_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ServiceDeploymentForAgent_SyncConfig) GetDeleteNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DeleteNamespace
}
func (t *ServiceDeploymentForAgent_SyncConfig) GetNamespaceMetadata() *ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ServiceDeploymentForAgent_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ServiceDeploymentForAgent_Revision struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ServiceDeploymentForAgent_Revision) GetID() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Revision{}
	}
	return t.ID
}

type ServiceDeploymentForAgent_Imports_Stack struct {
	ID   *string "json:\"id,omitempty\" graphql:\"id\""
	Name string  "json:\"name\" graphql:\"name\""
}

func (t *ServiceDeploymentForAgent_Imports_Stack) GetID() *string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.ID
}
func (t *ServiceDeploymentForAgent_Imports_Stack) GetName() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.Name
}

type ServiceDeploymentForAgent_Imports_Outputs struct {
	Name   string "json:\"name\" graphql:\"name\""
	Value  string "json:\"value\" graphql:\"value\""
	Secret *bool  "json:\"secret,omitempty\" graphql:\"secret\""
}

func (t *ServiceDeploymentForAgent_Imports_Outputs) GetName() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Name
}
func (t *ServiceDeploymentForAgent_Imports_Outputs) GetValue() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Value
}
func (t *ServiceDeploymentForAgent_Imports_Outputs) GetSecret() *bool {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Secret
}

type ServiceDeploymentForAgent_Imports struct {
	ID      string                                       "json:\"id\" graphql:\"id\""
	Stack   *ServiceDeploymentForAgent_Imports_Stack     "json:\"stack,omitempty\" graphql:\"stack\""
	Outputs []*ServiceDeploymentForAgent_Imports_Outputs "json:\"outputs,omitempty\" graphql:\"outputs\""
}

func (t *ServiceDeploymentForAgent_Imports) GetID() string {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports{}
	}
	return t.ID
}
func (t *ServiceDeploymentForAgent_Imports) GetStack() *ServiceDeploymentForAgent_Imports_Stack {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports{}
	}
	return t.Stack
}
func (t *ServiceDeploymentForAgent_Imports) GetOutputs() []*ServiceDeploymentForAgent_Imports_Outputs {
	if t == nil {
		t = &ServiceDeploymentForAgent_Imports{}
	}
	return t.Outputs
}

type FederatedCredentialFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *FederatedCredentialFragment_User) GetID() string {
	if t == nil {
		t = &FederatedCredentialFragment_User{}
	}
	return t.ID
}
func (t *FederatedCredentialFragment_User) GetName() string {
	if t == nil {
		t = &FederatedCredentialFragment_User{}
	}
	return t.Name
}
func (t *FederatedCredentialFragment_User) GetEmail() string {
	if t == nil {
		t = &FederatedCredentialFragment_User{}
	}
	return t.Email
}

type PipelineGateIDsEdgeFragment_Node_ struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PipelineGateIDsEdgeFragment_Node_) GetID() string {
	if t == nil {
		t = &PipelineGateIDsEdgeFragment_Node_{}
	}
	return t.ID
}

type PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type MCPServerFragment_Authentication_Headers struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *MCPServerFragment_Authentication_Headers) GetName() string {
	if t == nil {
		t = &MCPServerFragment_Authentication_Headers{}
	}
	return t.Name
}
func (t *MCPServerFragment_Authentication_Headers) GetValue() string {
	if t == nil {
		t = &MCPServerFragment_Authentication_Headers{}
	}
	return t.Value
}

type MCPServerFragment_Authentication struct {
	Plural  *bool                                       "json:\"plural,omitempty\" graphql:\"plural\""
	Headers []*MCPServerFragment_Authentication_Headers "json:\"headers,omitempty\" graphql:\"headers\""
}

func (t *MCPServerFragment_Authentication) GetPlural() *bool {
	if t == nil {
		t = &MCPServerFragment_Authentication{}
	}
	return t.Plural
}
func (t *MCPServerFragment_Authentication) GetHeaders() []*MCPServerFragment_Authentication_Headers {
	if t == nil {
		t = &MCPServerFragment_Authentication{}
	}
	return t.Headers
}

type ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                             "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                             "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                         "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &RevisionFragment_Git{}
	}
	return t.Folder
}

type GroupMemberFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GroupMemberFragment_User) GetID() string {
	if t == nil {
		t = &GroupMemberFragment_User{}
	}
	return t.ID
}

type GroupMemberFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GroupMemberFragment_Group) GetID() string {
	if t == nil {
		t = &GroupMemberFragment_Group{}
	}
	return t.ID
}

type DeploymentSettingsFragment_Ai_AISettingsFragment_Openai struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *DeploymentSettingsFragment_Ai_AISettingsFragment_Openai) GetModel() *string {
	if t == nil {
		t = &DeploymentSettingsFragment_Ai_AISettingsFragment_Openai{}
	}
	return t.Model
}

type DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic) GetModel() *string {
	if t == nil {
		t = &DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic{}
	}
	return t.Model
}

type ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                     "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                     "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                 "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster struct {
	ID             string         "json:\"id\" graphql:\"id\""
	Name           string         "json:\"name\" graphql:\"name\""
	Handle         *string        "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool          "json:\"self,omitempty\" graphql:\"self\""
	Version        *string        "json:\"version,omitempty\" graphql:\"version\""
	PingedAt       *string        "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Metadata       map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	CurrentVersion *string        "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string        "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	Distro         *ClusterDistro "json:\"distro,omitempty\" graphql:\"distro\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetID() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.ID
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetName() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Name
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetHandle() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Handle
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetSelf() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Self
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetVersion() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Version
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetPingedAt() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.PingedAt
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetMetadata() map[string]any {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Metadata
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetCurrentVersion() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.CurrentVersion
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetKasURL() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.KasURL
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Distro
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm struct {
	Release     *string   "json:\"release,omitempty\" graphql:\"release\""
	ValuesFiles []*string "json:\"valuesFiles,omitempty\" graphql:\"valuesFiles\""
	Values      *string   "json:\"values,omitempty\" graphql:\"values\""
	IgnoreHooks *bool     "json:\"ignoreHooks,omitempty\" graphql:\"ignoreHooks\""
	IgnoreCrds  *bool     "json:\"ignoreCrds,omitempty\" graphql:\"ignoreCrds\""
	LuaScript   *string   "json:\"luaScript,omitempty\" graphql:\"luaScript\""
	LuaFile     *string   "json:\"luaFile,omitempty\" graphql:\"luaFile\""
	LuaFolder   *string   "json:\"luaFolder,omitempty\" graphql:\"luaFolder\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetRelease() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.Release
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetValuesFiles() []*string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.ValuesFiles
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetValues() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.Values
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetIgnoreHooks() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreHooks
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetIgnoreCrds() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreCrds
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetLuaScript() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaScript
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetLuaFile() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFile
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetLuaFolder() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFolder
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration) GetName() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration{}
	}
	return t.Name
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration) GetValue() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration{}
	}
	return t.Value
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts struct {
	Name          string         "json:\"name\" graphql:\"name\""
	Configuration map[string]any "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts) GetName() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts{}
	}
	return t.Name
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts) GetConfiguration() map[string]any {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts{}
	}
	return t.Configuration
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig struct {
	CreateNamespace   *bool                                                                                              "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                              "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	DeleteNamespace   *bool                                                                                              "json:\"deleteNamespace,omitempty\" graphql:\"deleteNamespace\""
	NamespaceMetadata *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                          "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetDeleteNamespace() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DeleteNamespace
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetNamespaceMetadata() *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Revision struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Revision) GetID() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Revision{}
	}
	return t.ID
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack struct {
	ID   *string "json:\"id,omitempty\" graphql:\"id\""
	Name string  "json:\"name\" graphql:\"name\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack) GetID() *string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.ID
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack) GetName() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.Name
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs struct {
	Name   string "json:\"name\" graphql:\"name\""
	Value  string "json:\"value\" graphql:\"value\""
	Secret *bool  "json:\"secret,omitempty\" graphql:\"secret\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs) GetName() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Name
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs) GetValue() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Value
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs) GetSecret() *bool {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Secret
}

type ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports struct {
	ID      string                                                                                  "json:\"id\" graphql:\"id\""
	Stack   *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack     "json:\"stack,omitempty\" graphql:\"stack\""
	Outputs []*ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs "json:\"outputs,omitempty\" graphql:\"outputs\""
}

func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports) GetID() string {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports{}
	}
	return t.ID
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports) GetStack() *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports{}
	}
	return t.Stack
}
func (t *ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports) GetOutputs() []*ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs {
	if t == nil {
		t = &ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports{}
	}
	return t.Outputs
}

type GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &GlobalServiceFragment_Service{}
	}
	return t.ID
}

type AISettingsFragment_Openai struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *AISettingsFragment_Openai) GetModel() *string {
	if t == nil {
		t = &AISettingsFragment_Openai{}
	}
	return t.Model
}

type AISettingsFragment_Anthropic struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *AISettingsFragment_Anthropic) GetModel() *string {
	if t == nil {
		t = &AISettingsFragment_Anthropic{}
	}
	return t.Model
}

type PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments struct {
	AddOns       *bool "json:\"addOns,omitempty\" graphql:\"addOns\""
	Clusters     *bool "json:\"clusters,omitempty\" graphql:\"clusters\""
	Pipelines    *bool "json:\"pipelines,omitempty\" graphql:\"pipelines\""
	Providers    *bool "json:\"providers,omitempty\" graphql:\"providers\""
	Repositories *bool "json:\"repositories,omitempty\" graphql:\"repositories\""
	Services     *bool "json:\"services,omitempty\" graphql:\"services\""
}

func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetAddOns() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.AddOns
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetClusters() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Clusters
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetPipelines() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Pipelines
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetProviders() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Providers
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetRepositories() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Repositories
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetServices() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Services
}

type PersonaFragment_Configuration_PersonaConfigurationFragment_Home struct {
	Manager  *bool "json:\"manager,omitempty\" graphql:\"manager\""
	Security *bool "json:\"security,omitempty\" graphql:\"security\""
}

func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetManager() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Manager
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetSecurity() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Security
}

type PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar struct {
	Audits       *bool "json:\"audits,omitempty\" graphql:\"audits\""
	Kubernetes   *bool "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
	PullRequests *bool "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
	Settings     *bool "json:\"settings,omitempty\" graphql:\"settings\""
	Backups      *bool "json:\"backups,omitempty\" graphql:\"backups\""
	Stacks       *bool "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetAudits() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Audits
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetKubernetes() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Kubernetes
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetPullRequests() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.PullRequests
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetSettings() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Settings
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetBackups() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Backups
}
func (t *PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetStacks() *bool {
	if t == nil {
		t = &PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Stacks
}

type PersonaConfigurationFragment_Deployments struct {
	AddOns       *bool "json:\"addOns,omitempty\" graphql:\"addOns\""
	Clusters     *bool "json:\"clusters,omitempty\" graphql:\"clusters\""
	Pipelines    *bool "json:\"pipelines,omitempty\" graphql:\"pipelines\""
	Providers    *bool "json:\"providers,omitempty\" graphql:\"providers\""
	Repositories *bool "json:\"repositories,omitempty\" graphql:\"repositories\""
	Services     *bool "json:\"services,omitempty\" graphql:\"services\""
}

func (t *PersonaConfigurationFragment_Deployments) GetAddOns() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Deployments{}
	}
	return t.AddOns
}
func (t *PersonaConfigurationFragment_Deployments) GetClusters() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Deployments{}
	}
	return t.Clusters
}
func (t *PersonaConfigurationFragment_Deployments) GetPipelines() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Deployments{}
	}
	return t.Pipelines
}
func (t *PersonaConfigurationFragment_Deployments) GetProviders() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Deployments{}
	}
	return t.Providers
}
func (t *PersonaConfigurationFragment_Deployments) GetRepositories() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Deployments{}
	}
	return t.Repositories
}
func (t *PersonaConfigurationFragment_Deployments) GetServices() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Deployments{}
	}
	return t.Services
}

type PersonaConfigurationFragment_Home struct {
	Manager  *bool "json:\"manager,omitempty\" graphql:\"manager\""
	Security *bool "json:\"security,omitempty\" graphql:\"security\""
}

func (t *PersonaConfigurationFragment_Home) GetManager() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Home{}
	}
	return t.Manager
}
func (t *PersonaConfigurationFragment_Home) GetSecurity() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Home{}
	}
	return t.Security
}

type PersonaConfigurationFragment_Sidebar struct {
	Audits       *bool "json:\"audits,omitempty\" graphql:\"audits\""
	Kubernetes   *bool "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
	PullRequests *bool "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
	Settings     *bool "json:\"settings,omitempty\" graphql:\"settings\""
	Backups      *bool "json:\"backups,omitempty\" graphql:\"backups\""
	Stacks       *bool "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *PersonaConfigurationFragment_Sidebar) GetAudits() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Sidebar{}
	}
	return t.Audits
}
func (t *PersonaConfigurationFragment_Sidebar) GetKubernetes() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Sidebar{}
	}
	return t.Kubernetes
}
func (t *PersonaConfigurationFragment_Sidebar) GetPullRequests() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Sidebar{}
	}
	return t.PullRequests
}
func (t *PersonaConfigurationFragment_Sidebar) GetSettings() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Sidebar{}
	}
	return t.Settings
}
func (t *PersonaConfigurationFragment_Sidebar) GetBackups() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Sidebar{}
	}
	return t.Backups
}
func (t *PersonaConfigurationFragment_Sidebar) GetStacks() *bool {
	if t == nil {
		t = &PersonaConfigurationFragment_Sidebar{}
	}
	return t.Stacks
}

type PipelineFragment_Stages_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineFragment_Stages_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineFragment_Stages_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineFragment_Stages_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineFragment_Stages_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineFragment_Stages_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                   "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineFragment_Stages_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineFragment_Stages_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineFragment_Stages_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineFragment_Stages_PipelineStageFragment_Services) GetCriteria() *PipelineFragment_Stages_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineFragment_Stages_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                                 "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetCriteria() *PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                               "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetCriteria() *PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment           "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineStageFragment_Services) GetCriteria() *PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineStageEdgeFragment_From_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                          "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetCriteria() *PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineStageEdgeFragment_To_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                        "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetCriteria() *PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                             "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services) GetCriteria() *PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                                                           "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetCriteria() *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                                                         "json:\"service,omitempty\" graphql:\"service\""
	Criteria *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetCriteria() *PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type PreviewEnvironmentTemplateFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PreviewEnvironmentTemplateFragment_Flow) GetID() string {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment_Flow{}
	}
	return t.ID
}

type PreviewEnvironmentTemplateFragment_Connection struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PreviewEnvironmentTemplateFragment_Connection) GetID() string {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment_Connection{}
	}
	return t.ID
}

type PreviewEnvironmentTemplateFragment_Template struct {
	Name *string "json:\"name,omitempty\" graphql:\"name\""
}

func (t *PreviewEnvironmentTemplateFragment_Template) GetName() *string {
	if t == nil {
		t = &PreviewEnvironmentTemplateFragment_Template{}
	}
	return t.Name
}

type SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls struct {
	Terraform *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls) GetTerraform() *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunFragment_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type StackRunFragment_StackRunBaseFragment_StateUrls struct {
	Terraform *StackRunFragment_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *StackRunFragment_StackRunBaseFragment_StateUrls) GetTerraform() *StackRunFragment_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type StackRunFragment_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *StackRunFragment_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *StackRunFragment_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type StackRunBaseFragment_StateUrls struct {
	Terraform *StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *StackRunBaseFragment_StateUrls) GetTerraform() *StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type CustomStackRunFragment_Stack struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *CustomStackRunFragment_Stack) GetID() *string {
	if t == nil {
		t = &CustomStackRunFragment_Stack{}
	}
	return t.ID
}

type StackDefinitionFragment_Configuration_Hooks struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *StackDefinitionFragment_Configuration_Hooks) GetCmd() string {
	if t == nil {
		t = &StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Cmd
}
func (t *StackDefinitionFragment_Configuration_Hooks) GetArgs() []*string {
	if t == nil {
		t = &StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Args
}
func (t *StackDefinitionFragment_Configuration_Hooks) GetAfterStage() *StepStage {
	if t == nil {
		t = &StackDefinitionFragment_Configuration_Hooks{}
	}
	return &t.AfterStage
}

type StackDefinitionFragment_Configuration struct {
	Image   *string                                        "json:\"image,omitempty\" graphql:\"image\""
	Tag     *string                                        "json:\"tag,omitempty\" graphql:\"tag\""
	Version *string                                        "json:\"version,omitempty\" graphql:\"version\""
	Hooks   []*StackDefinitionFragment_Configuration_Hooks "json:\"hooks,omitempty\" graphql:\"hooks\""
}

func (t *StackDefinitionFragment_Configuration) GetImage() *string {
	if t == nil {
		t = &StackDefinitionFragment_Configuration{}
	}
	return t.Image
}
func (t *StackDefinitionFragment_Configuration) GetTag() *string {
	if t == nil {
		t = &StackDefinitionFragment_Configuration{}
	}
	return t.Tag
}
func (t *StackDefinitionFragment_Configuration) GetVersion() *string {
	if t == nil {
		t = &StackDefinitionFragment_Configuration{}
	}
	return t.Version
}
func (t *StackDefinitionFragment_Configuration) GetHooks() []*StackDefinitionFragment_Configuration_Hooks {
	if t == nil {
		t = &StackDefinitionFragment_Configuration{}
	}
	return t.Hooks
}

type StackDefinitionFragment_Steps struct {
	Cmd             string    "json:\"cmd\" graphql:\"cmd\""
	Args            []*string "json:\"args,omitempty\" graphql:\"args\""
	Stage           StepStage "json:\"stage\" graphql:\"stage\""
	RequireApproval *bool     "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
}

func (t *StackDefinitionFragment_Steps) GetCmd() string {
	if t == nil {
		t = &StackDefinitionFragment_Steps{}
	}
	return t.Cmd
}
func (t *StackDefinitionFragment_Steps) GetArgs() []*string {
	if t == nil {
		t = &StackDefinitionFragment_Steps{}
	}
	return t.Args
}
func (t *StackDefinitionFragment_Steps) GetStage() *StepStage {
	if t == nil {
		t = &StackDefinitionFragment_Steps{}
	}
	return &t.Stage
}
func (t *StackDefinitionFragment_Steps) GetRequireApproval() *bool {
	if t == nil {
		t = &StackDefinitionFragment_Steps{}
	}
	return t.RequireApproval
}

type DeleteAgentRuntime_DeleteAgentRuntime struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteAgentRuntime_DeleteAgentRuntime) GetID() string {
	if t == nil {
		t = &DeleteAgentRuntime_DeleteAgentRuntime{}
	}
	return t.ID
}

type ListAgentRuntimes_AgentRuntimes_Edges struct {
	Node *AgentRuntimeFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListAgentRuntimes_AgentRuntimes_Edges) GetNode() *AgentRuntimeFragment {
	if t == nil {
		t = &ListAgentRuntimes_AgentRuntimes_Edges{}
	}
	return t.Node
}

type ListAgentRuntimes_AgentRuntimes struct {
	Edges    []*ListAgentRuntimes_AgentRuntimes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo PageInfoFragment                         "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *ListAgentRuntimes_AgentRuntimes) GetEdges() []*ListAgentRuntimes_AgentRuntimes_Edges {
	if t == nil {
		t = &ListAgentRuntimes_AgentRuntimes{}
	}
	return t.Edges
}
func (t *ListAgentRuntimes_AgentRuntimes) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListAgentRuntimes_AgentRuntimes{}
	}
	return &t.PageInfo
}

type GetAgentRun_AgentRun_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *GetAgentRun_AgentRun_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &GetAgentRun_AgentRun_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *GetAgentRun_AgentRun_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &GetAgentRun_AgentRun_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *GetAgentRun_AgentRun_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &GetAgentRun_AgentRun_AgentRunFragment_User{}
	}
	return t.Email
}

type GetAgentRun_AgentRun_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAgentRun_AgentRun_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &GetAgentRun_AgentRun_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *GetAgentRun_AgentRun_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &GetAgentRun_AgentRun_AgentRunFragment_Flow{}
	}
	return t.Name
}

type ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_User{}
	}
	return t.Email
}

type ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &ListAgentRuns_AgentRuns_Edges_Node_AgentRunFragment_Flow{}
	}
	return t.Name
}

type ListAgentRuns_AgentRuns_Edges struct {
	Node *AgentRunFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListAgentRuns_AgentRuns_Edges) GetNode() *AgentRunFragment {
	if t == nil {
		t = &ListAgentRuns_AgentRuns_Edges{}
	}
	return t.Node
}

type ListAgentRuns_AgentRuns struct {
	Edges    []*ListAgentRuns_AgentRuns_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo PageInfoFragment                 "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *ListAgentRuns_AgentRuns) GetEdges() []*ListAgentRuns_AgentRuns_Edges {
	if t == nil {
		t = &ListAgentRuns_AgentRuns{}
	}
	return t.Edges
}
func (t *ListAgentRuns_AgentRuns) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListAgentRuns_AgentRuns{}
	}
	return &t.PageInfo
}

type ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_User{}
	}
	return t.Email
}

type ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges_Node_AgentRunFragment_Flow{}
	}
	return t.Name
}

type ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges struct {
	Node *AgentRunFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges) GetNode() *AgentRunFragment {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges{}
	}
	return t.Node
}

type ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns struct {
	Edges    []*ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges "json:\"edges,omitempty\" graphql:\"edges\""
	PageInfo PageInfoFragment                                              "json:\"pageInfo\" graphql:\"pageInfo\""
}

func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns) GetEdges() []*ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns_Edges {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns{}
	}
	return t.Edges
}
func (t *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns{}
	}
	return &t.PageInfo
}

type ListAgentRuntimePendingRuns_AgentRuntime struct {
	PendingRuns *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns "json:\"pendingRuns,omitempty\" graphql:\"pendingRuns\""
}

func (t *ListAgentRuntimePendingRuns_AgentRuntime) GetPendingRuns() *ListAgentRuntimePendingRuns_AgentRuntime_PendingRuns {
	if t == nil {
		t = &ListAgentRuntimePendingRuns_AgentRuntime{}
	}
	return t.PendingRuns
}

type CancelAgentRun_CancelAgentRun struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CancelAgentRun_CancelAgentRun) GetID() string {
	if t == nil {
		t = &CancelAgentRun_CancelAgentRun{}
	}
	return t.ID
}

type CreateAgentRun_CreateAgentRun_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *CreateAgentRun_CreateAgentRun_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &CreateAgentRun_CreateAgentRun_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *CreateAgentRun_CreateAgentRun_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &CreateAgentRun_CreateAgentRun_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *CreateAgentRun_CreateAgentRun_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &CreateAgentRun_CreateAgentRun_AgentRunFragment_User{}
	}
	return t.Email
}

type CreateAgentRun_CreateAgentRun_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateAgentRun_CreateAgentRun_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &CreateAgentRun_CreateAgentRun_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *CreateAgentRun_CreateAgentRun_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &CreateAgentRun_CreateAgentRun_AgentRunFragment_Flow{}
	}
	return t.Name
}

type UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &UpdateAgentRun_UpdateAgentRun_AgentRunFragment_User{}
	}
	return t.Email
}

type UpdateAgentRun_UpdateAgentRun_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateAgentRun_UpdateAgentRun_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateAgentRun_UpdateAgentRun_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *UpdateAgentRun_UpdateAgentRun_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &UpdateAgentRun_UpdateAgentRun_AgentRunFragment_Flow{}
	}
	return t.Name
}

type UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_User{}
	}
	return t.Email
}

type UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &UpdateAgentRunAnalysis_UpdateAgentRunAnalysis_AgentRunFragment_Flow{}
	}
	return t.Name
}

type UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User) GetID() string {
	if t == nil {
		t = &UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User{}
	}
	return t.ID
}
func (t *UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User) GetName() string {
	if t == nil {
		t = &UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User{}
	}
	return t.Name
}
func (t *UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User) GetEmail() string {
	if t == nil {
		t = &UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_User{}
	}
	return t.Email
}

type UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_Flow struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_Flow{}
	}
	return t.ID
}
func (t *UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_Flow) GetName() string {
	if t == nil {
		t = &UpdateAgentRunTodos_UpdateAgentRunTodos_AgentRunFragment_Flow{}
	}
	return t.Name
}

type ListScmWebhooks_ScmWebhooks_Edges struct {
	Node *ScmWebhookFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListScmWebhooks_ScmWebhooks_Edges) GetNode() *ScmWebhookFragment {
	if t == nil {
		t = &ListScmWebhooks_ScmWebhooks_Edges{}
	}
	return t.Node
}

type ListScmWebhooks_ScmWebhooks struct {
	PageInfo PageInfoFragment                     "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListScmWebhooks_ScmWebhooks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListScmWebhooks_ScmWebhooks) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListScmWebhooks_ScmWebhooks{}
	}
	return &t.PageInfo
}
func (t *ListScmWebhooks_ScmWebhooks) GetEdges() []*ListScmWebhooks_ScmWebhooks_Edges {
	if t == nil {
		t = &ListScmWebhooks_ScmWebhooks{}
	}
	return t.Edges
}

type ListObservabilityWebhooks_ObservabilityWebhooks_Edges struct {
	Node *ObservabilityWebhookFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListObservabilityWebhooks_ObservabilityWebhooks_Edges) GetNode() *ObservabilityWebhookFragment {
	if t == nil {
		t = &ListObservabilityWebhooks_ObservabilityWebhooks_Edges{}
	}
	return t.Node
}

type ListObservabilityWebhooks_ObservabilityWebhooks struct {
	PageInfo PageInfoFragment                                         "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListObservabilityWebhooks_ObservabilityWebhooks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListObservabilityWebhooks_ObservabilityWebhooks) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListObservabilityWebhooks_ObservabilityWebhooks{}
	}
	return &t.PageInfo
}
func (t *ListObservabilityWebhooks_ObservabilityWebhooks) GetEdges() []*ListObservabilityWebhooks_ObservabilityWebhooks_Edges {
	if t == nil {
		t = &ListObservabilityWebhooks_ObservabilityWebhooks{}
	}
	return t.Edges
}

type CreateClusterBackup_CreateClusterBackup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateClusterBackup_CreateClusterBackup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &CreateClusterBackup_CreateClusterBackup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type GetClusterBackup_ClusterBackup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetClusterBackup_ClusterBackup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &GetClusterBackup_ClusterBackup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type UpdateClusterRestore_UpdateClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateClusterRestore_UpdateClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &UpdateClusterRestore_UpdateClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type CreateClusterRestore_CreateClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateClusterRestore_CreateClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &CreateClusterRestore_CreateClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type GetClusterRestore_ClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetClusterRestore_ClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &GetClusterRestore_ClusterRestore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type DeleteBootstrapToken_DeleteBootstrapToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteBootstrapToken_DeleteBootstrapToken) GetID() string {
	if t == nil {
		t = &DeleteBootstrapToken_DeleteBootstrapToken{}
	}
	return t.ID
}

type CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                        "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                        "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                    "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type CreateCluster_CreateCluster struct {
	DeployToken    *string                  "json:\"deployToken,omitempty\" graphql:\"deployToken\""
	ID             string                   "json:\"id\" graphql:\"id\""
	Name           string                   "json:\"name\" graphql:\"name\""
	Handle         *string                  "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool                    "json:\"self,omitempty\" graphql:\"self\""
	Version        *string                  "json:\"version,omitempty\" graphql:\"version\""
	InsertedAt     *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	PingedAt       *string                  "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Protect        *bool                    "json:\"protect,omitempty\" graphql:\"protect\""
	CurrentVersion *string                  "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string                  "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	DeletedAt      *string                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Metadata       map[string]any           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Distro         *ClusterDistro           "json:\"distro,omitempty\" graphql:\"distro\""
	Tags           []*ClusterTags           "json:\"tags,omitempty\" graphql:\"tags\""
	Provider       *ClusterProviderFragment "json:\"provider,omitempty\" graphql:\"provider\""
	NodePools      []*NodePoolFragment      "json:\"nodePools,omitempty\" graphql:\"nodePools\""
	Status         *ClusterStatusFragment   "json:\"status,omitempty\" graphql:\"status\""
	Project        *TinyProjectFragment     "json:\"project,omitempty\" graphql:\"project\""
	WriteBindings  []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	ReadBindings   []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
}

func (t *CreateCluster_CreateCluster) GetDeployToken() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.DeployToken
}
func (t *CreateCluster_CreateCluster) GetID() string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.ID
}
func (t *CreateCluster_CreateCluster) GetName() string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Name
}
func (t *CreateCluster_CreateCluster) GetHandle() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Handle
}
func (t *CreateCluster_CreateCluster) GetSelf() *bool {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Self
}
func (t *CreateCluster_CreateCluster) GetVersion() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Version
}
func (t *CreateCluster_CreateCluster) GetInsertedAt() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.InsertedAt
}
func (t *CreateCluster_CreateCluster) GetPingedAt() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.PingedAt
}
func (t *CreateCluster_CreateCluster) GetProtect() *bool {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Protect
}
func (t *CreateCluster_CreateCluster) GetCurrentVersion() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.CurrentVersion
}
func (t *CreateCluster_CreateCluster) GetKasURL() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.KasURL
}
func (t *CreateCluster_CreateCluster) GetDeletedAt() *string {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.DeletedAt
}
func (t *CreateCluster_CreateCluster) GetMetadata() map[string]any {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Metadata
}
func (t *CreateCluster_CreateCluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Distro
}
func (t *CreateCluster_CreateCluster) GetTags() []*ClusterTags {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Tags
}
func (t *CreateCluster_CreateCluster) GetProvider() *ClusterProviderFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Provider
}
func (t *CreateCluster_CreateCluster) GetNodePools() []*NodePoolFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.NodePools
}
func (t *CreateCluster_CreateCluster) GetStatus() *ClusterStatusFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Status
}
func (t *CreateCluster_CreateCluster) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.Project
}
func (t *CreateCluster_CreateCluster) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.WriteBindings
}
func (t *CreateCluster_CreateCluster) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &CreateCluster_CreateCluster{}
	}
	return t.ReadBindings
}

type UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                        "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                        "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                    "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &UpdateCluster_UpdateCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type DeleteCluster_DeleteCluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteCluster_DeleteCluster) GetID() string {
	if t == nil {
		t = &DeleteCluster_DeleteCluster{}
	}
	return t.ID
}

type DetachCluster_DetachCluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DetachCluster_DetachCluster) GetID() string {
	if t == nil {
		t = &DetachCluster_DetachCluster{}
	}
	return t.ID
}

type CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                               "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                               "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                           "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &CreateClusterProvider_CreateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                               "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                               "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                           "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &UpdateClusterProvider_UpdateClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                               "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                               "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                           "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &DeleteClusterProvider_DeleteClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type PingCluster_PingCluster struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *PingCluster_PingCluster) GetID() string {
	if t == nil {
		t = &PingCluster_PingCluster{}
	}
	return t.ID
}
func (t *PingCluster_PingCluster) GetName() string {
	if t == nil {
		t = &PingCluster_PingCluster{}
	}
	return t.Name
}

type ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                                                 "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                                                 "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                                             "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ListClusters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ListClusters_Clusters struct {
	Edges []*ClusterEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListClusters_Clusters) GetEdges() []*ClusterEdgeFragment {
	if t == nil {
		t = &ListClusters_Clusters{}
	}
	return t.Edges
}

type ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                                                               "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                                                               "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                                                           "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ListClustersWithParameters_Clusters_Edges_ClusterEdgeFragment_Node_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ListClustersWithParameters_Clusters struct {
	PageInfo PageInfoFragment       "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ClusterEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListClustersWithParameters_Clusters) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListClustersWithParameters_Clusters{}
	}
	return &t.PageInfo
}
func (t *ListClustersWithParameters_Clusters) GetEdges() []*ClusterEdgeFragment {
	if t == nil {
		t = &ListClustersWithParameters_Clusters{}
	}
	return t.Edges
}

type GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                               "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                               "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                           "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetCluster_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetAgentUrl_Cluster struct {
	AgentURL *string "json:\"agentUrl,omitempty\" graphql:\"agentUrl\""
}

func (t *GetAgentUrl_Cluster) GetAgentURL() *string {
	if t == nil {
		t = &GetAgentUrl_Cluster{}
	}
	return t.AgentURL
}

type GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                        "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                        "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                    "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetClusterWithToken_Cluster struct {
	ID             string                   "json:\"id\" graphql:\"id\""
	Name           string                   "json:\"name\" graphql:\"name\""
	Handle         *string                  "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool                    "json:\"self,omitempty\" graphql:\"self\""
	Version        *string                  "json:\"version,omitempty\" graphql:\"version\""
	InsertedAt     *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	PingedAt       *string                  "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Protect        *bool                    "json:\"protect,omitempty\" graphql:\"protect\""
	CurrentVersion *string                  "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string                  "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	DeletedAt      *string                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Metadata       map[string]any           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Distro         *ClusterDistro           "json:\"distro,omitempty\" graphql:\"distro\""
	Tags           []*ClusterTags           "json:\"tags,omitempty\" graphql:\"tags\""
	Provider       *ClusterProviderFragment "json:\"provider,omitempty\" graphql:\"provider\""
	NodePools      []*NodePoolFragment      "json:\"nodePools,omitempty\" graphql:\"nodePools\""
	Status         *ClusterStatusFragment   "json:\"status,omitempty\" graphql:\"status\""
	Project        *TinyProjectFragment     "json:\"project,omitempty\" graphql:\"project\""
	WriteBindings  []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	ReadBindings   []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
	DeployToken    *string                  "json:\"deployToken,omitempty\" graphql:\"deployToken\""
}

func (t *GetClusterWithToken_Cluster) GetID() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.ID
}
func (t *GetClusterWithToken_Cluster) GetName() string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Name
}
func (t *GetClusterWithToken_Cluster) GetHandle() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Handle
}
func (t *GetClusterWithToken_Cluster) GetSelf() *bool {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Self
}
func (t *GetClusterWithToken_Cluster) GetVersion() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Version
}
func (t *GetClusterWithToken_Cluster) GetInsertedAt() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.InsertedAt
}
func (t *GetClusterWithToken_Cluster) GetPingedAt() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.PingedAt
}
func (t *GetClusterWithToken_Cluster) GetProtect() *bool {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Protect
}
func (t *GetClusterWithToken_Cluster) GetCurrentVersion() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.CurrentVersion
}
func (t *GetClusterWithToken_Cluster) GetKasURL() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.KasURL
}
func (t *GetClusterWithToken_Cluster) GetDeletedAt() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.DeletedAt
}
func (t *GetClusterWithToken_Cluster) GetMetadata() map[string]any {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Metadata
}
func (t *GetClusterWithToken_Cluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Distro
}
func (t *GetClusterWithToken_Cluster) GetTags() []*ClusterTags {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Tags
}
func (t *GetClusterWithToken_Cluster) GetProvider() *ClusterProviderFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Provider
}
func (t *GetClusterWithToken_Cluster) GetNodePools() []*NodePoolFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.NodePools
}
func (t *GetClusterWithToken_Cluster) GetStatus() *ClusterStatusFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Status
}
func (t *GetClusterWithToken_Cluster) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.Project
}
func (t *GetClusterWithToken_Cluster) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.WriteBindings
}
func (t *GetClusterWithToken_Cluster) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.ReadBindings
}
func (t *GetClusterWithToken_Cluster) GetDeployToken() *string {
	if t == nil {
		t = &GetClusterWithToken_Cluster{}
	}
	return t.DeployToken
}

type GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                       "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                       "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                   "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetClusterByHandle_Cluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                      "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                      "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                  "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetClusterProvider_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                             "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                             "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                         "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetClusterProviderByCloud_ClusterProvider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                        "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                        "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                    "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges_Node_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ListServiceDeployments_ServiceDeployments_Edges struct {
	Node *ServiceDeploymentFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListServiceDeployments_ServiceDeployments_Edges) GetNode() *ServiceDeploymentFragment {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments_Edges{}
	}
	return t.Node
}

type ListServiceDeployments_ServiceDeployments struct {
	Edges []*ListServiceDeployments_ServiceDeployments_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListServiceDeployments_ServiceDeployments) GetEdges() []*ListServiceDeployments_ServiceDeployments_Edges {
	if t == nil {
		t = &ListServiceDeployments_ServiceDeployments{}
	}
	return t.Edges
}

type MyCluster_MyCluster__Restore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *MyCluster_MyCluster__Restore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster) GetID() string {
	if t == nil {
		t = &MyCluster_MyCluster__Restore_ClusterRestoreFragment_Backup_ClusterBackupFragment_Cluster{}
	}
	return t.ID
}

type MyCluster_MyCluster_ struct {
	ID      string                  "json:\"id\" graphql:\"id\""
	Name    string                  "json:\"name\" graphql:\"name\""
	Distro  *ClusterDistro          "json:\"distro,omitempty\" graphql:\"distro\""
	Restore *ClusterRestoreFragment "json:\"restore,omitempty\" graphql:\"restore\""
}

func (t *MyCluster_MyCluster_) GetID() string {
	if t == nil {
		t = &MyCluster_MyCluster_{}
	}
	return t.ID
}
func (t *MyCluster_MyCluster_) GetName() string {
	if t == nil {
		t = &MyCluster_MyCluster_{}
	}
	return t.Name
}
func (t *MyCluster_MyCluster_) GetDistro() *ClusterDistro {
	if t == nil {
		t = &MyCluster_MyCluster_{}
	}
	return t.Distro
}
func (t *MyCluster_MyCluster_) GetRestore() *ClusterRestoreFragment {
	if t == nil {
		t = &MyCluster_MyCluster_{}
	}
	return t.Restore
}

type UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                                      "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                                      "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                                  "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster_ClusterFragment_Provider_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type UpsertVirtualCluster_UpsertVirtualCluster struct {
	DeployToken    *string                  "json:\"deployToken,omitempty\" graphql:\"deployToken\""
	ID             string                   "json:\"id\" graphql:\"id\""
	Name           string                   "json:\"name\" graphql:\"name\""
	Handle         *string                  "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool                    "json:\"self,omitempty\" graphql:\"self\""
	Version        *string                  "json:\"version,omitempty\" graphql:\"version\""
	InsertedAt     *string                  "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	PingedAt       *string                  "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Protect        *bool                    "json:\"protect,omitempty\" graphql:\"protect\""
	CurrentVersion *string                  "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string                  "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	DeletedAt      *string                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	Metadata       map[string]any           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Distro         *ClusterDistro           "json:\"distro,omitempty\" graphql:\"distro\""
	Tags           []*ClusterTags           "json:\"tags,omitempty\" graphql:\"tags\""
	Provider       *ClusterProviderFragment "json:\"provider,omitempty\" graphql:\"provider\""
	NodePools      []*NodePoolFragment      "json:\"nodePools,omitempty\" graphql:\"nodePools\""
	Status         *ClusterStatusFragment   "json:\"status,omitempty\" graphql:\"status\""
	Project        *TinyProjectFragment     "json:\"project,omitempty\" graphql:\"project\""
	WriteBindings  []*PolicyBindingFragment "json:\"writeBindings,omitempty\" graphql:\"writeBindings\""
	ReadBindings   []*PolicyBindingFragment "json:\"readBindings,omitempty\" graphql:\"readBindings\""
}

func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetDeployToken() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.DeployToken
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetID() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.ID
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetName() string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Name
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetHandle() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Handle
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetSelf() *bool {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Self
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetVersion() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Version
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetInsertedAt() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.InsertedAt
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetPingedAt() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.PingedAt
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetProtect() *bool {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Protect
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetCurrentVersion() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.CurrentVersion
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetKasURL() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.KasURL
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetDeletedAt() *string {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.DeletedAt
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetMetadata() map[string]any {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Metadata
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Distro
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetTags() []*ClusterTags {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Tags
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetProvider() *ClusterProviderFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Provider
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetNodePools() []*NodePoolFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.NodePools
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetStatus() *ClusterStatusFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Status
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetProject() *TinyProjectFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.Project
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetWriteBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.WriteBindings
}
func (t *UpsertVirtualCluster_UpsertVirtualCluster) GetReadBindings() []*PolicyBindingFragment {
	if t == nil {
		t = &UpsertVirtualCluster_UpsertVirtualCluster{}
	}
	return t.ReadBindings
}

type GetGlobalServiceDeployment_GlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetGlobalServiceDeployment_GlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &GetGlobalServiceDeployment_GlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type GetGlobalServiceDeployment_GlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetGlobalServiceDeployment_GlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &GetGlobalServiceDeployment_GlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type CreateGlobalServiceDeployment_CreateGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGlobalServiceDeployment_CreateGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &CreateGlobalServiceDeployment_CreateGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type CreateGlobalServiceDeployment_CreateGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGlobalServiceDeployment_CreateGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &CreateGlobalServiceDeployment_CreateGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type CreateGlobalServiceDeploymentFromTemplate_CreateGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGlobalServiceDeploymentFromTemplate_CreateGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &CreateGlobalServiceDeploymentFromTemplate_CreateGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type CreateGlobalServiceDeploymentFromTemplate_CreateGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGlobalServiceDeploymentFromTemplate_CreateGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &CreateGlobalServiceDeploymentFromTemplate_CreateGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type UpdateGlobalServiceDeployment_UpdateGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateGlobalServiceDeployment_UpdateGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &UpdateGlobalServiceDeployment_UpdateGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type UpdateGlobalServiceDeployment_UpdateGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateGlobalServiceDeployment_UpdateGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &UpdateGlobalServiceDeployment_UpdateGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type DeleteGlobalServiceDeployment_DeleteGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteGlobalServiceDeployment_DeleteGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &DeleteGlobalServiceDeployment_DeleteGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type DeleteGlobalServiceDeployment_DeleteGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteGlobalServiceDeployment_DeleteGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &DeleteGlobalServiceDeployment_DeleteGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                             "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                             "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                         "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &CreateServiceDeployment_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                       "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                       "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                   "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle_CreateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &DeleteServiceDeployment_DeleteServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &DetachServiceDeployment_DetachServiceDeployment_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                             "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                             "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                         "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &UpdateServiceDeployment_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                       "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                       "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                   "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle_UpdateServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                       "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                       "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                   "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &CloneServiceDeployment_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                 "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                 "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                             "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle_CloneService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type RollbackService_RollbackService_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type RollbackService_RollbackService_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type RollbackService_RollbackService_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *RollbackService_RollbackService_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &RollbackService_RollbackService_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                   "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                   "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                               "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &UpdateServiceComponents_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                           "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                           "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                       "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &AddServiceError_UpdateServiceComponents_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type UpdateDeploymentSettings_UpdateDeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Openai struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *UpdateDeploymentSettings_UpdateDeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Openai) GetModel() *string {
	if t == nil {
		t = &UpdateDeploymentSettings_UpdateDeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Openai{}
	}
	return t.Model
}

type UpdateDeploymentSettings_UpdateDeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *UpdateDeploymentSettings_UpdateDeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic) GetModel() *string {
	if t == nil {
		t = &UpdateDeploymentSettings_UpdateDeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic{}
	}
	return t.Model
}

type GetDeploymentSettings_DeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Openai struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *GetDeploymentSettings_DeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Openai) GetModel() *string {
	if t == nil {
		t = &GetDeploymentSettings_DeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Openai{}
	}
	return t.Model
}

type GetDeploymentSettings_DeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic struct {
	Model *string "json:\"model,omitempty\" graphql:\"model\""
}

func (t *GetDeploymentSettings_DeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic) GetModel() *string {
	if t == nil {
		t = &GetDeploymentSettings_DeploymentSettings_DeploymentSettingsFragment_Ai_AISettingsFragment_Anthropic{}
	}
	return t.Model
}

type GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                    "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                    "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetServiceDeployment_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetServiceDeploymentComponents_ServiceDeployment_Components struct {
	Kind  string          "json:\"kind\" graphql:\"kind\""
	State *ComponentState "json:\"state,omitempty\" graphql:\"state\""
}

func (t *GetServiceDeploymentComponents_ServiceDeployment_Components) GetKind() string {
	if t == nil {
		t = &GetServiceDeploymentComponents_ServiceDeployment_Components{}
	}
	return t.Kind
}
func (t *GetServiceDeploymentComponents_ServiceDeployment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetServiceDeploymentComponents_ServiceDeployment_Components{}
	}
	return t.State
}

type GetServiceDeploymentComponents_ServiceDeployment struct {
	ID         string                                                         "json:\"id\" graphql:\"id\""
	Components []*GetServiceDeploymentComponents_ServiceDeployment_Components "json:\"components,omitempty\" graphql:\"components\""
}

func (t *GetServiceDeploymentComponents_ServiceDeployment) GetID() string {
	if t == nil {
		t = &GetServiceDeploymentComponents_ServiceDeployment{}
	}
	return t.ID
}
func (t *GetServiceDeploymentComponents_ServiceDeployment) GetComponents() []*GetServiceDeploymentComponents_ServiceDeployment_Components {
	if t == nil {
		t = &GetServiceDeploymentComponents_ServiceDeployment{}
	}
	return t.Components
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster struct {
	ID             string         "json:\"id\" graphql:\"id\""
	Name           string         "json:\"name\" graphql:\"name\""
	Handle         *string        "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool          "json:\"self,omitempty\" graphql:\"self\""
	Version        *string        "json:\"version,omitempty\" graphql:\"version\""
	PingedAt       *string        "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Metadata       map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	CurrentVersion *string        "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string        "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	Distro         *ClusterDistro "json:\"distro,omitempty\" graphql:\"distro\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetID() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.ID
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Name
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetHandle() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Handle
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetSelf() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Self
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetVersion() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Version
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetPingedAt() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.PingedAt
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetMetadata() map[string]any {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Metadata
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetCurrentVersion() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.CurrentVersion
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetKasURL() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.KasURL
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Distro
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm struct {
	Release     *string   "json:\"release,omitempty\" graphql:\"release\""
	ValuesFiles []*string "json:\"valuesFiles,omitempty\" graphql:\"valuesFiles\""
	Values      *string   "json:\"values,omitempty\" graphql:\"values\""
	IgnoreHooks *bool     "json:\"ignoreHooks,omitempty\" graphql:\"ignoreHooks\""
	IgnoreCrds  *bool     "json:\"ignoreCrds,omitempty\" graphql:\"ignoreCrds\""
	LuaScript   *string   "json:\"luaScript,omitempty\" graphql:\"luaScript\""
	LuaFile     *string   "json:\"luaFile,omitempty\" graphql:\"luaFile\""
	LuaFolder   *string   "json:\"luaFolder,omitempty\" graphql:\"luaFolder\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetRelease() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.Release
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetValuesFiles() []*string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.ValuesFiles
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetValues() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.Values
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetIgnoreHooks() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreHooks
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetIgnoreCrds() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreCrds
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetLuaScript() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaScript
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetLuaFile() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFile
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm) GetLuaFolder() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFolder
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Configuration) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Configuration{}
	}
	return t.Name
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Configuration) GetValue() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Configuration{}
	}
	return t.Value
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Contexts struct {
	Name          string         "json:\"name\" graphql:\"name\""
	Configuration map[string]any "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Contexts) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Contexts{}
	}
	return t.Name
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Contexts) GetConfiguration() map[string]any {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Contexts{}
	}
	return t.Configuration
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig struct {
	CreateNamespace   *bool                                                                                                  "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                  "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	DeleteNamespace   *bool                                                                                                  "json:\"deleteNamespace,omitempty\" graphql:\"deleteNamespace\""
	NamespaceMetadata *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                              "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig) GetDeleteNamespace() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DeleteNamespace
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig) GetNamespaceMetadata() *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Revision struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Revision) GetID() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Revision{}
	}
	return t.ID
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack struct {
	ID   *string "json:\"id,omitempty\" graphql:\"id\""
	Name string  "json:\"name\" graphql:\"name\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack) GetID() *string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.ID
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.Name
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs struct {
	Name   string "json:\"name\" graphql:\"name\""
	Value  string "json:\"value\" graphql:\"value\""
	Secret *bool  "json:\"secret,omitempty\" graphql:\"secret\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Name
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs) GetValue() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Value
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs) GetSecret() *bool {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Secret
}

type GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports struct {
	ID      string                                                                                      "json:\"id\" graphql:\"id\""
	Stack   *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack     "json:\"stack,omitempty\" graphql:\"stack\""
	Outputs []*GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs "json:\"outputs,omitempty\" graphql:\"outputs\""
}

func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports) GetID() string {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports{}
	}
	return t.ID
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports) GetStack() *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Stack {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports{}
	}
	return t.Stack
}
func (t *GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports) GetOutputs() []*GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports_Outputs {
	if t == nil {
		t = &GetServiceDeploymentForAgent_ServiceDeployment_ServiceDeploymentForAgent_Imports{}
	}
	return t.Outputs
}

type GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                            "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                            "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                        "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &GetServiceDeploymentByHandle_ServiceDeployment_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ListServiceDeployment_ServiceDeployments struct {
	Edges []*ServiceDeploymentEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListServiceDeployment_ServiceDeployments) GetEdges() []*ServiceDeploymentEdgeFragment {
	if t == nil {
		t = &ListServiceDeployment_ServiceDeployments{}
	}
	return t.Edges
}

type PagedClusterServices_PagedClusterServices struct {
	PageInfo PageInfoFragment                 "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ServiceDeploymentEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PagedClusterServices_PagedClusterServices) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &PagedClusterServices_PagedClusterServices{}
	}
	return &t.PageInfo
}
func (t *PagedClusterServices_PagedClusterServices) GetEdges() []*ServiceDeploymentEdgeFragment {
	if t == nil {
		t = &PagedClusterServices_PagedClusterServices{}
	}
	return t.Edges
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster struct {
	ID             string         "json:\"id\" graphql:\"id\""
	Name           string         "json:\"name\" graphql:\"name\""
	Handle         *string        "json:\"handle,omitempty\" graphql:\"handle\""
	Self           *bool          "json:\"self,omitempty\" graphql:\"self\""
	Version        *string        "json:\"version,omitempty\" graphql:\"version\""
	PingedAt       *string        "json:\"pingedAt,omitempty\" graphql:\"pingedAt\""
	Metadata       map[string]any "json:\"metadata,omitempty\" graphql:\"metadata\""
	CurrentVersion *string        "json:\"currentVersion,omitempty\" graphql:\"currentVersion\""
	KasURL         *string        "json:\"kasUrl,omitempty\" graphql:\"kasUrl\""
	Distro         *ClusterDistro "json:\"distro,omitempty\" graphql:\"distro\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetID() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.ID
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetName() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Name
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetHandle() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Handle
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetSelf() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Self
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetVersion() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Version
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetPingedAt() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.PingedAt
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetMetadata() map[string]any {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Metadata
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetCurrentVersion() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.CurrentVersion
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetKasURL() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.KasURL
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster) GetDistro() *ClusterDistro {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Cluster{}
	}
	return t.Distro
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm struct {
	Release     *string   "json:\"release,omitempty\" graphql:\"release\""
	ValuesFiles []*string "json:\"valuesFiles,omitempty\" graphql:\"valuesFiles\""
	Values      *string   "json:\"values,omitempty\" graphql:\"values\""
	IgnoreHooks *bool     "json:\"ignoreHooks,omitempty\" graphql:\"ignoreHooks\""
	IgnoreCrds  *bool     "json:\"ignoreCrds,omitempty\" graphql:\"ignoreCrds\""
	LuaScript   *string   "json:\"luaScript,omitempty\" graphql:\"luaScript\""
	LuaFile     *string   "json:\"luaFile,omitempty\" graphql:\"luaFile\""
	LuaFolder   *string   "json:\"luaFolder,omitempty\" graphql:\"luaFolder\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetRelease() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.Release
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetValuesFiles() []*string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.ValuesFiles
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetValues() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.Values
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetIgnoreHooks() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreHooks
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetIgnoreCrds() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.IgnoreCrds
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetLuaScript() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaScript
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetLuaFile() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFile
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm) GetLuaFolder() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Helm{}
	}
	return t.LuaFolder
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration) GetName() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration{}
	}
	return t.Name
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration) GetValue() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Configuration{}
	}
	return t.Value
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts struct {
	Name          string         "json:\"name\" graphql:\"name\""
	Configuration map[string]any "json:\"configuration,omitempty\" graphql:\"configuration\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts) GetName() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts{}
	}
	return t.Name
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts) GetConfiguration() map[string]any {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Contexts{}
	}
	return t.Configuration
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                                                      "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                                                      "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	DeleteNamespace   *bool                                                                                                                                                      "json:\"deleteNamespace,omitempty\" graphql:\"deleteNamespace\""
	NamespaceMetadata *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                                                  "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetDeleteNamespace() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DeleteNamespace
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetNamespaceMetadata() *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_SyncConfig{}
	}
	return t.DiffNormalizers
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Revision struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Revision) GetID() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Revision{}
	}
	return t.ID
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack struct {
	ID   *string "json:\"id,omitempty\" graphql:\"id\""
	Name string  "json:\"name\" graphql:\"name\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack) GetID() *string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.ID
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack) GetName() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack{}
	}
	return t.Name
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs struct {
	Name   string "json:\"name\" graphql:\"name\""
	Value  string "json:\"value\" graphql:\"value\""
	Secret *bool  "json:\"secret,omitempty\" graphql:\"secret\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs) GetName() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Name
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs) GetValue() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Value
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs) GetSecret() *bool {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs{}
	}
	return t.Secret
}

type PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports struct {
	ID      string                                                                                                                                          "json:\"id\" graphql:\"id\""
	Stack   *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack     "json:\"stack,omitempty\" graphql:\"stack\""
	Outputs []*PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs "json:\"outputs,omitempty\" graphql:\"outputs\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports) GetID() string {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports{}
	}
	return t.ID
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports) GetStack() *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Stack {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports{}
	}
	return t.Stack
}
func (t *PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports) GetOutputs() []*PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports_Outputs {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices_Edges_ServiceDeploymentEdgeFragmentForAgent_Node_ServiceDeploymentForAgent_Imports{}
	}
	return t.Outputs
}

type PagedClusterServicesForAgent_PagedClusterServices struct {
	PageInfo PageInfoFragment                         "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ServiceDeploymentEdgeFragmentForAgent "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PagedClusterServicesForAgent_PagedClusterServices) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices{}
	}
	return &t.PageInfo
}
func (t *PagedClusterServicesForAgent_PagedClusterServices) GetEdges() []*ServiceDeploymentEdgeFragmentForAgent {
	if t == nil {
		t = &PagedClusterServicesForAgent_PagedClusterServices{}
	}
	return t.Edges
}

type PagedClusterServiceIds_PagedClusterServices struct {
	PageInfo PageInfoFragment                   "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ServiceDeploymentIDEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PagedClusterServiceIds_PagedClusterServices) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &PagedClusterServiceIds_PagedClusterServices{}
	}
	return &t.PageInfo
}
func (t *PagedClusterServiceIds_PagedClusterServices) GetEdges() []*ServiceDeploymentIDEdgeFragment {
	if t == nil {
		t = &PagedClusterServiceIds_PagedClusterServices{}
	}
	return t.Edges
}

type ListServiceDeploymentByHandle_ServiceDeployments struct {
	Edges []*ServiceDeploymentEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListServiceDeploymentByHandle_ServiceDeployments) GetEdges() []*ServiceDeploymentEdgeFragment {
	if t == nil {
		t = &ListServiceDeploymentByHandle_ServiceDeployments{}
	}
	return t.Edges
}

type CreateGlobalService_CreateGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGlobalService_CreateGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &CreateGlobalService_CreateGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type CreateGlobalService_CreateGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGlobalService_CreateGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &CreateGlobalService_CreateGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type UpdateGlobalService_UpdateGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateGlobalService_UpdateGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &UpdateGlobalService_UpdateGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type UpdateGlobalService_UpdateGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateGlobalService_UpdateGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &UpdateGlobalService_UpdateGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type DeleteGlobalService_DeleteGlobalService_GlobalServiceFragment_Provider struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteGlobalService_DeleteGlobalService_GlobalServiceFragment_Provider) GetID() string {
	if t == nil {
		t = &DeleteGlobalService_DeleteGlobalService_GlobalServiceFragment_Provider{}
	}
	return t.ID
}

type DeleteGlobalService_DeleteGlobalService_GlobalServiceFragment_Service struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteGlobalService_DeleteGlobalService_GlobalServiceFragment_Service) GetID() string {
	if t == nil {
		t = &DeleteGlobalService_DeleteGlobalService_GlobalServiceFragment_Service{}
	}
	return t.ID
}

type KickService_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *KickService_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *KickService_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                     "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                     "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                 "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &KickService_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type KickServiceByHandle_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git struct {
	Ref    string "json:\"ref\" graphql:\"ref\""
	Folder string "json:\"folder\" graphql:\"folder\""
}

func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetRef() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Ref
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git) GetFolder() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_Revision_RevisionFragment_Git{}
	}
	return t.Folder
}

type KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                             "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                             "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                         "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &KickServiceByHandle_KickService_ServiceDeploymentExtended_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type GetClusterRegistrations_ClusterRegistrations_Edges struct {
	Node *ClusterRegistrationFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetClusterRegistrations_ClusterRegistrations_Edges) GetNode() *ClusterRegistrationFragment {
	if t == nil {
		t = &GetClusterRegistrations_ClusterRegistrations_Edges{}
	}
	return t.Node
}

type GetClusterRegistrations_ClusterRegistrations struct {
	PageInfo PageInfoFragment                                      "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*GetClusterRegistrations_ClusterRegistrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetClusterRegistrations_ClusterRegistrations) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &GetClusterRegistrations_ClusterRegistrations{}
	}
	return &t.PageInfo
}
func (t *GetClusterRegistrations_ClusterRegistrations) GetEdges() []*GetClusterRegistrations_ClusterRegistrations_Edges {
	if t == nil {
		t = &GetClusterRegistrations_ClusterRegistrations{}
	}
	return t.Edges
}

type GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User) GetID() string {
	if t == nil {
		t = &GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.ID
}
func (t *GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User) GetName() string {
	if t == nil {
		t = &GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.Name
}
func (t *GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User) GetEmail() string {
	if t == nil {
		t = &GetFederatedCredential_FederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.Email
}

type CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User) GetID() string {
	if t == nil {
		t = &CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.ID
}
func (t *CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User) GetName() string {
	if t == nil {
		t = &CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.Name
}
func (t *CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User) GetEmail() string {
	if t == nil {
		t = &CreateFederatedCredential_CreateFederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.Email
}

type DeleteFederatedCredential_DeleteFederatedCredential struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteFederatedCredential_DeleteFederatedCredential) GetID() string {
	if t == nil {
		t = &DeleteFederatedCredential_DeleteFederatedCredential{}
	}
	return t.ID
}

type UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User struct {
	ID    string "json:\"id\" graphql:\"id\""
	Name  string "json:\"name\" graphql:\"name\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User) GetID() string {
	if t == nil {
		t = &UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.ID
}
func (t *UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User) GetName() string {
	if t == nil {
		t = &UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.Name
}
func (t *UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User) GetEmail() string {
	if t == nil {
		t = &UpdateFederatedCredential_UpdateFederatedCredential_FederatedCredentialFragment_User{}
	}
	return t.Email
}

type DeleteFlow_DeleteFlow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteFlow_DeleteFlow) GetID() string {
	if t == nil {
		t = &DeleteFlow_DeleteFlow{}
	}
	return t.ID
}

type GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetClusterGates_ClusterGates_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &PagedClusterGates_PagedClusterGates_Edges_PipelineGateEdgeFragment_Node_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type PagedClusterGates_PagedClusterGates struct {
	PageInfo PageInfoFragment            "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*PipelineGateEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PagedClusterGates_PagedClusterGates) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &PagedClusterGates_PagedClusterGates{}
	}
	return &t.PageInfo
}
func (t *PagedClusterGates_PagedClusterGates) GetEdges() []*PipelineGateEdgeFragment {
	if t == nil {
		t = &PagedClusterGates_PagedClusterGates{}
	}
	return t.Edges
}

type PagedClusterGateIDs_PagedClusterGates_Edges_PipelineGateIDsEdgeFragment_Node_ struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *PagedClusterGateIDs_PagedClusterGates_Edges_PipelineGateIDsEdgeFragment_Node_) GetID() string {
	if t == nil {
		t = &PagedClusterGateIDs_PagedClusterGates_Edges_PipelineGateIDsEdgeFragment_Node_{}
	}
	return t.ID
}

type PagedClusterGateIDs_PagedClusterGates struct {
	PageInfo PageInfoFragment               "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*PipelineGateIDsEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *PagedClusterGateIDs_PagedClusterGates) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &PagedClusterGateIDs_PagedClusterGates{}
	}
	return &t.PageInfo
}
func (t *PagedClusterGateIDs_PagedClusterGates) GetEdges() []*PipelineGateIDsEdgeFragment {
	if t == nil {
		t = &PagedClusterGateIDs_PagedClusterGates{}
	}
	return t.Edges
}

type UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &UpdateGate_UpdateGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetClusterGate_ClusterGate_PipelineGateFragment_Spec_GateSpecFragment_Job_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListGitRepositories_GitRepositories struct {
	Edges []*GitRepositoryEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListGitRepositories_GitRepositories) GetEdges() []*GitRepositoryEdgeFragment {
	if t == nil {
		t = &ListGitRepositories_GitRepositories{}
	}
	return t.Edges
}

type ListScmConnections_ScmConnections_Edges struct {
	Node   *ScmConnectionFragment "json:\"node,omitempty\" graphql:\"node\""
	Cursor *string                "json:\"cursor,omitempty\" graphql:\"cursor\""
}

func (t *ListScmConnections_ScmConnections_Edges) GetNode() *ScmConnectionFragment {
	if t == nil {
		t = &ListScmConnections_ScmConnections_Edges{}
	}
	return t.Node
}
func (t *ListScmConnections_ScmConnections_Edges) GetCursor() *string {
	if t == nil {
		t = &ListScmConnections_ScmConnections_Edges{}
	}
	return t.Cursor
}

type ListScmConnections_ScmConnections struct {
	Edges []*ListScmConnections_ScmConnections_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListScmConnections_ScmConnections) GetEdges() []*ListScmConnections_ScmConnections_Edges {
	if t == nil {
		t = &ListScmConnections_ScmConnections{}
	}
	return t.Edges
}

type ListPrAutomations_PrAutomations_Edges struct {
	Node   *PrAutomationFragment "json:\"node,omitempty\" graphql:\"node\""
	Cursor *string               "json:\"cursor,omitempty\" graphql:\"cursor\""
}

func (t *ListPrAutomations_PrAutomations_Edges) GetNode() *PrAutomationFragment {
	if t == nil {
		t = &ListPrAutomations_PrAutomations_Edges{}
	}
	return t.Node
}
func (t *ListPrAutomations_PrAutomations_Edges) GetCursor() *string {
	if t == nil {
		t = &ListPrAutomations_PrAutomations_Edges{}
	}
	return t.Cursor
}

type ListPrAutomations_PrAutomations struct {
	Edges []*ListPrAutomations_PrAutomations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListPrAutomations_PrAutomations) GetEdges() []*ListPrAutomations_PrAutomations_Edges {
	if t == nil {
		t = &ListPrAutomations_PrAutomations{}
	}
	return t.Edges
}

type ListHelmRepositories_HelmRepositories_Edges struct {
	Node *HelmRepositoryFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListHelmRepositories_HelmRepositories_Edges) GetNode() *HelmRepositoryFragment {
	if t == nil {
		t = &ListHelmRepositories_HelmRepositories_Edges{}
	}
	return t.Node
}

type ListHelmRepositories_HelmRepositories struct {
	PageInfo PageInfoFragment                               "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListHelmRepositories_HelmRepositories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListHelmRepositories_HelmRepositories) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListHelmRepositories_HelmRepositories{}
	}
	return &t.PageInfo
}
func (t *ListHelmRepositories_HelmRepositories) GetEdges() []*ListHelmRepositories_HelmRepositories_Edges {
	if t == nil {
		t = &ListHelmRepositories_HelmRepositories{}
	}
	return t.Edges
}

type GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers) GetName() string {
	if t == nil {
		t = &GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers{}
	}
	return t.Name
}
func (t *GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers) GetValue() string {
	if t == nil {
		t = &GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers{}
	}
	return t.Value
}

type GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication struct {
	Plural  *bool                                                                           "json:\"plural,omitempty\" graphql:\"plural\""
	Headers []*GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers "json:\"headers,omitempty\" graphql:\"headers\""
}

func (t *GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication) GetPlural() *bool {
	if t == nil {
		t = &GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication{}
	}
	return t.Plural
}
func (t *GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication) GetHeaders() []*GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication_Headers {
	if t == nil {
		t = &GetMCPServers_McpServers_Edges_Node_MCPServerFragment_Authentication{}
	}
	return t.Headers
}

type GetMCPServers_McpServers_Edges struct {
	Node *MCPServerFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetMCPServers_McpServers_Edges) GetNode() *MCPServerFragment {
	if t == nil {
		t = &GetMCPServers_McpServers_Edges{}
	}
	return t.Node
}

type GetMCPServers_McpServers struct {
	PageInfo PageInfoFragment                  "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*GetMCPServers_McpServers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetMCPServers_McpServers) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &GetMCPServers_McpServers{}
	}
	return &t.PageInfo
}
func (t *GetMCPServers_McpServers) GetEdges() []*GetMCPServers_McpServers_Edges {
	if t == nil {
		t = &GetMCPServers_McpServers{}
	}
	return t.Edges
}

type GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers) GetName() string {
	if t == nil {
		t = &GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers{}
	}
	return t.Name
}
func (t *GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers) GetValue() string {
	if t == nil {
		t = &GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers{}
	}
	return t.Value
}

type GetMCPServer_McpServer_MCPServerFragment_Authentication struct {
	Plural  *bool                                                              "json:\"plural,omitempty\" graphql:\"plural\""
	Headers []*GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers "json:\"headers,omitempty\" graphql:\"headers\""
}

func (t *GetMCPServer_McpServer_MCPServerFragment_Authentication) GetPlural() *bool {
	if t == nil {
		t = &GetMCPServer_McpServer_MCPServerFragment_Authentication{}
	}
	return t.Plural
}
func (t *GetMCPServer_McpServer_MCPServerFragment_Authentication) GetHeaders() []*GetMCPServer_McpServer_MCPServerFragment_Authentication_Headers {
	if t == nil {
		t = &GetMCPServer_McpServer_MCPServerFragment_Authentication{}
	}
	return t.Headers
}

type UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers) GetName() string {
	if t == nil {
		t = &UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers{}
	}
	return t.Name
}
func (t *UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers) GetValue() string {
	if t == nil {
		t = &UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers{}
	}
	return t.Value
}

type UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication struct {
	Plural  *bool                                                                       "json:\"plural,omitempty\" graphql:\"plural\""
	Headers []*UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers "json:\"headers,omitempty\" graphql:\"headers\""
}

func (t *UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication) GetPlural() *bool {
	if t == nil {
		t = &UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication{}
	}
	return t.Plural
}
func (t *UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication) GetHeaders() []*UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication_Headers {
	if t == nil {
		t = &UpsertMCPServer_UpsertMcpServer_MCPServerFragment_Authentication{}
	}
	return t.Headers
}

type DeleteMCPServer_DeleteMcpServer struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteMCPServer_DeleteMcpServer) GetID() string {
	if t == nil {
		t = &DeleteMCPServer_DeleteMcpServer{}
	}
	return t.ID
}

type ListNamespaces_ManagedNamespaces struct {
	PageInfo PageInfoFragment                "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ManagedNamespaceEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListNamespaces_ManagedNamespaces) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListNamespaces_ManagedNamespaces{}
	}
	return &t.PageInfo
}
func (t *ListNamespaces_ManagedNamespaces) GetEdges() []*ManagedNamespaceEdgeFragment {
	if t == nil {
		t = &ListNamespaces_ManagedNamespaces{}
	}
	return t.Edges
}

type ListClusterNamespaces_ClusterManagedNamespaces struct {
	PageInfo PageInfoFragment                "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ManagedNamespaceEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListClusterNamespaces_ClusterManagedNamespaces) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListClusterNamespaces_ClusterManagedNamespaces{}
	}
	return &t.PageInfo
}
func (t *ListClusterNamespaces_ClusterManagedNamespaces) GetEdges() []*ManagedNamespaceEdgeFragment {
	if t == nil {
		t = &ListClusterNamespaces_ClusterManagedNamespaces{}
	}
	return t.Edges
}

type DeleteNamespace_DeleteManagedNamespace struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteNamespace_DeleteManagedNamespace) GetID() string {
	if t == nil {
		t = &DeleteNamespace_DeleteManagedNamespace{}
	}
	return t.ID
}

type ListNotificationSinks_NotificationSinks struct {
	PageInfo PageInfoFragment                "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*NotificationSinkEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListNotificationSinks_NotificationSinks) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListNotificationSinks_NotificationSinks{}
	}
	return &t.PageInfo
}
func (t *ListNotificationSinks_NotificationSinks) GetEdges() []*NotificationSinkEdgeFragment {
	if t == nil {
		t = &ListNotificationSinks_NotificationSinks{}
	}
	return t.Edges
}

type ListObservabilityProviders_ObservabilityProviders_Edges struct {
	Node *ObservabilityProviderFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListObservabilityProviders_ObservabilityProviders_Edges) GetNode() *ObservabilityProviderFragment {
	if t == nil {
		t = &ListObservabilityProviders_ObservabilityProviders_Edges{}
	}
	return t.Node
}

type ListObservabilityProviders_ObservabilityProviders struct {
	PageInfo PageInfoFragment                                           "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListObservabilityProviders_ObservabilityProviders_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListObservabilityProviders_ObservabilityProviders) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListObservabilityProviders_ObservabilityProviders{}
	}
	return &t.PageInfo
}
func (t *ListObservabilityProviders_ObservabilityProviders) GetEdges() []*ListObservabilityProviders_ObservabilityProviders_Edges {
	if t == nil {
		t = &ListObservabilityProviders_ObservabilityProviders{}
	}
	return t.Edges
}

type GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments struct {
	AddOns       *bool "json:\"addOns,omitempty\" graphql:\"addOns\""
	Clusters     *bool "json:\"clusters,omitempty\" graphql:\"clusters\""
	Pipelines    *bool "json:\"pipelines,omitempty\" graphql:\"pipelines\""
	Providers    *bool "json:\"providers,omitempty\" graphql:\"providers\""
	Repositories *bool "json:\"repositories,omitempty\" graphql:\"repositories\""
	Services     *bool "json:\"services,omitempty\" graphql:\"services\""
}

func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetAddOns() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.AddOns
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetClusters() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Clusters
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetPipelines() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Pipelines
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetProviders() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Providers
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetRepositories() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Repositories
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetServices() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Services
}

type GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home struct {
	Manager  *bool "json:\"manager,omitempty\" graphql:\"manager\""
	Security *bool "json:\"security,omitempty\" graphql:\"security\""
}

func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetManager() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Manager
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetSecurity() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Security
}

type GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar struct {
	Audits       *bool "json:\"audits,omitempty\" graphql:\"audits\""
	Kubernetes   *bool "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
	PullRequests *bool "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
	Settings     *bool "json:\"settings,omitempty\" graphql:\"settings\""
	Backups      *bool "json:\"backups,omitempty\" graphql:\"backups\""
	Stacks       *bool "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetAudits() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Audits
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetKubernetes() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Kubernetes
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetPullRequests() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.PullRequests
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetSettings() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Settings
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetBackups() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Backups
}
func (t *GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetStacks() *bool {
	if t == nil {
		t = &GetPersona_Persona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Stacks
}

type CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments struct {
	AddOns       *bool "json:\"addOns,omitempty\" graphql:\"addOns\""
	Clusters     *bool "json:\"clusters,omitempty\" graphql:\"clusters\""
	Pipelines    *bool "json:\"pipelines,omitempty\" graphql:\"pipelines\""
	Providers    *bool "json:\"providers,omitempty\" graphql:\"providers\""
	Repositories *bool "json:\"repositories,omitempty\" graphql:\"repositories\""
	Services     *bool "json:\"services,omitempty\" graphql:\"services\""
}

func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetAddOns() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.AddOns
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetClusters() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Clusters
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetPipelines() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Pipelines
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetProviders() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Providers
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetRepositories() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Repositories
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetServices() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Services
}

type CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home struct {
	Manager  *bool "json:\"manager,omitempty\" graphql:\"manager\""
	Security *bool "json:\"security,omitempty\" graphql:\"security\""
}

func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetManager() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Manager
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetSecurity() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Security
}

type CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar struct {
	Audits       *bool "json:\"audits,omitempty\" graphql:\"audits\""
	Kubernetes   *bool "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
	PullRequests *bool "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
	Settings     *bool "json:\"settings,omitempty\" graphql:\"settings\""
	Backups      *bool "json:\"backups,omitempty\" graphql:\"backups\""
	Stacks       *bool "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetAudits() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Audits
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetKubernetes() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Kubernetes
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetPullRequests() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.PullRequests
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetSettings() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Settings
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetBackups() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Backups
}
func (t *CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetStacks() *bool {
	if t == nil {
		t = &CreatePersona_CreatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Stacks
}

type UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments struct {
	AddOns       *bool "json:\"addOns,omitempty\" graphql:\"addOns\""
	Clusters     *bool "json:\"clusters,omitempty\" graphql:\"clusters\""
	Pipelines    *bool "json:\"pipelines,omitempty\" graphql:\"pipelines\""
	Providers    *bool "json:\"providers,omitempty\" graphql:\"providers\""
	Repositories *bool "json:\"repositories,omitempty\" graphql:\"repositories\""
	Services     *bool "json:\"services,omitempty\" graphql:\"services\""
}

func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetAddOns() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.AddOns
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetClusters() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Clusters
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetPipelines() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Pipelines
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetProviders() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Providers
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetRepositories() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Repositories
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetServices() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Services
}

type UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home struct {
	Manager  *bool "json:\"manager,omitempty\" graphql:\"manager\""
	Security *bool "json:\"security,omitempty\" graphql:\"security\""
}

func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetManager() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Manager
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetSecurity() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Security
}

type UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar struct {
	Audits       *bool "json:\"audits,omitempty\" graphql:\"audits\""
	Kubernetes   *bool "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
	PullRequests *bool "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
	Settings     *bool "json:\"settings,omitempty\" graphql:\"settings\""
	Backups      *bool "json:\"backups,omitempty\" graphql:\"backups\""
	Stacks       *bool "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetAudits() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Audits
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetKubernetes() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Kubernetes
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetPullRequests() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.PullRequests
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetSettings() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Settings
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetBackups() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Backups
}
func (t *UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetStacks() *bool {
	if t == nil {
		t = &UpdatePersona_UpdatePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Stacks
}

type DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments struct {
	AddOns       *bool "json:\"addOns,omitempty\" graphql:\"addOns\""
	Clusters     *bool "json:\"clusters,omitempty\" graphql:\"clusters\""
	Pipelines    *bool "json:\"pipelines,omitempty\" graphql:\"pipelines\""
	Providers    *bool "json:\"providers,omitempty\" graphql:\"providers\""
	Repositories *bool "json:\"repositories,omitempty\" graphql:\"repositories\""
	Services     *bool "json:\"services,omitempty\" graphql:\"services\""
}

func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetAddOns() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.AddOns
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetClusters() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Clusters
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetPipelines() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Pipelines
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetProviders() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Providers
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetRepositories() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Repositories
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments) GetServices() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Deployments{}
	}
	return t.Services
}

type DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home struct {
	Manager  *bool "json:\"manager,omitempty\" graphql:\"manager\""
	Security *bool "json:\"security,omitempty\" graphql:\"security\""
}

func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetManager() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Manager
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home) GetSecurity() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Home{}
	}
	return t.Security
}

type DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar struct {
	Audits       *bool "json:\"audits,omitempty\" graphql:\"audits\""
	Kubernetes   *bool "json:\"kubernetes,omitempty\" graphql:\"kubernetes\""
	PullRequests *bool "json:\"pullRequests,omitempty\" graphql:\"pullRequests\""
	Settings     *bool "json:\"settings,omitempty\" graphql:\"settings\""
	Backups      *bool "json:\"backups,omitempty\" graphql:\"backups\""
	Stacks       *bool "json:\"stacks,omitempty\" graphql:\"stacks\""
}

func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetAudits() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Audits
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetKubernetes() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Kubernetes
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetPullRequests() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.PullRequests
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetSettings() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Settings
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetBackups() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Backups
}
func (t *DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar) GetStacks() *bool {
	if t == nil {
		t = &DeletePersona_DeletePersona_PersonaFragment_Configuration_PersonaConfigurationFragment_Sidebar{}
	}
	return t.Stacks
}

type GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                                                          "json:\"service,omitempty\" graphql:\"service\""
	Criteria *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services) GetCriteria() *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Stages_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                                                                                        "json:\"service,omitempty\" graphql:\"service\""
	Criteria *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services) GetCriteria() *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_From_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria struct {
	Source  *ServiceDeploymentBaseFragment "json:\"source,omitempty\" graphql:\"source\""
	Secrets []*string                      "json:\"secrets,omitempty\" graphql:\"secrets\""
}

func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSource() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Source
}
func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria) GetSecrets() []*string {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria{}
	}
	return t.Secrets
}

type GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services struct {
	Service  *ServiceDeploymentBaseFragment                                                                                                                      "json:\"service,omitempty\" graphql:\"service\""
	Criteria *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria "json:\"criteria,omitempty\" graphql:\"criteria\""
}

func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetService() *ServiceDeploymentBaseFragment {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Service
}
func (t *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services) GetCriteria() *GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services_Criteria {
	if t == nil {
		t = &GetPipelines_Pipelines_Edges_PipelineEdgeFragment_Node_PipelineFragment_Edges_PipelineStageEdgeFragment_To_PipelineStageFragment_Services{}
	}
	return t.Criteria
}

type GetPipelines_Pipelines struct {
	Edges []*PipelineEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetPipelines_Pipelines) GetEdges() []*PipelineEdgeFragment {
	if t == nil {
		t = &GetPipelines_Pipelines{}
	}
	return t.Edges
}

type ListComplianceReportGenerators_ComplianceReportGenerators_Edges struct {
	Node *ComplianceReportGeneratorFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListComplianceReportGenerators_ComplianceReportGenerators_Edges) GetNode() *ComplianceReportGeneratorFragment {
	if t == nil {
		t = &ListComplianceReportGenerators_ComplianceReportGenerators_Edges{}
	}
	return t.Node
}

type ListComplianceReportGenerators_ComplianceReportGenerators struct {
	PageInfo PageInfoFragment                                                   "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListComplianceReportGenerators_ComplianceReportGenerators_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListComplianceReportGenerators_ComplianceReportGenerators) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListComplianceReportGenerators_ComplianceReportGenerators{}
	}
	return &t.PageInfo
}
func (t *ListComplianceReportGenerators_ComplianceReportGenerators) GetEdges() []*ListComplianceReportGenerators_ComplianceReportGenerators_Edges {
	if t == nil {
		t = &ListComplianceReportGenerators_ComplianceReportGenerators{}
	}
	return t.Edges
}

type GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Flow) GetID() string {
	if t == nil {
		t = &GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Flow{}
	}
	return t.ID
}

type GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Connection struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Connection) GetID() string {
	if t == nil {
		t = &GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Connection{}
	}
	return t.ID
}

type GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Template struct {
	Name *string "json:\"name,omitempty\" graphql:\"name\""
}

func (t *GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Template) GetName() *string {
	if t == nil {
		t = &GetPreviewEnvironmentTemplate_PreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Template{}
	}
	return t.Name
}

type UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Flow) GetID() string {
	if t == nil {
		t = &UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Flow{}
	}
	return t.ID
}

type UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Connection struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Connection) GetID() string {
	if t == nil {
		t = &UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Connection{}
	}
	return t.ID
}

type UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Template struct {
	Name *string "json:\"name,omitempty\" graphql:\"name\""
}

func (t *UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Template) GetName() *string {
	if t == nil {
		t = &UpsertPreviewEnvironmentTemplate_UpsertPreviewEnvironmentTemplate_PreviewEnvironmentTemplateFragment_Template{}
	}
	return t.Name
}

type DeletePreviewEnvironmentTemplate_DeletePreviewEnvironmentTemplate struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeletePreviewEnvironmentTemplate_DeletePreviewEnvironmentTemplate) GetID() string {
	if t == nil {
		t = &DeletePreviewEnvironmentTemplate_DeletePreviewEnvironmentTemplate{}
	}
	return t.ID
}

type ListProjects_Projects_Edges struct {
	Node *ProjectFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListProjects_Projects_Edges) GetNode() *ProjectFragment {
	if t == nil {
		t = &ListProjects_Projects_Edges{}
	}
	return t.Node
}

type ListProjects_Projects struct {
	PageInfo PageInfoFragment               "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListProjects_Projects_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListProjects_Projects) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListProjects_Projects{}
	}
	return &t.PageInfo
}
func (t *ListProjects_Projects) GetEdges() []*ListProjects_Projects_Edges {
	if t == nil {
		t = &ListProjects_Projects{}
	}
	return t.Edges
}

type ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components struct {
	ID        string                    "json:\"id\" graphql:\"id\""
	UID       *string                   "json:\"uid,omitempty\" graphql:\"uid\""
	Name      string                    "json:\"name\" graphql:\"name\""
	Group     *string                   "json:\"group,omitempty\" graphql:\"group\""
	Kind      string                    "json:\"kind\" graphql:\"kind\""
	Namespace *string                   "json:\"namespace,omitempty\" graphql:\"namespace\""
	State     *ComponentState           "json:\"state,omitempty\" graphql:\"state\""
	Synced    bool                      "json:\"synced\" graphql:\"synced\""
	Version   *string                   "json:\"version,omitempty\" graphql:\"version\""
	Content   *ComponentContentFragment "json:\"content,omitempty\" graphql:\"content\""
}

func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetID() string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.ID
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetUID() *string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.UID
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetName() string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Name
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetGroup() *string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Group
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetKind() string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Kind
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetNamespace() *string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Namespace
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetState() *ComponentState {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.State
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetSynced() bool {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Synced
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetVersion() *string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Version
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components) GetContent() *ComponentContentFragment {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Components{}
	}
	return t.Content
}

type ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetName() string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Name
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration) GetValue() string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Configuration{}
	}
	return t.Value
}

type ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow) GetID() string {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_Flow{}
	}
	return t.ID
}

type ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata struct {
	Labels      map[string]any "json:\"labels,omitempty\" graphql:\"labels\""
	Annotations map[string]any "json:\"annotations,omitempty\" graphql:\"annotations\""
}

func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetLabels() map[string]any {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Labels
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata) GetAnnotations() map[string]any {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata{}
	}
	return t.Annotations
}

type ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig struct {
	CreateNamespace   *bool                                                                                                                             "json:\"createNamespace,omitempty\" graphql:\"createNamespace\""
	EnforceNamespace  *bool                                                                                                                             "json:\"enforceNamespace,omitempty\" graphql:\"enforceNamespace\""
	NamespaceMetadata *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata "json:\"namespaceMetadata,omitempty\" graphql:\"namespaceMetadata\""
	DiffNormalizers   []*DiffNormalizerFragment                                                                                                         "json:\"diffNormalizers,omitempty\" graphql:\"diffNormalizers\""
}

func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetCreateNamespace() *bool {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.CreateNamespace
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetEnforceNamespace() *bool {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.EnforceNamespace
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetNamespaceMetadata() *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig_NamespaceMetadata {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.NamespaceMetadata
}
func (t *ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig) GetDiffNormalizers() []*DiffNormalizerFragment {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges_Node_ClusterProviderFragment_Service_ServiceDeploymentFragment_SyncConfig{}
	}
	return t.DiffNormalizers
}

type ListProviders_ClusterProviders_Edges struct {
	Node *ClusterProviderFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListProviders_ClusterProviders_Edges) GetNode() *ClusterProviderFragment {
	if t == nil {
		t = &ListProviders_ClusterProviders_Edges{}
	}
	return t.Node
}

type ListProviders_ClusterProviders struct {
	Edges []*ListProviders_ClusterProviders_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListProviders_ClusterProviders) GetEdges() []*ListProviders_ClusterProviders_Edges {
	if t == nil {
		t = &ListProviders_ClusterProviders{}
	}
	return t.Edges
}

type CreateSentinel_CreateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *CreateSentinel_CreateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &CreateSentinel_CreateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *CreateSentinel_CreateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &CreateSentinel_CreateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type UpdateSentinel_UpdateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *UpdateSentinel_UpdateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &UpdateSentinel_UpdateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *UpdateSentinel_UpdateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &UpdateSentinel_UpdateSentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type DeleteSentinel_DeleteSentinel struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteSentinel_DeleteSentinel) GetID() string {
	if t == nil {
		t = &DeleteSentinel_DeleteSentinel{}
	}
	return t.ID
}

type GetSentinel_Sentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets struct {
	Key   string  "json:\"key\" graphql:\"key\""
	Value *string "json:\"value,omitempty\" graphql:\"value\""
}

func (t *GetSentinel_Sentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetKey() string {
	if t == nil {
		t = &GetSentinel_Sentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Key
}
func (t *GetSentinel_Sentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets) GetValue() *string {
	if t == nil {
		t = &GetSentinel_Sentinel_SentinelFragment_Checks_SentinelCheckFragment_Configuration_SentinelCheckConfigurationFragment_Log_SentinelCheckLogConfigurationFragment_Facets{}
	}
	return t.Value
}

type ServiceAccounts_ServiceAccounts_Edges struct {
	Node *UserFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ServiceAccounts_ServiceAccounts_Edges) GetNode() *UserFragment {
	if t == nil {
		t = &ServiceAccounts_ServiceAccounts_Edges{}
	}
	return t.Node
}

type ServiceAccounts_ServiceAccounts struct {
	PageInfo PageInfoFragment                         "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ServiceAccounts_ServiceAccounts_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ServiceAccounts_ServiceAccounts) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ServiceAccounts_ServiceAccounts{}
	}
	return &t.PageInfo
}
func (t *ServiceAccounts_ServiceAccounts) GetEdges() []*ServiceAccounts_ServiceAccounts_Edges {
	if t == nil {
		t = &ServiceAccounts_ServiceAccounts{}
	}
	return t.Edges
}

type ShareSecret_ShareSecret struct {
	Name       string  "json:\"name\" graphql:\"name\""
	Handle     string  "json:\"handle\" graphql:\"handle\""
	Secret     string  "json:\"secret\" graphql:\"secret\""
	InsertedAt *string "json:\"insertedAt,omitempty\" graphql:\"insertedAt\""
	UpdatedAt  *string "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *ShareSecret_ShareSecret) GetName() string {
	if t == nil {
		t = &ShareSecret_ShareSecret{}
	}
	return t.Name
}
func (t *ShareSecret_ShareSecret) GetHandle() string {
	if t == nil {
		t = &ShareSecret_ShareSecret{}
	}
	return t.Handle
}
func (t *ShareSecret_ShareSecret) GetSecret() string {
	if t == nil {
		t = &ShareSecret_ShareSecret{}
	}
	return t.Secret
}
func (t *ShareSecret_ShareSecret) GetInsertedAt() *string {
	if t == nil {
		t = &ShareSecret_ShareSecret{}
	}
	return t.InsertedAt
}
func (t *ShareSecret_ShareSecret) GetUpdatedAt() *string {
	if t == nil {
		t = &ShareSecret_ShareSecret{}
	}
	return t.UpdatedAt
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls struct {
	Terraform *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls) GetTerraform() *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns_Edges_StackRunEdgeFragment_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type ListClusterStacks_ClusterStackRuns struct {
	PageInfo PageInfoFragment        "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*StackRunEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListClusterStacks_ClusterStackRuns) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns{}
	}
	return &t.PageInfo
}
func (t *ListClusterStacks_ClusterStackRuns) GetEdges() []*StackRunEdgeFragment {
	if t == nil {
		t = &ListClusterStacks_ClusterStackRuns{}
	}
	return t.Edges
}

type ListClusterStackIds_ClusterStackRuns struct {
	PageInfo PageInfoFragment          "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*StackRunIDEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListClusterStackIds_ClusterStackRuns) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListClusterStackIds_ClusterStackRuns{}
	}
	return &t.PageInfo
}
func (t *ListClusterStackIds_ClusterStackRuns) GetEdges() []*StackRunIDEdgeFragment {
	if t == nil {
		t = &ListClusterStackIds_ClusterStackRuns{}
	}
	return t.Edges
}

type ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns_Edges_MinimalStackRunEdgeFragment_Node_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type ListClusterMinimalStacks_ClusterStackRuns struct {
	PageInfo PageInfoFragment               "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*MinimalStackRunEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListClusterMinimalStacks_ClusterStackRuns) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns{}
	}
	return &t.PageInfo
}
func (t *ListClusterMinimalStacks_ClusterStackRuns) GetEdges() []*MinimalStackRunEdgeFragment {
	if t == nil {
		t = &ListClusterMinimalStacks_ClusterStackRuns{}
	}
	return t.Edges
}

type ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks_Edges_InfrastructureStackEdgeFragment_Node_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type ListInfrastructureStacks_InfrastructureStacks struct {
	PageInfo PageInfoFragment                   "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*InfrastructureStackEdgeFragment "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListInfrastructureStacks_InfrastructureStacks) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks{}
	}
	return &t.PageInfo
}
func (t *ListInfrastructureStacks_InfrastructureStacks) GetEdges() []*InfrastructureStackEdgeFragment {
	if t == nil {
		t = &ListInfrastructureStacks_InfrastructureStacks{}
	}
	return t.Edges
}

type GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetStackRunMinimal_StackRun_StackRunMinimalFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetStackRunMinimal_StackRun_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *GetStackRunMinimal_StackRun_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &GetStackRunMinimal_StackRun_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *GetStackRunMinimal_StackRun_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &GetStackRunMinimal_StackRun_StackRunMinimalFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls struct {
	Terraform *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls) GetTerraform() *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &GetStackRun_StackRun_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls struct {
	Terraform *GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls) GetTerraform() *GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type GetStackRunBase_StackRun_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetStackRunBase_StackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *GetStackRunBase_StackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &GetStackRunBase_StackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls struct {
	Terraform *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls) GetTerraform() *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &UpdateStackRun_UpdateStackRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &CreateStack_CreateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type CreateStack_CreateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *CreateStack_CreateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &CreateStack_CreateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *CreateStack_CreateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &CreateStack_CreateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &UpdateStack_UpdateStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type UpdateStack_UpdateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *UpdateStack_UpdateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &UpdateStack_UpdateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *UpdateStack_UpdateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &UpdateStack_UpdateStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &GetInfrastructureStack_InfrastructureStack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type AddStackRunLogs_AddRunLogs struct {
	UpdatedAt *string "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *AddStackRunLogs_AddRunLogs) GetUpdatedAt() *string {
	if t == nil {
		t = &AddStackRunLogs_AddRunLogs{}
	}
	return t.UpdatedAt
}

type UpdateCustomStackRun_UpdateCustomStackRun_CustomStackRunFragment_Stack struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *UpdateCustomStackRun_UpdateCustomStackRun_CustomStackRunFragment_Stack) GetID() *string {
	if t == nil {
		t = &UpdateCustomStackRun_UpdateCustomStackRun_CustomStackRunFragment_Stack{}
	}
	return t.ID
}

type CreateCustomStackRun_CreateCustomStackRun_CustomStackRunFragment_Stack struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *CreateCustomStackRun_CreateCustomStackRun_CustomStackRunFragment_Stack) GetID() *string {
	if t == nil {
		t = &CreateCustomStackRun_CreateCustomStackRun_CustomStackRunFragment_Stack{}
	}
	return t.ID
}

type DeleteCustomStackRun_DeleteCustomStackRun_CustomStackRunFragment_Stack struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *DeleteCustomStackRun_DeleteCustomStackRun_CustomStackRunFragment_Stack) GetID() *string {
	if t == nil {
		t = &DeleteCustomStackRun_DeleteCustomStackRun_CustomStackRunFragment_Stack{}
	}
	return t.ID
}

type GetCustomStackRun_CustomStackRun_CustomStackRunFragment_Stack struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *GetCustomStackRun_CustomStackRun_CustomStackRunFragment_Stack) GetID() *string {
	if t == nil {
		t = &GetCustomStackRun_CustomStackRun_CustomStackRunFragment_Stack{}
	}
	return t.ID
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls struct {
	Terraform *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls) GetTerraform() *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges_Node_StackRunFragment_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type ListStackRuns_InfrastructureStack_Runs_Edges struct {
	Node *StackRunFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListStackRuns_InfrastructureStack_Runs_Edges) GetNode() *StackRunFragment {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs_Edges{}
	}
	return t.Node
}

type ListStackRuns_InfrastructureStack_Runs struct {
	PageInfo PageInfoFragment                                "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListStackRuns_InfrastructureStack_Runs_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListStackRuns_InfrastructureStack_Runs) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs{}
	}
	return &t.PageInfo
}
func (t *ListStackRuns_InfrastructureStack_Runs) GetEdges() []*ListStackRuns_InfrastructureStack_Runs_Edges {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack_Runs{}
	}
	return t.Edges
}

type ListStackRuns_InfrastructureStack struct {
	Runs *ListStackRuns_InfrastructureStack_Runs "json:\"runs,omitempty\" graphql:\"runs\""
}

func (t *ListStackRuns_InfrastructureStack) GetRuns() *ListStackRuns_InfrastructureStack_Runs {
	if t == nil {
		t = &ListStackRuns_InfrastructureStack{}
	}
	return t.Runs
}

type TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform struct {
	Address *string "json:\"address,omitempty\" graphql:\"address\""
	Lock    *string "json:\"lock,omitempty\" graphql:\"lock\""
	Unlock  *string "json:\"unlock,omitempty\" graphql:\"unlock\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform) GetAddress() *string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Address
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform) GetLock() *string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Lock
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform) GetUnlock() *string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform{}
	}
	return t.Unlock
}

type TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls struct {
	Terraform *TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform "json:\"terraform,omitempty\" graphql:\"terraform\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls) GetTerraform() *TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls_Terraform {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_StateUrls{}
	}
	return t.Terraform
}

type TriggerRun_TriggerRun_StackRunBaseFragment_PluralCreds struct {
	URL   *string "json:\"url,omitempty\" graphql:\"url\""
	Token *string "json:\"token,omitempty\" graphql:\"token\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_PluralCreds) GetURL() *string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_PluralCreds{}
	}
	return t.URL
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_PluralCreds) GetToken() *string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_PluralCreds{}
	}
	return t.Token
}

type TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Stack_InfrastructureStackFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env struct {
	Name  string "json:\"name\" graphql:\"name\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetName() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Name
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env) GetValue() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_Env{}
	}
	return t.Value
}

type TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom struct {
	ConfigMap string "json:\"configMap\" graphql:\"configMap\""
	Secret    string "json:\"secret\" graphql:\"secret\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetConfigMap() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.ConfigMap
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom) GetSecret() string {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_JobSpec_JobSpecFragment_Containers_ContainerSpecFragment_EnvFrom{}
	}
	return t.Secret
}

type TriggerRun_TriggerRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform struct {
	Parallelism *int64 "json:\"parallelism,omitempty\" graphql:\"parallelism\""
	Refresh     *bool  "json:\"refresh,omitempty\" graphql:\"refresh\""
}

func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetParallelism() *int64 {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Parallelism
}
func (t *TriggerRun_TriggerRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform) GetRefresh() *bool {
	if t == nil {
		t = &TriggerRun_TriggerRun_StackRunBaseFragment_Configuration_StackConfigurationFragment_Terraform{}
	}
	return t.Refresh
}

type GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks) GetCmd() string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Cmd
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks) GetArgs() []*string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Args
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks) GetAfterStage() *StepStage {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return &t.AfterStage
}

type GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration struct {
	Image   *string                                                                           "json:\"image,omitempty\" graphql:\"image\""
	Tag     *string                                                                           "json:\"tag,omitempty\" graphql:\"tag\""
	Version *string                                                                           "json:\"version,omitempty\" graphql:\"version\""
	Hooks   []*GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks "json:\"hooks,omitempty\" graphql:\"hooks\""
}

func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration) GetImage() *string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Image
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration) GetTag() *string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Tag
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration) GetVersion() *string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Version
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration) GetHooks() []*GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration_Hooks {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Hooks
}

type GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps struct {
	Cmd             string    "json:\"cmd\" graphql:\"cmd\""
	Args            []*string "json:\"args,omitempty\" graphql:\"args\""
	Stage           StepStage "json:\"stage\" graphql:\"stage\""
	RequireApproval *bool     "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
}

func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps) GetCmd() string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Cmd
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps) GetArgs() []*string {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Args
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps) GetStage() *StepStage {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps{}
	}
	return &t.Stage
}
func (t *GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps) GetRequireApproval() *bool {
	if t == nil {
		t = &GetStackDefinition_StackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.RequireApproval
}

type ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks) GetCmd() string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Cmd
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks) GetArgs() []*string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Args
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks) GetAfterStage() *StepStage {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks{}
	}
	return &t.AfterStage
}

type ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration struct {
	Image   *string                                                                                         "json:\"image,omitempty\" graphql:\"image\""
	Tag     *string                                                                                         "json:\"tag,omitempty\" graphql:\"tag\""
	Version *string                                                                                         "json:\"version,omitempty\" graphql:\"version\""
	Hooks   []*ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks "json:\"hooks,omitempty\" graphql:\"hooks\""
}

func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration) GetImage() *string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration{}
	}
	return t.Image
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration) GetTag() *string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration{}
	}
	return t.Tag
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration) GetVersion() *string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration{}
	}
	return t.Version
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration) GetHooks() []*ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration_Hooks {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Configuration{}
	}
	return t.Hooks
}

type ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps struct {
	Cmd             string    "json:\"cmd\" graphql:\"cmd\""
	Args            []*string "json:\"args,omitempty\" graphql:\"args\""
	Stage           StepStage "json:\"stage\" graphql:\"stage\""
	RequireApproval *bool     "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
}

func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps) GetCmd() string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps{}
	}
	return t.Cmd
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps) GetArgs() []*string {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps{}
	}
	return t.Args
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps) GetStage() *StepStage {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps{}
	}
	return &t.Stage
}
func (t *ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps) GetRequireApproval() *bool {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges_Node_StackDefinitionFragment_Steps{}
	}
	return t.RequireApproval
}

type ListStackDefinitions_StackDefinitions_Edges struct {
	Node *StackDefinitionFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListStackDefinitions_StackDefinitions_Edges) GetNode() *StackDefinitionFragment {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions_Edges{}
	}
	return t.Node
}

type ListStackDefinitions_StackDefinitions struct {
	PageInfo PageInfoFragment                               "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges    []*ListStackDefinitions_StackDefinitions_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListStackDefinitions_StackDefinitions) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions{}
	}
	return &t.PageInfo
}
func (t *ListStackDefinitions_StackDefinitions) GetEdges() []*ListStackDefinitions_StackDefinitions_Edges {
	if t == nil {
		t = &ListStackDefinitions_StackDefinitions{}
	}
	return t.Edges
}

type CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetCmd() string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Cmd
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetArgs() []*string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Args
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetAfterStage() *StepStage {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return &t.AfterStage
}

type CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration struct {
	Image   *string                                                                                    "json:\"image,omitempty\" graphql:\"image\""
	Tag     *string                                                                                    "json:\"tag,omitempty\" graphql:\"tag\""
	Version *string                                                                                    "json:\"version,omitempty\" graphql:\"version\""
	Hooks   []*CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks "json:\"hooks,omitempty\" graphql:\"hooks\""
}

func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration) GetImage() *string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Image
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration) GetTag() *string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Tag
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration) GetVersion() *string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Version
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration) GetHooks() []*CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration_Hooks {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Hooks
}

type CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps struct {
	Cmd             string    "json:\"cmd\" graphql:\"cmd\""
	Args            []*string "json:\"args,omitempty\" graphql:\"args\""
	Stage           StepStage "json:\"stage\" graphql:\"stage\""
	RequireApproval *bool     "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
}

func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps) GetCmd() string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Cmd
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps) GetArgs() []*string {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Args
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps) GetStage() *StepStage {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return &t.Stage
}
func (t *CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps) GetRequireApproval() *bool {
	if t == nil {
		t = &CreateStackDefinition_CreateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.RequireApproval
}

type UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetCmd() string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Cmd
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetArgs() []*string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Args
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetAfterStage() *StepStage {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return &t.AfterStage
}

type UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration struct {
	Image   *string                                                                                    "json:\"image,omitempty\" graphql:\"image\""
	Tag     *string                                                                                    "json:\"tag,omitempty\" graphql:\"tag\""
	Version *string                                                                                    "json:\"version,omitempty\" graphql:\"version\""
	Hooks   []*UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks "json:\"hooks,omitempty\" graphql:\"hooks\""
}

func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration) GetImage() *string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Image
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration) GetTag() *string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Tag
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration) GetVersion() *string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Version
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration) GetHooks() []*UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration_Hooks {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Hooks
}

type UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps struct {
	Cmd             string    "json:\"cmd\" graphql:\"cmd\""
	Args            []*string "json:\"args,omitempty\" graphql:\"args\""
	Stage           StepStage "json:\"stage\" graphql:\"stage\""
	RequireApproval *bool     "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
}

func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps) GetCmd() string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Cmd
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps) GetArgs() []*string {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Args
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps) GetStage() *StepStage {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return &t.Stage
}
func (t *UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps) GetRequireApproval() *bool {
	if t == nil {
		t = &UpdateStackDefinition_UpdateStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.RequireApproval
}

type DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks struct {
	Cmd        string    "json:\"cmd\" graphql:\"cmd\""
	Args       []*string "json:\"args,omitempty\" graphql:\"args\""
	AfterStage StepStage "json:\"afterStage\" graphql:\"afterStage\""
}

func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetCmd() string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Cmd
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetArgs() []*string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return t.Args
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks) GetAfterStage() *StepStage {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks{}
	}
	return &t.AfterStage
}

type DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration struct {
	Image   *string                                                                                    "json:\"image,omitempty\" graphql:\"image\""
	Tag     *string                                                                                    "json:\"tag,omitempty\" graphql:\"tag\""
	Version *string                                                                                    "json:\"version,omitempty\" graphql:\"version\""
	Hooks   []*DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks "json:\"hooks,omitempty\" graphql:\"hooks\""
}

func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration) GetImage() *string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Image
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration) GetTag() *string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Tag
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration) GetVersion() *string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Version
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration) GetHooks() []*DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration_Hooks {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Configuration{}
	}
	return t.Hooks
}

type DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps struct {
	Cmd             string    "json:\"cmd\" graphql:\"cmd\""
	Args            []*string "json:\"args,omitempty\" graphql:\"args\""
	Stage           StepStage "json:\"stage\" graphql:\"stage\""
	RequireApproval *bool     "json:\"requireApproval,omitempty\" graphql:\"requireApproval\""
}

func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps) GetCmd() string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Cmd
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps) GetArgs() []*string {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.Args
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps) GetStage() *StepStage {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps{}
	}
	return &t.Stage
}
func (t *DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps) GetRequireApproval() *bool {
	if t == nil {
		t = &DeleteStackDefinition_DeleteStackDefinition_StackDefinitionFragment_Steps{}
	}
	return t.RequireApproval
}

type ListAccessTokens_AccessTokens_Edges struct {
	Node *AccessTokenFragment "json:\"node,omitempty\" graphql:\"node\""
}

func (t *ListAccessTokens_AccessTokens_Edges) GetNode() *AccessTokenFragment {
	if t == nil {
		t = &ListAccessTokens_AccessTokens_Edges{}
	}
	return t.Node
}

type ListAccessTokens_AccessTokens struct {
	Edges []*ListAccessTokens_AccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *ListAccessTokens_AccessTokens) GetEdges() []*ListAccessTokens_AccessTokens_Edges {
	if t == nil {
		t = &ListAccessTokens_AccessTokens{}
	}
	return t.Edges
}

type TokenExchange_TokenExchange_Groups struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *TokenExchange_TokenExchange_Groups) GetID() string {
	if t == nil {
		t = &TokenExchange_TokenExchange_Groups{}
	}
	return t.ID
}
func (t *TokenExchange_TokenExchange_Groups) GetName() string {
	if t == nil {
		t = &TokenExchange_TokenExchange_Groups{}
	}
	return t.Name
}

type TokenExchange_TokenExchange_BoundRoles struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *TokenExchange_TokenExchange_BoundRoles) GetID() string {
	if t == nil {
		t = &TokenExchange_TokenExchange_BoundRoles{}
	}
	return t.ID
}
func (t *TokenExchange_TokenExchange_BoundRoles) GetName() string {
	if t == nil {
		t = &TokenExchange_TokenExchange_BoundRoles{}
	}
	return t.Name
}

type TokenExchange_TokenExchange struct {
	Name       string                                    "json:\"name\" graphql:\"name\""
	ID         string                                    "json:\"id\" graphql:\"id\""
	Email      string                                    "json:\"email\" graphql:\"email\""
	Groups     []*TokenExchange_TokenExchange_Groups     "json:\"groups,omitempty\" graphql:\"groups\""
	BoundRoles []*TokenExchange_TokenExchange_BoundRoles "json:\"boundRoles,omitempty\" graphql:\"boundRoles\""
}

func (t *TokenExchange_TokenExchange) GetName() string {
	if t == nil {
		t = &TokenExchange_TokenExchange{}
	}
	return t.Name
}
func (t *TokenExchange_TokenExchange) GetID() string {
	if t == nil {
		t = &TokenExchange_TokenExchange{}
	}
	return t.ID
}
func (t *TokenExchange_TokenExchange) GetEmail() string {
	if t == nil {
		t = &TokenExchange_TokenExchange{}
	}
	return t.Email
}
func (t *TokenExchange_TokenExchange) GetGroups() []*TokenExchange_TokenExchange_Groups {
	if t == nil {
		t = &TokenExchange_TokenExchange{}
	}
	return t.Groups
}
func (t *TokenExchange_TokenExchange) GetBoundRoles() []*TokenExchange_TokenExchange_BoundRoles {
	if t == nil {
		t = &TokenExchange_TokenExchange{}
	}
	return t.BoundRoles
}

type SaveUpgradeInsights_SaveUpgradeInsights struct {
	ID      string  "json:\"id\" graphql:\"id\""
	Name    string  "json:\"name\" graphql:\"name\""
	Version *string "json:\"version,omitempty\" graphql:\"version\""
}

func (t *SaveUpgradeInsights_SaveUpgradeInsights) GetID() string {
	if t == nil {
		t = &SaveUpgradeInsights_SaveUpgradeInsights{}
	}
	return t.ID
}
func (t *SaveUpgradeInsights_SaveUpgradeInsights) GetName() string {
	if t == nil {
		t = &SaveUpgradeInsights_SaveUpgradeInsights{}
	}
	return t.Name
}
func (t *SaveUpgradeInsights_SaveUpgradeInsights) GetVersion() *string {
	if t == nil {
		t = &SaveUpgradeInsights_SaveUpgradeInsights{}
	}
	return t.Version
}

type AddGroupMember_CreateGroupMember_GroupMemberFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *AddGroupMember_CreateGroupMember_GroupMemberFragment_User) GetID() string {
	if t == nil {
		t = &AddGroupMember_CreateGroupMember_GroupMemberFragment_User{}
	}
	return t.ID
}

type AddGroupMember_CreateGroupMember_GroupMemberFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *AddGroupMember_CreateGroupMember_GroupMemberFragment_Group) GetID() string {
	if t == nil {
		t = &AddGroupMember_CreateGroupMember_GroupMemberFragment_Group{}
	}
	return t.ID
}

type DeleteGroupMember_DeleteGroupMember_GroupMemberFragment_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteGroupMember_DeleteGroupMember_GroupMemberFragment_User) GetID() string {
	if t == nil {
		t = &DeleteGroupMember_DeleteGroupMember_GroupMemberFragment_User{}
	}
	return t.ID
}

type DeleteGroupMember_DeleteGroupMember_GroupMemberFragment_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *DeleteGroupMember_DeleteGroupMember_GroupMemberFragment_Group) GetID() string {
	if t == nil {
		t = &DeleteGroupMember_DeleteGroupMember_GroupMemberFragment_Group{}
	}
	return t.ID
}

type GetAgentRuntime struct {
	AgentRuntime *AgentRuntimeFragment "json:\"agentRuntime,omitempty\" graphql:\"agentRuntime\""
}

func (t *GetAgentRuntime) GetAgentRuntime() *AgentRuntimeFragment {
	if t == nil {
		t = &GetAgentRuntime{}
	}
	return t.AgentRuntime
}

type UpsertAgentRuntime struct {
	UpsertAgentRuntime *AgentRuntimeFragment "json:\"upsertAgentRuntime,omitempty\" graphql:\"upsertAgentRuntime\""
}

func (t *UpsertAgentRuntime) GetUpsertAgentRuntime() *AgentRuntimeFragment {
	if t == nil {
		t = &UpsertAgentRuntime{}
	}
	return t.UpsertAgentRuntime
}

type DeleteAgentRuntime struct {
	DeleteAgentRuntime *DeleteAgentRuntime_DeleteAgentRuntime "json:\"deleteAgentRuntime,omitempty\" graphql:\"deleteAgentRuntime\""
}

func (t *DeleteAgentRuntime) GetDeleteAgentRuntime() *DeleteAgentRuntime_DeleteAgentRuntime {
	if t == nil {
		t = &DeleteAgentRuntime{}
	}
	return t.DeleteAgentRuntime
}

type ListAgentRuntimes struct {
	AgentRuntimes *ListAgentRuntimes_AgentRuntimes "json:\"agentRuntimes,omitempty\" graphql:\"agentRuntimes\""
}

func (t *ListAgentRuntimes) GetAgentRuntimes() *ListAgentRuntimes_AgentRuntimes {
	if t == nil {
		t = &ListAgentRuntimes{}
	}
	return t.AgentRuntimes
}

type GetAgentRun struct {
	AgentRun *AgentRunFragment "json:\"agentRun,omitempty\" graphql:\"agentRun\""
}

func (t *GetAgentRun) GetAgentRun() *AgentRunFragment {
	if t == nil {
		t = &GetAgentRun{}
	}
	return t.AgentRun
}

type ListAgentRuns struct {
	AgentRuns *ListAgentRuns_AgentRuns "json:\"agentRuns,omitempty\" graphql:\"agentRuns\""
}

func (t *ListAgentRuns) GetAgentRuns() *ListAgentRuns_AgentRuns {
	if t == nil {
		t = &ListAgentRuns{}
	}
	return t.AgentRuns
}

type ListAgentRuntimePendingRuns struct {
	AgentRuntime *ListAgentRuntimePendingRuns_AgentRuntime "json:\"agentRuntime,omitempty\" graphql:\"agentRuntime\""
}

func (t *ListAgentRuntimePendingRuns) GetAgentRuntime() *ListAgentRuntimePendingRuns_AgentRuntime {
	if t == nil {
		t = &ListAgentRuntimePendingRuns{}
	}
	return t.AgentRuntime
}

type CancelAgentRun struct {
	CancelAgentRun *CancelAgentRun_CancelAgentRun "json:\"cancelAgentRun,omitempty\" graphql:\"cancelAgentRun\""
}

func (t *CancelAgentRun) GetCancelAgentRun() *CancelAgentRun_CancelAgentRun {
	if t == nil {
		t = &CancelAgentRun{}
	}
	return t.CancelAgentRun
}

type CreateAgentRun struct {
	CreateAgentRun *AgentRunFragment "json:\"createAgentRun,omitempty\" graphql:\"createAgentRun\""
}

func (t *CreateAgentRun) GetCreateAgentRun() *AgentRunFragment {
	if t == nil {
		t = &CreateAgentRun{}
	}
	return t.CreateAgentRun
}

type UpdateAgentRun struct {
	UpdateAgentRun *AgentRunFragment "json:\"updateAgentRun,omitempty\" graphql:\"updateAgentRun\""
}

func (t *UpdateAgentRun) GetUpdateAgentRun() *AgentRunFragment {
	if t == nil {
		t = &UpdateAgentRun{}
	}
	return t.UpdateAgentRun
}

type UpdateAgentRunAnalysis struct {
	UpdateAgentRunAnalysis *AgentRunFragment "json:\"updateAgentRunAnalysis,omitempty\" graphql:\"updateAgentRunAnalysis\""
}

func (t *UpdateAgentRunAnalysis) GetUpdateAgentRunAnalysis() *AgentRunFragment {
	if t == nil {
		t = &UpdateAgentRunAnalysis{}
	}
	return t.UpdateAgentRunAnalysis
}

type UpdateAgentRunTodos struct {
	UpdateAgentRunTodos *AgentRunFragment "json:\"updateAgentRunTodos,omitempty\" graphql:\"updateAgentRunTodos\""
}

func (t *UpdateAgentRunTodos) GetUpdateAgentRunTodos() *AgentRunFragment {
	if t == nil {
		t = &UpdateAgentRunTodos{}
	}
	return t.UpdateAgentRunTodos
}

type CreateAgentPullRequest struct {
	AgentPullRequest *PullRequestFragment "json:\"agentPullRequest,omitempty\" graphql:\"agentPullRequest\""
}

func (t *CreateAgentPullRequest) GetAgentPullRequest() *PullRequestFragment {
	if t == nil {
		t = &CreateAgentPullRequest{}
	}
	return t.AgentPullRequest
}

type AddClusterAuditLog struct {
	AddClusterAuditLog *bool "json:\"addClusterAuditLog,omitempty\" graphql:\"addClusterAuditLog\""
}

func (t *AddClusterAuditLog) GetAddClusterAuditLog() *bool {
	if t == nil {
		t = &AddClusterAuditLog{}
	}
	return t.AddClusterAuditLog
}

type ListScmWebhooks struct {
	ScmWebhooks *ListScmWebhooks_ScmWebhooks "json:\"scmWebhooks,omitempty\" graphql:\"scmWebhooks\""
}

func (t *ListScmWebhooks) GetScmWebhooks() *ListScmWebhooks_ScmWebhooks {
	if t == nil {
		t = &ListScmWebhooks{}
	}
	return t.ScmWebhooks
}

type GetScmWebhook struct {
	ScmWebhook *ScmWebhookFragment "json:\"scmWebhook,omitempty\" graphql:\"scmWebhook\""
}

func (t *GetScmWebhook) GetScmWebhook() *ScmWebhookFragment {
	if t == nil {
		t = &GetScmWebhook{}
	}
	return t.ScmWebhook
}

type CreateScmWebhook struct {
	CreateScmWebhook *ScmWebhookFragment "json:\"createScmWebhook,omitempty\" graphql:\"createScmWebhook\""
}

func (t *CreateScmWebhook) GetCreateScmWebhook() *ScmWebhookFragment {
	if t == nil {
		t = &CreateScmWebhook{}
	}
	return t.CreateScmWebhook
}

type CreateScmWebhookPointer struct {
	CreateScmWebhookPointer *ScmWebhookFragment "json:\"createScmWebhookPointer,omitempty\" graphql:\"createScmWebhookPointer\""
}

func (t *CreateScmWebhookPointer) GetCreateScmWebhookPointer() *ScmWebhookFragment {
	if t == nil {
		t = &CreateScmWebhookPointer{}
	}
	return t.CreateScmWebhookPointer
}

type DeleteScmWebhook struct {
	DeleteScmWebhook *ScmWebhookFragment "json:\"deleteScmWebhook,omitempty\" graphql:\"deleteScmWebhook\""
}

func (t *DeleteScmWebhook) GetDeleteScmWebhook() *ScmWebhookFragment {
	if t == nil {
		t = &DeleteScmWebhook{}
	}
	return t.DeleteScmWebhook
}

type ListObservabilityWebhooks struct {
	ObservabilityWebhooks *ListObservabilityWebhooks_ObservabilityWebhooks "json:\"observabilityWebhooks,omitempty\" graphql:\"observabilityWebhooks\""
}

func (t *ListObservabilityWebhooks) GetObservabilityWebhooks() *ListObservabilityWebhooks_ObservabilityWebhooks {
	if t == nil {
		t = &ListObservabilityWebhooks{}
	}
	return t.ObservabilityWebhooks
}

type GetObservabilityWebhook struct {
	ObservabilityWebhook *ObservabilityWebhookFragment "json:\"observabilityWebhook,omitempty\" graphql:\"observabilityWebhook\""
}

func (t *GetObservabilityWebhook) GetObservabilityWebhook() *ObservabilityWebhookFragment {
	if t == nil {
		t = &GetObservabilityWebhook{}
	}
	return t.ObservabilityWebhook
}

type UpsertObservabilityWebhook struct {
	UpsertObservabilityWebhook *ObservabilityWebhookFragment "json:\"upsertObservabilityWebhook,omitempty\" graphql:\"upsertObservabilityWebhook\""
}

func (t *UpsertObservabilityWebhook) GetUpsertObservabilityWebhook() *ObservabilityWebhookFragment {
	if t == nil {
		t = &UpsertObservabilityWebhook{}
	}
	return t.UpsertObservabilityWebhook
}

type DeleteObservabilityWebhook struct {
	DeleteObservabilityWebhook *ObservabilityWebhookFragment "json:\"deleteObservabilityWebhook,omitempty\" graphql:\"deleteObservabilityWebhook\""
}

func (t *DeleteObservabilityWebhook) GetDeleteObservabilityWebhook() *ObservabilityWebhookFragment {
	if t == nil {
		t = &DeleteObservabilityWebhook{}
	}
	return t.DeleteObservabilityWebhook
}

type CreateClusterBackup struct {
	CreateClusterBackup *ClusterBackupFragment "json:\"createClusterBackup,omitempty\" graphql:\"createClusterBackup\""
}

func (t *CreateClusterBackup) GetCreateClusterBackup() *ClusterBackupFragment {
	if t == nil {
		t = &CreateClusterBackup{}
	}
	return t.CreateClusterBackup
}

type GetClusterBackup struct {
	ClusterBackup *ClusterBackupFragment "json:\"clusterBackup,omitempty\" graphql:\"clusterBackup\""
}

func (t *GetClusterBackup) GetClusterBackup() *ClusterBackupFragment {
	if t == nil {
		t = &GetClusterBackup{}
	}
	return t.ClusterBackup
}

type UpdateClusterRestore struct {
	UpdateClusterRestore *ClusterRestoreFragment "json:\"updateClusterRestore,omitempty\" graphql:\"updateClusterRestore\""
}

func (t *UpdateClusterRestore) GetUpdateClusterRestore() *ClusterRestoreFragment {
	if t == nil {
		t = &UpdateClusterRestore{}
	}
	return t.UpdateClusterRestore
}

type CreateClusterRestore struct {
	CreateClusterRestore *ClusterRestoreFragment "json:\"createClusterRestore,omitempty\" graphql:\"createClusterRestore\""
}

func (t *CreateClusterRestore) GetCreateClusterRestore() *ClusterRestoreFragment {
	if t == nil {
		t = &CreateClusterRestore{}
	}
	return t.CreateClusterRestore
}

type GetClusterRestore struct {
	ClusterRestore *ClusterRestoreFragment "json:\"clusterRestore,omitempty\" graphql:\"clusterRestore\""
}

func (t *GetClusterRestore) GetClusterRestore() *ClusterRestoreFragment {
	if t == nil {
		t = &GetClusterRestore{}
	}
	return t.ClusterRestore
}

type CreateBootstrapToken struct {
	CreateBootstrapToken *BootstrapTokenBase "json:\"createBootstrapToken,omitempty\" graphql:\"createBootstrapToken\""
}

func (t *CreateBootstrapToken) GetCreateBootstrapToken() *BootstrapTokenBase {
	if t == nil {
		t = &CreateBootstrapToken{}
	}
	return t.CreateBootstrapToken
}

type DeleteBootstrapToken struct {
	DeleteBootstrapToken *DeleteBootstrapToken_DeleteBootstrapToken "json:\"deleteBootstrapToken,omitempty\" graphql:\"deleteBootstrapToken\""
}

func (t *DeleteBootstrapToken) GetDeleteBootstrapToken() *DeleteBootstrapToken_DeleteBootstrapToken {
	if t == nil {
		t = &DeleteBootstrapToken{}
	}
	return t.DeleteBootstrapToken
}

type UpsertCatalog struct {
	UpsertCatalog *CatalogFragment "json:\"upsertCatalog,omitempty\" graphql:\"upsertCatalog\""
}

func (t *UpsertCatalog) GetUpsertCatalog() *CatalogFragment {
	if t == nil {
		t = &UpsertCatalog{}
	}
	return t.UpsertCatalog
}

type DeleteCatalog struct {
	DeleteCatalog *CatalogFragment "json:\"deleteCatalog,omitempty\" graphql:\"deleteCatalog\""
}

func (t *DeleteCatalog) GetDeleteCatalog() *CatalogFragment {
	if t == nil {
		t = &DeleteCatalog{}
	}
	return t.DeleteCatalog
}

type GetCatalog struct {
	Catalog *CatalogFragment "json:\"catalog,omitempty\" graphql:\"catalog\""
}

func (t *GetCatalog) GetCatalog() *CatalogFragment {
	if t == nil {
		t = &GetCatalog{}
	}
	return t.Catalog
}

type UpsertCloudConnection struct {
	UpsertCloudConnection *CloudConnectionFragment "json:\"upsertCloudConnection,omitempty\" graphql:\"upsertCloudConnection\""
}

func (t *UpsertCloudConnection) GetUpsertCloudConnection() *CloudConnectionFragment {
	if t == nil {
		t = &UpsertCloudConnection{}
	}
	return t.UpsertCloudConnection
}

type DeleteCloudConnection struct {
	DeleteCloudConnection *CloudConnectionFragment "json:\"deleteCloudConnection,omitempty\" graphql:\"deleteCloudConnection\""
}

func (t *DeleteCloudConnection) GetDeleteCloudConnection() *CloudConnectionFragment {
	if t == nil {
		t = &DeleteCloudConnection{}
	}
	return t.DeleteCloudConnection
}

type GetCloudConnection struct {
	CloudConnection *CloudConnectionFragment "json:\"cloudConnection,omitempty\" graphql:\"cloudConnection\""
}

func (t *GetCloudConnection) GetCloudConnection() *CloudConnectionFragment {
	if t == nil {
		t = &GetCloudConnection{}
	}
	return t.CloudConnection
}

type CreateCluster struct {
	CreateCluster *CreateCluster_CreateCluster "json:\"createCluster,omitempty\" graphql:\"createCluster\""
}

func (t *CreateCluster) GetCreateCluster() *CreateCluster_CreateCluster {
	if t == nil {
		t = &CreateCluster{}
	}
	return t.CreateCluster
}

type UpdateCluster struct {
	UpdateCluster *ClusterFragment "json:\"updateCluster,omitempty\" graphql:\"updateCluster\""
}

func (t *UpdateCluster) GetUpdateCluster() *ClusterFragment {
	if t == nil {
		t = &UpdateCluster{}
	}
	return t.UpdateCluster
}

type DeleteCluster struct {
	DeleteCluster *DeleteCluster_DeleteCluster "json:\"deleteCluster,omitempty\" graphql:\"deleteCluster\""
}

func (t *DeleteCluster) GetDeleteCluster() *DeleteCluster_DeleteCluster {
	if t == nil {
		t = &DeleteCluster{}
	}
	return t.DeleteCluster
}

type DetachCluster struct {
	DetachCluster *DetachCluster_DetachCluster "json:\"detachCluster,omitempty\" graphql:\"detachCluster\""
}

func (t *DetachCluster) GetDetachCluster() *DetachCluster_DetachCluster {
	if t == nil {
		t = &DetachCluster{}
	}
	return t.DetachCluster
}

type CreateClusterProvider struct {
	CreateClusterProvider *ClusterProviderFragment "json:\"createClusterProvider,omitempty\" graphql:\"createClusterProvider\""
}

func (t *CreateClusterProvider) GetCreateClusterProvider() *ClusterProviderFragment {
	if t == nil {
		t = &CreateClusterProvider{}
	}
	return t.CreateClusterProvider
}

type UpdateClusterProvider struct {
	UpdateClusterProvider *ClusterProviderFragment "json:\"updateClusterProvider,omitempty\" graphql:\"updateClusterProvider\""
}

func (t *UpdateClusterProvider) GetUpdateClusterProvider() *ClusterProviderFragment {
	if t == nil {
		t = &UpdateClusterProvider{}
	}
	return t.UpdateClusterProvider
}

type DeleteClusterProvider struct {
	DeleteClusterProvider *ClusterProviderFragment "json:\"deleteClusterProvider,omitempty\" graphql:\"deleteClusterProvider\""
}

func (t *DeleteClusterProvider) GetDeleteClusterProvider() *ClusterProviderFragment {
	if t == nil {
		t = &DeleteClusterProvider{}
	}
	return t.DeleteClusterProvider
}

type PingCluster struct {
	PingCluster *PingCluster_PingCluster "json:\"pingCluster,omitempty\" graphql:\"pingCluster\""
}

func (t *PingCluster) GetPingCluster() *PingCluster_PingCluster {
	if t == nil {
		t = &PingCluster{}
	}
	return t.PingCluster
}

type RegisterRuntimeServices struct {
	RegisterRuntimeServices *int64 "json:\"registerRuntimeServices,omitempty\" graphql:\"registerRuntimeServices\""
}

func (t *RegisterRuntimeServices) GetRegisterRuntimeServices() *int64 {
	if t == nil {
		t = &RegisterRuntimeServices{}
	}
	return t.RegisterRuntimeServices
}

type ListClusters struct {
	Clusters *ListClusters_Clusters "json:\"clusters,omitempty\" graphql:\"clusters\""
}

func (t *ListClusters) GetClusters() *ListClusters_Clusters {
	if t == nil {
		t = &ListClusters{}
	}
	return t.Clusters
}

type ListClustersWithParameters struct {
	Clusters *ListClustersWithParameters_Clusters "json:\"clusters,omitempty\" graphql:\"clusters\""
}

func (t *ListClustersWithParameters) GetClusters() *ListClustersWithParameters_Clusters {
	if t == nil {
		t = &ListClustersWithParameters{}
	}
	return t.Clusters
}

type GetCluster struct {
	Cluster *ClusterFragment "json:\"cluster,omitempty\" graphql:\"cluster\""
}

func (t *GetCluster) GetCluster() *ClusterFragment {
	if t == nil {
		t = &GetCluster{}
	}
	return t.Cluster
}

type GetTinyCluster struct {
	Cluster *TinyClusterFragment "json:\"cluster,omitempty\" graphql:\"cluster\""
}

func (t *GetTinyCluster) GetCluster() *TinyClusterFragment {
	if t == nil {
		t = &GetTinyCluster{}
	}
	return t.Cluster
}

type GetAgentURL struct {
	Cluster *GetAgentUrl_Cluster "json:\"cluster,omitempty\" graphql:\"cluster\""
}

func (t *GetAgentURL) GetCluster() *GetAgentUrl_Cluster {
	if t == nil {
		t = &GetAgentURL{}
	}
	return t.Cluster
}

type GetClusterWithToken struct {
	Cluster *GetClusterWithToken_Cluster "json:\"cluster,omitempty\" graphql:\"cluster\""
}

func (t *GetClusterWithToken) GetCluster() *GetClusterWithToken_Cluster {
	if t == nil {
		t = &GetClusterWithToken{}
	}
	return t.Cluster
}

type GetClusterByHandle struct {
	Cluster *ClusterFragment "json:\"cluster,omitempty\" graphql:\"cluster\""
}

func (t *GetClusterByHandle) GetCluster() *ClusterFragment {
	if t == nil {
		t = &GetClusterByHandle{}
	}
	return t.Cluster
}

type GetClusterProvider struct {
	ClusterProvider *ClusterProviderFragment "json:\"clusterProvider,omitempty\" graphql:\"clusterProvider\""
}

func (t *GetClusterProvider) GetClusterProvider() *ClusterProviderFragment {
	if t == nil {
		t = &GetClusterProvider{}
	}
	return t.ClusterProvider
}

type GetClusterProviderByCloud struct {
	ClusterProvider *ClusterProviderFragment "json:\"clusterProvider,omitempty\" graphql:\"clusterProvider\""
}

func (t *GetClusterProviderByCloud) GetClusterProvider() *ClusterProviderFragment {
	if t == nil {
		t = &GetClusterProviderByCloud{}
	}
	return t.ClusterProvider
}

type ListClusterServices struct {
	ClusterServices []*ServiceDeploymentBaseFragment "json:\"clusterServices,omitempty\" graphql:\"clusterServices\""
}

func (t *ListClusterServices) GetClusterServices() []*ServiceDeploymentBaseFragment {
	if t == nil {
		t = &ListClusterServices{}
	}
	return t.ClusterServices
}

type ListServiceDeployments struct {
	ServiceDeployments *ListServiceDeployments_ServiceDeployments "json:\"serviceDeployments,omitempty\" graphql:\"serviceDeployments\""
}

func (t *ListServiceDeployments) GetServiceDeployments() *ListServiceDeployments_ServiceDeployments {
	if t == nil {
		t = &ListServiceDeployments{}
	}
	return t.ServiceDeployments
}

type MyCluster struct {
	MyCluster *MyCluster_MyCluster_ "json:\"myCluster,omitempty\" graphql:\"myCluster\""
}

func (t *MyCluster) GetMyCluster() *MyCluster_MyCluster_ {
	if t == nil {
		t = &MyCluster{}
	}
	return t.MyCluster
}

type UpsertVirtualCluster struct {
	UpsertVirtualCluster *UpsertVirtualCluster_UpsertVirtualCluster "json:\"upsertVirtualCluster,omitempty\" graphql:\"upsertVirtualCluster\""
}

func (t *UpsertVirtualCluster) GetUpsertVirtualCluster() *UpsertVirtualCluster_UpsertVirtualCluster {
	if t == nil {
		t = &UpsertVirtualCluster{}
	}
	return t.UpsertVirtualCluster
}

type GetGlobalServiceDeployment struct {
	GlobalService *GlobalServiceFragment "json:\"globalService,omitempty\" graphql:\"globalService\""
}

func (t *GetGlobalServiceDeployment) GetGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &GetGlobalServiceDeployment{}
	}
	return t.GlobalService
}

type CreateGlobalServiceDeployment struct {
	CreateGlobalService *GlobalServiceFragment "json:\"createGlobalService,omitempty\" graphql:\"createGlobalService\""
}

func (t *CreateGlobalServiceDeployment) GetCreateGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &CreateGlobalServiceDeployment{}
	}
	return t.CreateGlobalService
}

type CreateGlobalServiceDeploymentFromTemplate struct {
	CreateGlobalService *GlobalServiceFragment "json:\"createGlobalService,omitempty\" graphql:\"createGlobalService\""
}

func (t *CreateGlobalServiceDeploymentFromTemplate) GetCreateGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &CreateGlobalServiceDeploymentFromTemplate{}
	}
	return t.CreateGlobalService
}

type UpdateGlobalServiceDeployment struct {
	UpdateGlobalService *GlobalServiceFragment "json:\"updateGlobalService,omitempty\" graphql:\"updateGlobalService\""
}

func (t *UpdateGlobalServiceDeployment) GetUpdateGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &UpdateGlobalServiceDeployment{}
	}
	return t.UpdateGlobalService
}

type DeleteGlobalServiceDeployment struct {
	DeleteGlobalService *GlobalServiceFragment "json:\"deleteGlobalService,omitempty\" graphql:\"deleteGlobalService\""
}

func (t *DeleteGlobalServiceDeployment) GetDeleteGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &DeleteGlobalServiceDeployment{}
	}
	return t.DeleteGlobalService
}

type CreateServiceDeployment struct {
	CreateServiceDeployment *ServiceDeploymentExtended "json:\"createServiceDeployment,omitempty\" graphql:\"createServiceDeployment\""
}

func (t *CreateServiceDeployment) GetCreateServiceDeployment() *ServiceDeploymentExtended {
	if t == nil {
		t = &CreateServiceDeployment{}
	}
	return t.CreateServiceDeployment
}

type CreateServiceDeploymentWithHandle struct {
	CreateServiceDeployment *ServiceDeploymentExtended "json:\"createServiceDeployment,omitempty\" graphql:\"createServiceDeployment\""
}

func (t *CreateServiceDeploymentWithHandle) GetCreateServiceDeployment() *ServiceDeploymentExtended {
	if t == nil {
		t = &CreateServiceDeploymentWithHandle{}
	}
	return t.CreateServiceDeployment
}

type DeleteServiceDeployment struct {
	DeleteServiceDeployment *ServiceDeploymentFragment "json:\"deleteServiceDeployment,omitempty\" graphql:\"deleteServiceDeployment\""
}

func (t *DeleteServiceDeployment) GetDeleteServiceDeployment() *ServiceDeploymentFragment {
	if t == nil {
		t = &DeleteServiceDeployment{}
	}
	return t.DeleteServiceDeployment
}

type DetachServiceDeployment struct {
	DetachServiceDeployment *ServiceDeploymentFragment "json:\"detachServiceDeployment,omitempty\" graphql:\"detachServiceDeployment\""
}

func (t *DetachServiceDeployment) GetDetachServiceDeployment() *ServiceDeploymentFragment {
	if t == nil {
		t = &DetachServiceDeployment{}
	}
	return t.DetachServiceDeployment
}

type UpdateServiceDeployment struct {
	UpdateServiceDeployment *ServiceDeploymentExtended "json:\"updateServiceDeployment,omitempty\" graphql:\"updateServiceDeployment\""
}

func (t *UpdateServiceDeployment) GetUpdateServiceDeployment() *ServiceDeploymentExtended {
	if t == nil {
		t = &UpdateServiceDeployment{}
	}
	return t.UpdateServiceDeployment
}

type UpdateServiceDeploymentWithHandle struct {
	UpdateServiceDeployment *ServiceDeploymentExtended "json:\"updateServiceDeployment,omitempty\" graphql:\"updateServiceDeployment\""
}

func (t *UpdateServiceDeploymentWithHandle) GetUpdateServiceDeployment() *ServiceDeploymentExtended {
	if t == nil {
		t = &UpdateServiceDeploymentWithHandle{}
	}
	return t.UpdateServiceDeployment
}

type CloneServiceDeployment struct {
	CloneService *ServiceDeploymentFragment "json:\"cloneService,omitempty\" graphql:\"cloneService\""
}

func (t *CloneServiceDeployment) GetCloneService() *ServiceDeploymentFragment {
	if t == nil {
		t = &CloneServiceDeployment{}
	}
	return t.CloneService
}

type CloneServiceDeploymentWithHandle struct {
	CloneService *ServiceDeploymentFragment "json:\"cloneService,omitempty\" graphql:\"cloneService\""
}

func (t *CloneServiceDeploymentWithHandle) GetCloneService() *ServiceDeploymentFragment {
	if t == nil {
		t = &CloneServiceDeploymentWithHandle{}
	}
	return t.CloneService
}

type RollbackService struct {
	RollbackService *ServiceDeploymentFragment "json:\"rollbackService,omitempty\" graphql:\"rollbackService\""
}

func (t *RollbackService) GetRollbackService() *ServiceDeploymentFragment {
	if t == nil {
		t = &RollbackService{}
	}
	return t.RollbackService
}

type UpdateServiceComponents struct {
	UpdateServiceComponents *ServiceDeploymentFragment "json:\"updateServiceComponents,omitempty\" graphql:\"updateServiceComponents\""
}

func (t *UpdateServiceComponents) GetUpdateServiceComponents() *ServiceDeploymentFragment {
	if t == nil {
		t = &UpdateServiceComponents{}
	}
	return t.UpdateServiceComponents
}

type AddServiceError struct {
	UpdateServiceComponents *ServiceDeploymentFragment "json:\"updateServiceComponents,omitempty\" graphql:\"updateServiceComponents\""
}

func (t *AddServiceError) GetUpdateServiceComponents() *ServiceDeploymentFragment {
	if t == nil {
		t = &AddServiceError{}
	}
	return t.UpdateServiceComponents
}

type UpdateDeploymentSettings struct {
	UpdateDeploymentSettings *DeploymentSettingsFragment "json:\"updateDeploymentSettings,omitempty\" graphql:\"updateDeploymentSettings\""
}

func (t *UpdateDeploymentSettings) GetUpdateDeploymentSettings() *DeploymentSettingsFragment {
	if t == nil {
		t = &UpdateDeploymentSettings{}
	}
	return t.UpdateDeploymentSettings
}

type GetDeploymentSettings struct {
	DeploymentSettings *DeploymentSettingsFragment "json:\"deploymentSettings,omitempty\" graphql:\"deploymentSettings\""
}

func (t *GetDeploymentSettings) GetDeploymentSettings() *DeploymentSettingsFragment {
	if t == nil {
		t = &GetDeploymentSettings{}
	}
	return t.DeploymentSettings
}

type GetServiceDeployment struct {
	ServiceDeployment *ServiceDeploymentExtended "json:\"serviceDeployment,omitempty\" graphql:\"serviceDeployment\""
}

func (t *GetServiceDeployment) GetServiceDeployment() *ServiceDeploymentExtended {
	if t == nil {
		t = &GetServiceDeployment{}
	}
	return t.ServiceDeployment
}

type GetServiceDeploymentComponents struct {
	ServiceDeployment *GetServiceDeploymentComponents_ServiceDeployment "json:\"serviceDeployment,omitempty\" graphql:\"serviceDeployment\""
}

func (t *GetServiceDeploymentComponents) GetServiceDeployment() *GetServiceDeploymentComponents_ServiceDeployment {
	if t == nil {
		t = &GetServiceDeploymentComponents{}
	}
	return t.ServiceDeployment
}

type GetServiceDeploymentForAgent struct {
	ServiceDeployment *ServiceDeploymentForAgent "json:\"serviceDeployment,omitempty\" graphql:\"serviceDeployment\""
}

func (t *GetServiceDeploymentForAgent) GetServiceDeployment() *ServiceDeploymentForAgent {
	if t == nil {
		t = &GetServiceDeploymentForAgent{}
	}
	return t.ServiceDeployment
}

type GetServiceDeploymentByHandle struct {
	ServiceDeployment *ServiceDeploymentExtended "json:\"serviceDeployment,omitempty\" graphql:\"serviceDeployment\""
}

func (t *GetServiceDeploymentByHandle) GetServiceDeployment() *ServiceDeploymentExtended {
	if t == nil {
		t = &GetServiceDeploymentByHandle{}
	}
	return t.ServiceDeployment
}

type ListServiceDeployment struct {
	ServiceDeployments *ListServiceDeployment_ServiceDeployments "json:\"serviceDeployments,omitempty\" graphql:\"serviceDeployments\""
}

func (t *ListServiceDeployment) GetServiceDeployments() *ListServiceDeployment_ServiceDeployments {
	if t == nil {
		t = &ListServiceDeployment{}
	}
	return t.ServiceDeployments
}

type PagedClusterServices struct {
	PagedClusterServices *PagedClusterServices_PagedClusterServices "json:\"pagedClusterServices,omitempty\" graphql:\"pagedClusterServices\""
}

func (t *PagedClusterServices) GetPagedClusterServices() *PagedClusterServices_PagedClusterServices {
	if t == nil {
		t = &PagedClusterServices{}
	}
	return t.PagedClusterServices
}

type PagedClusterServicesForAgent struct {
	PagedClusterServices *PagedClusterServicesForAgent_PagedClusterServices "json:\"pagedClusterServices,omitempty\" graphql:\"pagedClusterServices\""
}

func (t *PagedClusterServicesForAgent) GetPagedClusterServices() *PagedClusterServicesForAgent_PagedClusterServices {
	if t == nil {
		t = &PagedClusterServicesForAgent{}
	}
	return t.PagedClusterServices
}

type PagedClusterServiceIds struct {
	PagedClusterServices *PagedClusterServiceIds_PagedClusterServices "json:\"pagedClusterServices,omitempty\" graphql:\"pagedClusterServices\""
}

func (t *PagedClusterServiceIds) GetPagedClusterServices() *PagedClusterServiceIds_PagedClusterServices {
	if t == nil {
		t = &PagedClusterServiceIds{}
	}
	return t.PagedClusterServices
}

type ListServiceDeploymentByHandle struct {
	ServiceDeployments *ListServiceDeploymentByHandle_ServiceDeployments "json:\"serviceDeployments,omitempty\" graphql:\"serviceDeployments\""
}

func (t *ListServiceDeploymentByHandle) GetServiceDeployments() *ListServiceDeploymentByHandle_ServiceDeployments {
	if t == nil {
		t = &ListServiceDeploymentByHandle{}
	}
	return t.ServiceDeployments
}

type GetServiceContext struct {
	ServiceContext *ServiceContextFragment "json:\"serviceContext,omitempty\" graphql:\"serviceContext\""
}

func (t *GetServiceContext) GetServiceContext() *ServiceContextFragment {
	if t == nil {
		t = &GetServiceContext{}
	}
	return t.ServiceContext
}

type SaveServiceContext struct {
	SaveServiceContext *ServiceContextFragment "json:\"saveServiceContext,omitempty\" graphql:\"saveServiceContext\""
}

func (t *SaveServiceContext) GetSaveServiceContext() *ServiceContextFragment {
	if t == nil {
		t = &SaveServiceContext{}
	}
	return t.SaveServiceContext
}

type DeleteServiceContext struct {
	DeleteServiceContext *ServiceContextFragment "json:\"deleteServiceContext,omitempty\" graphql:\"deleteServiceContext\""
}

func (t *DeleteServiceContext) GetDeleteServiceContext() *ServiceContextFragment {
	if t == nil {
		t = &DeleteServiceContext{}
	}
	return t.DeleteServiceContext
}

type CreateGlobalService struct {
	CreateGlobalService *GlobalServiceFragment "json:\"createGlobalService,omitempty\" graphql:\"createGlobalService\""
}

func (t *CreateGlobalService) GetCreateGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &CreateGlobalService{}
	}
	return t.CreateGlobalService
}

type UpdateGlobalService struct {
	UpdateGlobalService *GlobalServiceFragment "json:\"updateGlobalService,omitempty\" graphql:\"updateGlobalService\""
}

func (t *UpdateGlobalService) GetUpdateGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &UpdateGlobalService{}
	}
	return t.UpdateGlobalService
}

type DeleteGlobalService struct {
	DeleteGlobalService *GlobalServiceFragment "json:\"deleteGlobalService,omitempty\" graphql:\"deleteGlobalService\""
}

func (t *DeleteGlobalService) GetDeleteGlobalService() *GlobalServiceFragment {
	if t == nil {
		t = &DeleteGlobalService{}
	}
	return t.DeleteGlobalService
}

type KickService struct {
	KickService *ServiceDeploymentExtended "json:\"kickService,omitempty\" graphql:\"kickService\""
}

func (t *KickService) GetKickService() *ServiceDeploymentExtended {
	if t == nil {
		t = &KickService{}
	}
	return t.KickService
}

type KickServiceByHandle struct {
	KickService *ServiceDeploymentExtended "json:\"kickService,omitempty\" graphql:\"kickService\""
}

func (t *KickServiceByHandle) GetKickService() *ServiceDeploymentExtended {
	if t == nil {
		t = &KickServiceByHandle{}
	}
	return t.KickService
}

type GetClusterRegistration struct {
	ClusterRegistration *ClusterRegistrationFragment "json:\"clusterRegistration,omitempty\" graphql:\"clusterRegistration\""
}

func (t *GetClusterRegistration) GetClusterRegistration() *ClusterRegistrationFragment {
	if t == nil {
		t = &GetClusterRegistration{}
	}
	return t.ClusterRegistration
}

type GetClusterRegistrations struct {
	ClusterRegistrations *GetClusterRegistrations_ClusterRegistrations "json:\"clusterRegistrations,omitempty\" graphql:\"clusterRegistrations\""
}

func (t *GetClusterRegistrations) GetClusterRegistrations() *GetClusterRegistrations_ClusterRegistrations {
	if t == nil {
		t = &GetClusterRegistrations{}
	}
	return t.ClusterRegistrations
}

type CreateClusterRegistration struct {
	CreateClusterRegistration *ClusterRegistrationFragment "json:\"createClusterRegistration,omitempty\" graphql:\"createClusterRegistration\""
}

func (t *CreateClusterRegistration) GetCreateClusterRegistration() *ClusterRegistrationFragment {
	if t == nil {
		t = &CreateClusterRegistration{}
	}
	return t.CreateClusterRegistration
}

type UpdateClusterRegistration struct {
	UpdateClusterRegistration *ClusterRegistrationFragment "json:\"updateClusterRegistration,omitempty\" graphql:\"updateClusterRegistration\""
}

func (t *UpdateClusterRegistration) GetUpdateClusterRegistration() *ClusterRegistrationFragment {
	if t == nil {
		t = &UpdateClusterRegistration{}
	}
	return t.UpdateClusterRegistration
}

type DeleteClusterRegistration struct {
	DeleteClusterRegistration *ClusterRegistrationFragment "json:\"deleteClusterRegistration,omitempty\" graphql:\"deleteClusterRegistration\""
}

func (t *DeleteClusterRegistration) GetDeleteClusterRegistration() *ClusterRegistrationFragment {
	if t == nil {
		t = &DeleteClusterRegistration{}
	}
	return t.DeleteClusterRegistration
}

type CreateClusterIsoImage struct {
	CreateClusterIsoImage *ClusterIsoImageFragment "json:\"createClusterIsoImage,omitempty\" graphql:\"createClusterIsoImage\""
}

func (t *CreateClusterIsoImage) GetCreateClusterIsoImage() *ClusterIsoImageFragment {
	if t == nil {
		t = &CreateClusterIsoImage{}
	}
	return t.CreateClusterIsoImage
}

type UpdateClusterIsoImage struct {
	UpdateClusterIsoImage *ClusterIsoImageFragment "json:\"updateClusterIsoImage,omitempty\" graphql:\"updateClusterIsoImage\""
}

func (t *UpdateClusterIsoImage) GetUpdateClusterIsoImage() *ClusterIsoImageFragment {
	if t == nil {
		t = &UpdateClusterIsoImage{}
	}
	return t.UpdateClusterIsoImage
}

type DeleteClusterIsoImage struct {
	DeleteClusterIsoImage *ClusterIsoImageFragment "json:\"deleteClusterIsoImage,omitempty\" graphql:\"deleteClusterIsoImage\""
}

func (t *DeleteClusterIsoImage) GetDeleteClusterIsoImage() *ClusterIsoImageFragment {
	if t == nil {
		t = &DeleteClusterIsoImage{}
	}
	return t.DeleteClusterIsoImage
}

type GetClusterIsoImage struct {
	ClusterIsoImage *ClusterIsoImageFragment "json:\"clusterIsoImage,omitempty\" graphql:\"clusterIsoImage\""
}

func (t *GetClusterIsoImage) GetClusterIsoImage() *ClusterIsoImageFragment {
	if t == nil {
		t = &GetClusterIsoImage{}
	}
	return t.ClusterIsoImage
}

type GetFederatedCredential struct {
	FederatedCredential *FederatedCredentialFragment "json:\"federatedCredential,omitempty\" graphql:\"federatedCredential\""
}

func (t *GetFederatedCredential) GetFederatedCredential() *FederatedCredentialFragment {
	if t == nil {
		t = &GetFederatedCredential{}
	}
	return t.FederatedCredential
}

type CreateFederatedCredential struct {
	CreateFederatedCredential *FederatedCredentialFragment "json:\"createFederatedCredential,omitempty\" graphql:\"createFederatedCredential\""
}

func (t *CreateFederatedCredential) GetCreateFederatedCredential() *FederatedCredentialFragment {
	if t == nil {
		t = &CreateFederatedCredential{}
	}
	return t.CreateFederatedCredential
}

type DeleteFederatedCredential struct {
	DeleteFederatedCredential *DeleteFederatedCredential_DeleteFederatedCredential "json:\"deleteFederatedCredential,omitempty\" graphql:\"deleteFederatedCredential\""
}

func (t *DeleteFederatedCredential) GetDeleteFederatedCredential() *DeleteFederatedCredential_DeleteFederatedCredential {
	if t == nil {
		t = &DeleteFederatedCredential{}
	}
	return t.DeleteFederatedCredential
}

type UpdateFederatedCredential struct {
	UpdateFederatedCredential *FederatedCredentialFragment "json:\"updateFederatedCredential,omitempty\" graphql:\"updateFederatedCredential\""
}

func (t *UpdateFederatedCredential) GetUpdateFederatedCredential() *FederatedCredentialFragment {
	if t == nil {
		t = &UpdateFederatedCredential{}
	}
	return t.UpdateFederatedCredential
}

type GetFlow struct {
	Flow *FlowFragment "json:\"flow,omitempty\" graphql:\"flow\""
}

func (t *GetFlow) GetFlow() *FlowFragment {
	if t == nil {
		t = &GetFlow{}
	}
	return t.Flow
}

type UpsertFlow struct {
	UpsertFlow *FlowFragment "json:\"upsertFlow,omitempty\" graphql:\"upsertFlow\""
}

func (t *UpsertFlow) GetUpsertFlow() *FlowFragment {
	if t == nil {
		t = &UpsertFlow{}
	}
	return t.UpsertFlow
}

type DeleteFlow struct {
	DeleteFlow *DeleteFlow_DeleteFlow "json:\"deleteFlow,omitempty\" graphql:\"deleteFlow\""
}

func (t *DeleteFlow) GetDeleteFlow() *DeleteFlow_DeleteFlow {
	if t == nil {
		t = &DeleteFlow{}
	}
	return t.DeleteFlow
}

type GetClusterGates struct {
	ClusterGates []*PipelineGateFragment "json:\"clusterGates,omitempty\" graphql:\"clusterGates\""
}

func (t *GetClusterGates) GetClusterGates() []*PipelineGateFragment {
	if t == nil {
		t = &GetClusterGates{}
	}
	return t.ClusterGates
}

type PagedClusterGates struct {
	PagedClusterGates *PagedClusterGates_PagedClusterGates "json:\"pagedClusterGates,omitempty\" graphql:\"pagedClusterGates\""
}

func (t *PagedClusterGates) GetPagedClusterGates() *PagedClusterGates_PagedClusterGates {
	if t == nil {
		t = &PagedClusterGates{}
	}
	return t.PagedClusterGates
}

type PagedClusterGateIDs struct {
	PagedClusterGates *PagedClusterGateIDs_PagedClusterGates "json:\"pagedClusterGates,omitempty\" graphql:\"pagedClusterGates\""
}

func (t *PagedClusterGateIDs) GetPagedClusterGates() *PagedClusterGateIDs_PagedClusterGates {
	if t == nil {
		t = &PagedClusterGateIDs{}
	}
	return t.PagedClusterGates
}

type UpdateGate struct {
	UpdateGate *PipelineGateFragment "json:\"updateGate,omitempty\" graphql:\"updateGate\""
}

func (t *UpdateGate) GetUpdateGate() *PipelineGateFragment {
	if t == nil {
		t = &UpdateGate{}
	}
	return t.UpdateGate
}

type GetClusterGate struct {
	ClusterGate *PipelineGateFragment "json:\"clusterGate,omitempty\" graphql:\"clusterGate\""
}

func (t *GetClusterGate) GetClusterGate() *PipelineGateFragment {
	if t == nil {
		t = &GetClusterGate{}
	}
	return t.ClusterGate
}

type CreateGitRepository struct {
	CreateGitRepository *GitRepositoryFragment "json:\"createGitRepository,omitempty\" graphql:\"createGitRepository\""
}

func (t *CreateGitRepository) GetCreateGitRepository() *GitRepositoryFragment {
	if t == nil {
		t = &CreateGitRepository{}
	}
	return t.CreateGitRepository
}

type UpdateGitRepository struct {
	UpdateGitRepository *GitRepositoryFragment "json:\"updateGitRepository,omitempty\" graphql:\"updateGitRepository\""
}

func (t *UpdateGitRepository) GetUpdateGitRepository() *GitRepositoryFragment {
	if t == nil {
		t = &UpdateGitRepository{}
	}
	return t.UpdateGitRepository
}

type DeleteGitRepository struct {
	DeleteGitRepository *GitRepositoryFragment "json:\"deleteGitRepository,omitempty\" graphql:\"deleteGitRepository\""
}

func (t *DeleteGitRepository) GetDeleteGitRepository() *GitRepositoryFragment {
	if t == nil {
		t = &DeleteGitRepository{}
	}
	return t.DeleteGitRepository
}

type ListGitRepositories struct {
	GitRepositories *ListGitRepositories_GitRepositories "json:\"gitRepositories,omitempty\" graphql:\"gitRepositories\""
}

func (t *ListGitRepositories) GetGitRepositories() *ListGitRepositories_GitRepositories {
	if t == nil {
		t = &ListGitRepositories{}
	}
	return t.GitRepositories
}

type GetGitRepository struct {
	GitRepository *GitRepositoryFragment "json:\"gitRepository,omitempty\" graphql:\"gitRepository\""
}

func (t *GetGitRepository) GetGitRepository() *GitRepositoryFragment {
	if t == nil {
		t = &GetGitRepository{}
	}
	return t.GitRepository
}

type GetScmConnection struct {
	ScmConnection *ScmConnectionFragment "json:\"scmConnection,omitempty\" graphql:\"scmConnection\""
}

func (t *GetScmConnection) GetScmConnection() *ScmConnectionFragment {
	if t == nil {
		t = &GetScmConnection{}
	}
	return t.ScmConnection
}

type GetScmConnectionByName struct {
	ScmConnection *ScmConnectionFragment "json:\"scmConnection,omitempty\" graphql:\"scmConnection\""
}

func (t *GetScmConnectionByName) GetScmConnection() *ScmConnectionFragment {
	if t == nil {
		t = &GetScmConnectionByName{}
	}
	return t.ScmConnection
}

type ListScmConnections struct {
	ScmConnections *ListScmConnections_ScmConnections "json:\"scmConnections,omitempty\" graphql:\"scmConnections\""
}

func (t *ListScmConnections) GetScmConnections() *ListScmConnections_ScmConnections {
	if t == nil {
		t = &ListScmConnections{}
	}
	return t.ScmConnections
}

type CreateScmConnection struct {
	CreateScmConnection *ScmConnectionFragment "json:\"createScmConnection,omitempty\" graphql:\"createScmConnection\""
}

func (t *CreateScmConnection) GetCreateScmConnection() *ScmConnectionFragment {
	if t == nil {
		t = &CreateScmConnection{}
	}
	return t.CreateScmConnection
}

type UpdateScmConnection struct {
	UpdateScmConnection *ScmConnectionFragment "json:\"updateScmConnection,omitempty\" graphql:\"updateScmConnection\""
}

func (t *UpdateScmConnection) GetUpdateScmConnection() *ScmConnectionFragment {
	if t == nil {
		t = &UpdateScmConnection{}
	}
	return t.UpdateScmConnection
}

type DeleteScmConnection struct {
	DeleteScmConnection *ScmConnectionFragment "json:\"deleteScmConnection,omitempty\" graphql:\"deleteScmConnection\""
}

func (t *DeleteScmConnection) GetDeleteScmConnection() *ScmConnectionFragment {
	if t == nil {
		t = &DeleteScmConnection{}
	}
	return t.DeleteScmConnection
}

type GetPrAutomation struct {
	PrAutomation *PrAutomationFragment "json:\"prAutomation,omitempty\" graphql:\"prAutomation\""
}

func (t *GetPrAutomation) GetPrAutomation() *PrAutomationFragment {
	if t == nil {
		t = &GetPrAutomation{}
	}
	return t.PrAutomation
}

type GetPrAutomationByName struct {
	PrAutomation *PrAutomationFragment "json:\"prAutomation,omitempty\" graphql:\"prAutomation\""
}

func (t *GetPrAutomationByName) GetPrAutomation() *PrAutomationFragment {
	if t == nil {
		t = &GetPrAutomationByName{}
	}
	return t.PrAutomation
}

type ListPrAutomations struct {
	PrAutomations *ListPrAutomations_PrAutomations "json:\"prAutomations,omitempty\" graphql:\"prAutomations\""
}

func (t *ListPrAutomations) GetPrAutomations() *ListPrAutomations_PrAutomations {
	if t == nil {
		t = &ListPrAutomations{}
	}
	return t.PrAutomations
}

type CreatePrAutomation struct {
	CreatePrAutomation *PrAutomationFragment "json:\"createPrAutomation,omitempty\" graphql:\"createPrAutomation\""
}

func (t *CreatePrAutomation) GetCreatePrAutomation() *PrAutomationFragment {
	if t == nil {
		t = &CreatePrAutomation{}
	}
	return t.CreatePrAutomation
}

type UpdatePrAutomation struct {
	UpdatePrAutomation *PrAutomationFragment "json:\"updatePrAutomation,omitempty\" graphql:\"updatePrAutomation\""
}

func (t *UpdatePrAutomation) GetUpdatePrAutomation() *PrAutomationFragment {
	if t == nil {
		t = &UpdatePrAutomation{}
	}
	return t.UpdatePrAutomation
}

type DeletePrAutomation struct {
	DeletePrAutomation *PrAutomationFragment "json:\"deletePrAutomation,omitempty\" graphql:\"deletePrAutomation\""
}

func (t *DeletePrAutomation) GetDeletePrAutomation() *PrAutomationFragment {
	if t == nil {
		t = &DeletePrAutomation{}
	}
	return t.DeletePrAutomation
}

type CreatePullRequest struct {
	CreatePullRequest *PullRequestFragment "json:\"createPullRequest,omitempty\" graphql:\"createPullRequest\""
}

func (t *CreatePullRequest) GetCreatePullRequest() *PullRequestFragment {
	if t == nil {
		t = &CreatePullRequest{}
	}
	return t.CreatePullRequest
}

type GetPrGovernance struct {
	PrGovernance *PrGovernanceFragment "json:\"prGovernance,omitempty\" graphql:\"prGovernance\""
}

func (t *GetPrGovernance) GetPrGovernance() *PrGovernanceFragment {
	if t == nil {
		t = &GetPrGovernance{}
	}
	return t.PrGovernance
}

type DeletePrGovernance struct {
	DeletePrGovernance *PrGovernanceFragment "json:\"deletePrGovernance,omitempty\" graphql:\"deletePrGovernance\""
}

func (t *DeletePrGovernance) GetDeletePrGovernance() *PrGovernanceFragment {
	if t == nil {
		t = &DeletePrGovernance{}
	}
	return t.DeletePrGovernance
}

type UpsertPrGovernance struct {
	UpsertPrGovernance *PrGovernanceFragment "json:\"upsertPrGovernance,omitempty\" graphql:\"upsertPrGovernance\""
}

func (t *UpsertPrGovernance) GetUpsertPrGovernance() *PrGovernanceFragment {
	if t == nil {
		t = &UpsertPrGovernance{}
	}
	return t.UpsertPrGovernance
}

type GetGroup struct {
	Group *GroupFragment "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GetGroup) GetGroup() *GroupFragment {
	if t == nil {
		t = &GetGroup{}
	}
	return t.Group
}

type CreateGroup struct {
	CreateGroup *GroupFragment "json:\"createGroup,omitempty\" graphql:\"createGroup\""
}

func (t *CreateGroup) GetCreateGroup() *GroupFragment {
	if t == nil {
		t = &CreateGroup{}
	}
	return t.CreateGroup
}

type UpdateGroup struct {
	UpdateGroup *GroupFragment "json:\"updateGroup,omitempty\" graphql:\"updateGroup\""
}

func (t *UpdateGroup) GetUpdateGroup() *GroupFragment {
	if t == nil {
		t = &UpdateGroup{}
	}
	return t.UpdateGroup
}

type DeleteGroup struct {
	DeleteGroup *GroupFragment "json:\"deleteGroup,omitempty\" graphql:\"deleteGroup\""
}

func (t *DeleteGroup) GetDeleteGroup() *GroupFragment {
	if t == nil {
		t = &DeleteGroup{}
	}
	return t.DeleteGroup
}

type ListHelmRepositories struct {
	HelmRepositories *ListHelmRepositories_HelmRepositories "json:\"helmRepositories,omitempty\" graphql:\"helmRepositories\""
}

func (t *ListHelmRepositories) GetHelmRepositories() *ListHelmRepositories_HelmRepositories {
	if t == nil {
		t = &ListHelmRepositories{}
	}
	return t.HelmRepositories
}

type GetHelmRepository struct {
	HelmRepository *HelmRepositoryFragment "json:\"helmRepository,omitempty\" graphql:\"helmRepository\""
}

func (t *GetHelmRepository) GetHelmRepository() *HelmRepositoryFragment {
	if t == nil {
		t = &GetHelmRepository{}
	}
	return t.HelmRepository
}

type UpsertHelmRepository struct {
	UpsertHelmRepository *HelmRepositoryFragment "json:\"upsertHelmRepository,omitempty\" graphql:\"upsertHelmRepository\""
}

func (t *UpsertHelmRepository) GetUpsertHelmRepository() *HelmRepositoryFragment {
	if t == nil {
		t = &UpsertHelmRepository{}
	}
	return t.UpsertHelmRepository
}

type IngestClusterCost struct {
	IngestClusterCost *bool "json:\"ingestClusterCost,omitempty\" graphql:\"ingestClusterCost\""
}

func (t *IngestClusterCost) GetIngestClusterCost() *bool {
	if t == nil {
		t = &IngestClusterCost{}
	}
	return t.IngestClusterCost
}

type GetMCPServers struct {
	McpServers *GetMCPServers_McpServers "json:\"mcpServers,omitempty\" graphql:\"mcpServers\""
}

func (t *GetMCPServers) GetMcpServers() *GetMCPServers_McpServers {
	if t == nil {
		t = &GetMCPServers{}
	}
	return t.McpServers
}

type GetMCPServer struct {
	McpServer *MCPServerFragment "json:\"mcpServer,omitempty\" graphql:\"mcpServer\""
}

func (t *GetMCPServer) GetMcpServer() *MCPServerFragment {
	if t == nil {
		t = &GetMCPServer{}
	}
	return t.McpServer
}

type UpsertMCPServer struct {
	UpsertMcpServer *MCPServerFragment "json:\"upsertMcpServer,omitempty\" graphql:\"upsertMcpServer\""
}

func (t *UpsertMCPServer) GetUpsertMcpServer() *MCPServerFragment {
	if t == nil {
		t = &UpsertMCPServer{}
	}
	return t.UpsertMcpServer
}

type DeleteMCPServer struct {
	DeleteMcpServer *DeleteMCPServer_DeleteMcpServer "json:\"deleteMcpServer,omitempty\" graphql:\"deleteMcpServer\""
}

func (t *DeleteMCPServer) GetDeleteMcpServer() *DeleteMCPServer_DeleteMcpServer {
	if t == nil {
		t = &DeleteMCPServer{}
	}
	return t.DeleteMcpServer
}

type ListNamespaces struct {
	ManagedNamespaces *ListNamespaces_ManagedNamespaces "json:\"managedNamespaces,omitempty\" graphql:\"managedNamespaces\""
}

func (t *ListNamespaces) GetManagedNamespaces() *ListNamespaces_ManagedNamespaces {
	if t == nil {
		t = &ListNamespaces{}
	}
	return t.ManagedNamespaces
}

type ListClusterNamespaces struct {
	ClusterManagedNamespaces *ListClusterNamespaces_ClusterManagedNamespaces "json:\"clusterManagedNamespaces,omitempty\" graphql:\"clusterManagedNamespaces\""
}

func (t *ListClusterNamespaces) GetClusterManagedNamespaces() *ListClusterNamespaces_ClusterManagedNamespaces {
	if t == nil {
		t = &ListClusterNamespaces{}
	}
	return t.ClusterManagedNamespaces
}

type GetNamespace struct {
	ManagedNamespace *ManagedNamespaceFragment "json:\"managedNamespace,omitempty\" graphql:\"managedNamespace\""
}

func (t *GetNamespace) GetManagedNamespace() *ManagedNamespaceFragment {
	if t == nil {
		t = &GetNamespace{}
	}
	return t.ManagedNamespace
}

type GetNamespaceByName struct {
	ManagedNamespace *ManagedNamespaceFragment "json:\"managedNamespace,omitempty\" graphql:\"managedNamespace\""
}

func (t *GetNamespaceByName) GetManagedNamespace() *ManagedNamespaceFragment {
	if t == nil {
		t = &GetNamespaceByName{}
	}
	return t.ManagedNamespace
}

type CreateNamespace struct {
	CreateManagedNamespace *ManagedNamespaceFragment "json:\"createManagedNamespace,omitempty\" graphql:\"createManagedNamespace\""
}

func (t *CreateNamespace) GetCreateManagedNamespace() *ManagedNamespaceFragment {
	if t == nil {
		t = &CreateNamespace{}
	}
	return t.CreateManagedNamespace
}

type UpdateNamespace struct {
	UpdateManagedNamespace *ManagedNamespaceFragment "json:\"updateManagedNamespace,omitempty\" graphql:\"updateManagedNamespace\""
}

func (t *UpdateNamespace) GetUpdateManagedNamespace() *ManagedNamespaceFragment {
	if t == nil {
		t = &UpdateNamespace{}
	}
	return t.UpdateManagedNamespace
}

type DeleteNamespace struct {
	DeleteManagedNamespace *DeleteNamespace_DeleteManagedNamespace "json:\"deleteManagedNamespace,omitempty\" graphql:\"deleteManagedNamespace\""
}

func (t *DeleteNamespace) GetDeleteManagedNamespace() *DeleteNamespace_DeleteManagedNamespace {
	if t == nil {
		t = &DeleteNamespace{}
	}
	return t.DeleteManagedNamespace
}

type UpsertNotificationSink struct {
	UpsertNotificationSink *NotificationSinkFragment "json:\"upsertNotificationSink,omitempty\" graphql:\"upsertNotificationSink\""
}

func (t *UpsertNotificationSink) GetUpsertNotificationSink() *NotificationSinkFragment {
	if t == nil {
		t = &UpsertNotificationSink{}
	}
	return t.UpsertNotificationSink
}

type DeleteNotificationSink struct {
	DeleteNotificationSink *NotificationSinkFragment "json:\"deleteNotificationSink,omitempty\" graphql:\"deleteNotificationSink\""
}

func (t *DeleteNotificationSink) GetDeleteNotificationSink() *NotificationSinkFragment {
	if t == nil {
		t = &DeleteNotificationSink{}
	}
	return t.DeleteNotificationSink
}

type GetNotificationSink struct {
	NotificationSink *NotificationSinkFragment "json:\"notificationSink,omitempty\" graphql:\"notificationSink\""
}

func (t *GetNotificationSink) GetNotificationSink() *NotificationSinkFragment {
	if t == nil {
		t = &GetNotificationSink{}
	}
	return t.NotificationSink
}

type GetNotificationSinkByName struct {
	NotificationSink *NotificationSinkFragment "json:\"notificationSink,omitempty\" graphql:\"notificationSink\""
}

func (t *GetNotificationSinkByName) GetNotificationSink() *NotificationSinkFragment {
	if t == nil {
		t = &GetNotificationSinkByName{}
	}
	return t.NotificationSink
}

type ListNotificationSinks struct {
	NotificationSinks *ListNotificationSinks_NotificationSinks "json:\"notificationSinks,omitempty\" graphql:\"notificationSinks\""
}

func (t *ListNotificationSinks) GetNotificationSinks() *ListNotificationSinks_NotificationSinks {
	if t == nil {
		t = &ListNotificationSinks{}
	}
	return t.NotificationSinks
}

type GetNotificationRouter struct {
	NotificationRouter *NotificationRouterFragment "json:\"notificationRouter,omitempty\" graphql:\"notificationRouter\""
}

func (t *GetNotificationRouter) GetNotificationRouter() *NotificationRouterFragment {
	if t == nil {
		t = &GetNotificationRouter{}
	}
	return t.NotificationRouter
}

type GetNotificationRouterByName struct {
	NotificationRouter *NotificationRouterFragment "json:\"notificationRouter,omitempty\" graphql:\"notificationRouter\""
}

func (t *GetNotificationRouterByName) GetNotificationRouter() *NotificationRouterFragment {
	if t == nil {
		t = &GetNotificationRouterByName{}
	}
	return t.NotificationRouter
}

type DeleteNotificationRouter struct {
	DeleteNotificationRouter *NotificationRouterFragment "json:\"deleteNotificationRouter,omitempty\" graphql:\"deleteNotificationRouter\""
}

func (t *DeleteNotificationRouter) GetDeleteNotificationRouter() *NotificationRouterFragment {
	if t == nil {
		t = &DeleteNotificationRouter{}
	}
	return t.DeleteNotificationRouter
}

type UpsertNotificationRouter struct {
	UpsertNotificationRouter *NotificationRouterFragment "json:\"upsertNotificationRouter,omitempty\" graphql:\"upsertNotificationRouter\""
}

func (t *UpsertNotificationRouter) GetUpsertNotificationRouter() *NotificationRouterFragment {
	if t == nil {
		t = &UpsertNotificationRouter{}
	}
	return t.UpsertNotificationRouter
}

type CreateOIDCProvider struct {
	CreateOidcProvider *OIDCProviderFragment "json:\"createOidcProvider,omitempty\" graphql:\"createOidcProvider\""
}

func (t *CreateOIDCProvider) GetCreateOidcProvider() *OIDCProviderFragment {
	if t == nil {
		t = &CreateOIDCProvider{}
	}
	return t.CreateOidcProvider
}

type UpdateOIDCProvider struct {
	UpdateOidcProvider *OIDCProviderFragment "json:\"updateOidcProvider,omitempty\" graphql:\"updateOidcProvider\""
}

func (t *UpdateOIDCProvider) GetUpdateOidcProvider() *OIDCProviderFragment {
	if t == nil {
		t = &UpdateOIDCProvider{}
	}
	return t.UpdateOidcProvider
}

type DeleteOIDCProvider struct {
	DeleteOidcProvider *OIDCProviderFragment "json:\"deleteOidcProvider,omitempty\" graphql:\"deleteOidcProvider\""
}

func (t *DeleteOIDCProvider) GetDeleteOidcProvider() *OIDCProviderFragment {
	if t == nil {
		t = &DeleteOIDCProvider{}
	}
	return t.DeleteOidcProvider
}

type ListObservabilityProviders struct {
	ObservabilityProviders *ListObservabilityProviders_ObservabilityProviders "json:\"observabilityProviders,omitempty\" graphql:\"observabilityProviders\""
}

func (t *ListObservabilityProviders) GetObservabilityProviders() *ListObservabilityProviders_ObservabilityProviders {
	if t == nil {
		t = &ListObservabilityProviders{}
	}
	return t.ObservabilityProviders
}

type GetObservabilityProvider struct {
	ObservabilityProvider *ObservabilityProviderFragment "json:\"observabilityProvider,omitempty\" graphql:\"observabilityProvider\""
}

func (t *GetObservabilityProvider) GetObservabilityProvider() *ObservabilityProviderFragment {
	if t == nil {
		t = &GetObservabilityProvider{}
	}
	return t.ObservabilityProvider
}

type UpsertObservabilityProvider struct {
	UpsertObservabilityProvider *ObservabilityProviderFragment "json:\"upsertObservabilityProvider,omitempty\" graphql:\"upsertObservabilityProvider\""
}

func (t *UpsertObservabilityProvider) GetUpsertObservabilityProvider() *ObservabilityProviderFragment {
	if t == nil {
		t = &UpsertObservabilityProvider{}
	}
	return t.UpsertObservabilityProvider
}

type DeleteObservabilityProvider struct {
	DeleteObservabilityProvider *ObservabilityProviderFragment "json:\"deleteObservabilityProvider,omitempty\" graphql:\"deleteObservabilityProvider\""
}

func (t *DeleteObservabilityProvider) GetDeleteObservabilityProvider() *ObservabilityProviderFragment {
	if t == nil {
		t = &DeleteObservabilityProvider{}
	}
	return t.DeleteObservabilityProvider
}

type UpsertObserver struct {
	UpsertObserver *ObserverFragment "json:\"upsertObserver,omitempty\" graphql:\"upsertObserver\""
}

func (t *UpsertObserver) GetUpsertObserver() *ObserverFragment {
	if t == nil {
		t = &UpsertObserver{}
	}
	return t.UpsertObserver
}

type DeleteObserver struct {
	DeleteObserver *ObserverFragment "json:\"deleteObserver,omitempty\" graphql:\"deleteObserver\""
}

func (t *DeleteObserver) GetDeleteObserver() *ObserverFragment {
	if t == nil {
		t = &DeleteObserver{}
	}
	return t.DeleteObserver
}

type GetObserver struct {
	Observer *ObserverFragment "json:\"observer,omitempty\" graphql:\"observer\""
}

func (t *GetObserver) GetObserver() *ObserverFragment {
	if t == nil {
		t = &GetObserver{}
	}
	return t.Observer
}

type UpsertPolicyConstraints struct {
	UpsertPolicyConstraints *int64 "json:\"upsertPolicyConstraints,omitempty\" graphql:\"upsertPolicyConstraints\""
}

func (t *UpsertPolicyConstraints) GetUpsertPolicyConstraints() *int64 {
	if t == nil {
		t = &UpsertPolicyConstraints{}
	}
	return t.UpsertPolicyConstraints
}

type ListPolicyConstraints struct {
	PolicyConstraints *PolicyConstraintConnectionFragment "json:\"policyConstraints,omitempty\" graphql:\"policyConstraints\""
}

func (t *ListPolicyConstraints) GetPolicyConstraints() *PolicyConstraintConnectionFragment {
	if t == nil {
		t = &ListPolicyConstraints{}
	}
	return t.PolicyConstraints
}

type ListViolationStatistics struct {
	ViolationStatistics []*ViolationStatisticFragment "json:\"violationStatistics,omitempty\" graphql:\"violationStatistics\""
}

func (t *ListViolationStatistics) GetViolationStatistics() []*ViolationStatisticFragment {
	if t == nil {
		t = &ListViolationStatistics{}
	}
	return t.ViolationStatistics
}

type GetPersona struct {
	Persona *PersonaFragment "json:\"persona,omitempty\" graphql:\"persona\""
}

func (t *GetPersona) GetPersona() *PersonaFragment {
	if t == nil {
		t = &GetPersona{}
	}
	return t.Persona
}

type CreatePersona struct {
	CreatePersona *PersonaFragment "json:\"createPersona,omitempty\" graphql:\"createPersona\""
}

func (t *CreatePersona) GetCreatePersona() *PersonaFragment {
	if t == nil {
		t = &CreatePersona{}
	}
	return t.CreatePersona
}

type UpdatePersona struct {
	UpdatePersona *PersonaFragment "json:\"updatePersona,omitempty\" graphql:\"updatePersona\""
}

func (t *UpdatePersona) GetUpdatePersona() *PersonaFragment {
	if t == nil {
		t = &UpdatePersona{}
	}
	return t.UpdatePersona
}

type DeletePersona struct {
	DeletePersona *PersonaFragment "json:\"deletePersona,omitempty\" graphql:\"deletePersona\""
}

func (t *DeletePersona) GetDeletePersona() *PersonaFragment {
	if t == nil {
		t = &DeletePersona{}
	}
	return t.DeletePersona
}

type SavePipeline struct {
	SavePipeline *PipelineFragmentMinimal "json:\"savePipeline,omitempty\" graphql:\"savePipeline\""
}

func (t *SavePipeline) GetSavePipeline() *PipelineFragmentMinimal {
	if t == nil {
		t = &SavePipeline{}
	}
	return t.SavePipeline
}

type DeletePipeline struct {
	DeletePipeline *PipelineFragmentID "json:\"deletePipeline,omitempty\" graphql:\"deletePipeline\""
}

func (t *DeletePipeline) GetDeletePipeline() *PipelineFragmentID {
	if t == nil {
		t = &DeletePipeline{}
	}
	return t.DeletePipeline
}

type GetPipeline struct {
	Pipeline *PipelineFragmentMinimal "json:\"pipeline,omitempty\" graphql:\"pipeline\""
}

func (t *GetPipeline) GetPipeline() *PipelineFragmentMinimal {
	if t == nil {
		t = &GetPipeline{}
	}
	return t.Pipeline
}

type GetPipelines struct {
	Pipelines *GetPipelines_Pipelines "json:\"pipelines,omitempty\" graphql:\"pipelines\""
}

func (t *GetPipelines) GetPipelines() *GetPipelines_Pipelines {
	if t == nil {
		t = &GetPipelines{}
	}
	return t.Pipelines
}

type CreatePipelineContext struct {
	CreatePipelineContext *PipelineContextFragment "json:\"createPipelineContext,omitempty\" graphql:\"createPipelineContext\""
}

func (t *CreatePipelineContext) GetCreatePipelineContext() *PipelineContextFragment {
	if t == nil {
		t = &CreatePipelineContext{}
	}
	return t.CreatePipelineContext
}

type GetPipelineContext struct {
	PipelineContext *PipelineContextFragment "json:\"pipelineContext,omitempty\" graphql:\"pipelineContext\""
}

func (t *GetPipelineContext) GetPipelineContext() *PipelineContextFragment {
	if t == nil {
		t = &GetPipelineContext{}
	}
	return t.PipelineContext
}

type ListComplianceReportGenerators struct {
	ComplianceReportGenerators *ListComplianceReportGenerators_ComplianceReportGenerators "json:\"complianceReportGenerators,omitempty\" graphql:\"complianceReportGenerators\""
}

func (t *ListComplianceReportGenerators) GetComplianceReportGenerators() *ListComplianceReportGenerators_ComplianceReportGenerators {
	if t == nil {
		t = &ListComplianceReportGenerators{}
	}
	return t.ComplianceReportGenerators
}

type GetComplianceReportGenerator struct {
	ComplianceReportGenerator *ComplianceReportGeneratorFragment "json:\"complianceReportGenerator,omitempty\" graphql:\"complianceReportGenerator\""
}

func (t *GetComplianceReportGenerator) GetComplianceReportGenerator() *ComplianceReportGeneratorFragment {
	if t == nil {
		t = &GetComplianceReportGenerator{}
	}
	return t.ComplianceReportGenerator
}

type UpsertComplianceReportGenerator struct {
	UpsertComplianceReportGenerator *ComplianceReportGeneratorFragment "json:\"upsertComplianceReportGenerator,omitempty\" graphql:\"upsertComplianceReportGenerator\""
}

func (t *UpsertComplianceReportGenerator) GetUpsertComplianceReportGenerator() *ComplianceReportGeneratorFragment {
	if t == nil {
		t = &UpsertComplianceReportGenerator{}
	}
	return t.UpsertComplianceReportGenerator
}

type DeleteComplianceReportGenerator struct {
	DeleteComplianceReportGenerator *ComplianceReportGeneratorFragment "json:\"deleteComplianceReportGenerator,omitempty\" graphql:\"deleteComplianceReportGenerator\""
}

func (t *DeleteComplianceReportGenerator) GetDeleteComplianceReportGenerator() *ComplianceReportGeneratorFragment {
	if t == nil {
		t = &DeleteComplianceReportGenerator{}
	}
	return t.DeleteComplianceReportGenerator
}

type GetPreviewEnvironmentTemplate struct {
	PreviewEnvironmentTemplate *PreviewEnvironmentTemplateFragment "json:\"previewEnvironmentTemplate,omitempty\" graphql:\"previewEnvironmentTemplate\""
}

func (t *GetPreviewEnvironmentTemplate) GetPreviewEnvironmentTemplate() *PreviewEnvironmentTemplateFragment {
	if t == nil {
		t = &GetPreviewEnvironmentTemplate{}
	}
	return t.PreviewEnvironmentTemplate
}

type UpsertPreviewEnvironmentTemplate struct {
	UpsertPreviewEnvironmentTemplate *PreviewEnvironmentTemplateFragment "json:\"upsertPreviewEnvironmentTemplate,omitempty\" graphql:\"upsertPreviewEnvironmentTemplate\""
}

func (t *UpsertPreviewEnvironmentTemplate) GetUpsertPreviewEnvironmentTemplate() *PreviewEnvironmentTemplateFragment {
	if t == nil {
		t = &UpsertPreviewEnvironmentTemplate{}
	}
	return t.UpsertPreviewEnvironmentTemplate
}

type DeletePreviewEnvironmentTemplate struct {
	DeletePreviewEnvironmentTemplate *DeletePreviewEnvironmentTemplate_DeletePreviewEnvironmentTemplate "json:\"deletePreviewEnvironmentTemplate,omitempty\" graphql:\"deletePreviewEnvironmentTemplate\""
}

func (t *DeletePreviewEnvironmentTemplate) GetDeletePreviewEnvironmentTemplate() *DeletePreviewEnvironmentTemplate_DeletePreviewEnvironmentTemplate {
	if t == nil {
		t = &DeletePreviewEnvironmentTemplate{}
	}
	return t.DeletePreviewEnvironmentTemplate
}

type ListProjects struct {
	Projects *ListProjects_Projects "json:\"projects,omitempty\" graphql:\"projects\""
}

func (t *ListProjects) GetProjects() *ListProjects_Projects {
	if t == nil {
		t = &ListProjects{}
	}
	return t.Projects
}

type GetProject struct {
	Project *ProjectFragment "json:\"project,omitempty\" graphql:\"project\""
}

func (t *GetProject) GetProject() *ProjectFragment {
	if t == nil {
		t = &GetProject{}
	}
	return t.Project
}

type CreateProject struct {
	CreateProject *ProjectFragment "json:\"createProject,omitempty\" graphql:\"createProject\""
}

func (t *CreateProject) GetCreateProject() *ProjectFragment {
	if t == nil {
		t = &CreateProject{}
	}
	return t.CreateProject
}

type UpdateProject struct {
	UpdateProject *ProjectFragment "json:\"updateProject,omitempty\" graphql:\"updateProject\""
}

func (t *UpdateProject) GetUpdateProject() *ProjectFragment {
	if t == nil {
		t = &UpdateProject{}
	}
	return t.UpdateProject
}

type DeleteProject struct {
	DeleteProject *ProjectFragment "json:\"deleteProject,omitempty\" graphql:\"deleteProject\""
}

func (t *DeleteProject) GetDeleteProject() *ProjectFragment {
	if t == nil {
		t = &DeleteProject{}
	}
	return t.DeleteProject
}

type CreateProviderCredential struct {
	CreateProviderCredential *ProviderCredentialFragment "json:\"createProviderCredential,omitempty\" graphql:\"createProviderCredential\""
}

func (t *CreateProviderCredential) GetCreateProviderCredential() *ProviderCredentialFragment {
	if t == nil {
		t = &CreateProviderCredential{}
	}
	return t.CreateProviderCredential
}

type DeleteProviderCredential struct {
	DeleteProviderCredential *ProviderCredentialFragment "json:\"deleteProviderCredential,omitempty\" graphql:\"deleteProviderCredential\""
}

func (t *DeleteProviderCredential) GetDeleteProviderCredential() *ProviderCredentialFragment {
	if t == nil {
		t = &DeleteProviderCredential{}
	}
	return t.DeleteProviderCredential
}

type ListProviders struct {
	ClusterProviders *ListProviders_ClusterProviders "json:\"clusterProviders,omitempty\" graphql:\"clusterProviders\""
}

func (t *ListProviders) GetClusterProviders() *ListProviders_ClusterProviders {
	if t == nil {
		t = &ListProviders{}
	}
	return t.ClusterProviders
}

type UpdateRbac struct {
	UpdateRbac *bool "json:\"updateRbac,omitempty\" graphql:\"updateRbac\""
}

func (t *UpdateRbac) GetUpdateRbac() *bool {
	if t == nil {
		t = &UpdateRbac{}
	}
	return t.UpdateRbac
}

type CreateSentinel struct {
	CreateSentinel *SentinelFragment "json:\"createSentinel,omitempty\" graphql:\"createSentinel\""
}

func (t *CreateSentinel) GetCreateSentinel() *SentinelFragment {
	if t == nil {
		t = &CreateSentinel{}
	}
	return t.CreateSentinel
}

type UpdateSentinel struct {
	UpdateSentinel *SentinelFragment "json:\"updateSentinel,omitempty\" graphql:\"updateSentinel\""
}

func (t *UpdateSentinel) GetUpdateSentinel() *SentinelFragment {
	if t == nil {
		t = &UpdateSentinel{}
	}
	return t.UpdateSentinel
}

type DeleteSentinel struct {
	DeleteSentinel *DeleteSentinel_DeleteSentinel "json:\"deleteSentinel,omitempty\" graphql:\"deleteSentinel\""
}

func (t *DeleteSentinel) GetDeleteSentinel() *DeleteSentinel_DeleteSentinel {
	if t == nil {
		t = &DeleteSentinel{}
	}
	return t.DeleteSentinel
}

type GetSentinel struct {
	Sentinel *SentinelFragment "json:\"sentinel,omitempty\" graphql:\"sentinel\""
}

func (t *GetSentinel) GetSentinel() *SentinelFragment {
	if t == nil {
		t = &GetSentinel{}
	}
	return t.Sentinel
}

type ServiceAccounts struct {
	ServiceAccounts *ServiceAccounts_ServiceAccounts "json:\"serviceAccounts,omitempty\" graphql:\"serviceAccounts\""
}

func (t *ServiceAccounts) GetServiceAccounts() *ServiceAccounts_ServiceAccounts {
	if t == nil {
		t = &ServiceAccounts{}
	}
	return t.ServiceAccounts
}

type CreateServiceAccount struct {
	CreateServiceAccount *UserFragment "json:\"createServiceAccount,omitempty\" graphql:\"createServiceAccount\""
}

func (t *CreateServiceAccount) GetCreateServiceAccount() *UserFragment {
	if t == nil {
		t = &CreateServiceAccount{}
	}
	return t.CreateServiceAccount
}

type UpdateServiceAccount struct {
	UpdateServiceAccount *UserFragment "json:\"updateServiceAccount,omitempty\" graphql:\"updateServiceAccount\""
}

func (t *UpdateServiceAccount) GetUpdateServiceAccount() *UserFragment {
	if t == nil {
		t = &UpdateServiceAccount{}
	}
	return t.UpdateServiceAccount
}

type CreateServiceAccountToken struct {
	CreateServiceAccountToken *AccessTokenFragment "json:\"createServiceAccountToken,omitempty\" graphql:\"createServiceAccountToken\""
}

func (t *CreateServiceAccountToken) GetCreateServiceAccountToken() *AccessTokenFragment {
	if t == nil {
		t = &CreateServiceAccountToken{}
	}
	return t.CreateServiceAccountToken
}

type ShareSecret struct {
	ShareSecret *ShareSecret_ShareSecret "json:\"shareSecret,omitempty\" graphql:\"shareSecret\""
}

func (t *ShareSecret) GetShareSecret() *ShareSecret_ShareSecret {
	if t == nil {
		t = &ShareSecret{}
	}
	return t.ShareSecret
}

type ListClusterStacks struct {
	ClusterStackRuns *ListClusterStacks_ClusterStackRuns "json:\"clusterStackRuns,omitempty\" graphql:\"clusterStackRuns\""
}

func (t *ListClusterStacks) GetClusterStackRuns() *ListClusterStacks_ClusterStackRuns {
	if t == nil {
		t = &ListClusterStacks{}
	}
	return t.ClusterStackRuns
}

type ListClusterStackIds struct {
	ClusterStackRuns *ListClusterStackIds_ClusterStackRuns "json:\"clusterStackRuns,omitempty\" graphql:\"clusterStackRuns\""
}

func (t *ListClusterStackIds) GetClusterStackRuns() *ListClusterStackIds_ClusterStackRuns {
	if t == nil {
		t = &ListClusterStackIds{}
	}
	return t.ClusterStackRuns
}

type ListClusterMinimalStacks struct {
	ClusterStackRuns *ListClusterMinimalStacks_ClusterStackRuns "json:\"clusterStackRuns,omitempty\" graphql:\"clusterStackRuns\""
}

func (t *ListClusterMinimalStacks) GetClusterStackRuns() *ListClusterMinimalStacks_ClusterStackRuns {
	if t == nil {
		t = &ListClusterMinimalStacks{}
	}
	return t.ClusterStackRuns
}

type ListInfrastructureStacks struct {
	InfrastructureStacks *ListInfrastructureStacks_InfrastructureStacks "json:\"infrastructureStacks,omitempty\" graphql:\"infrastructureStacks\""
}

func (t *ListInfrastructureStacks) GetInfrastructureStacks() *ListInfrastructureStacks_InfrastructureStacks {
	if t == nil {
		t = &ListInfrastructureStacks{}
	}
	return t.InfrastructureStacks
}

type GetStackRunMinimal struct {
	StackRun *StackRunMinimalFragment "json:\"stackRun,omitempty\" graphql:\"stackRun\""
}

func (t *GetStackRunMinimal) GetStackRun() *StackRunMinimalFragment {
	if t == nil {
		t = &GetStackRunMinimal{}
	}
	return t.StackRun
}

type GetStackRun struct {
	StackRun *StackRunFragment "json:\"stackRun,omitempty\" graphql:\"stackRun\""
}

func (t *GetStackRun) GetStackRun() *StackRunFragment {
	if t == nil {
		t = &GetStackRun{}
	}
	return t.StackRun
}

type GetStackRunBase struct {
	StackRun *StackRunBaseFragment "json:\"stackRun,omitempty\" graphql:\"stackRun\""
}

func (t *GetStackRunBase) GetStackRun() *StackRunBaseFragment {
	if t == nil {
		t = &GetStackRunBase{}
	}
	return t.StackRun
}

type UpdateStackRun struct {
	UpdateStackRun *StackRunBaseFragment "json:\"updateStackRun,omitempty\" graphql:\"updateStackRun\""
}

func (t *UpdateStackRun) GetUpdateStackRun() *StackRunBaseFragment {
	if t == nil {
		t = &UpdateStackRun{}
	}
	return t.UpdateStackRun
}

type ApproveStackRun struct {
	ApproveStackRun *StackRunIDFragment "json:\"approveStackRun,omitempty\" graphql:\"approveStackRun\""
}

func (t *ApproveStackRun) GetApproveStackRun() *StackRunIDFragment {
	if t == nil {
		t = &ApproveStackRun{}
	}
	return t.ApproveStackRun
}

type CreateStack struct {
	CreateStack *InfrastructureStackFragment "json:\"createStack,omitempty\" graphql:\"createStack\""
}

func (t *CreateStack) GetCreateStack() *InfrastructureStackFragment {
	if t == nil {
		t = &CreateStack{}
	}
	return t.CreateStack
}

type UpdateStack struct {
	UpdateStack *InfrastructureStackFragment "json:\"updateStack,omitempty\" graphql:\"updateStack\""
}

func (t *UpdateStack) GetUpdateStack() *InfrastructureStackFragment {
	if t == nil {
		t = &UpdateStack{}
	}
	return t.UpdateStack
}

type DetachStack struct {
	DetachStack *InfrastructureStackIDFragment "json:\"detachStack,omitempty\" graphql:\"detachStack\""
}

func (t *DetachStack) GetDetachStack() *InfrastructureStackIDFragment {
	if t == nil {
		t = &DetachStack{}
	}
	return t.DetachStack
}

type DeleteStack struct {
	DeleteStack *InfrastructureStackIDFragment "json:\"deleteStack,omitempty\" graphql:\"deleteStack\""
}

func (t *DeleteStack) GetDeleteStack() *InfrastructureStackIDFragment {
	if t == nil {
		t = &DeleteStack{}
	}
	return t.DeleteStack
}

type GetInfrastructureStack struct {
	InfrastructureStack *InfrastructureStackFragment "json:\"infrastructureStack,omitempty\" graphql:\"infrastructureStack\""
}

func (t *GetInfrastructureStack) GetInfrastructureStack() *InfrastructureStackFragment {
	if t == nil {
		t = &GetInfrastructureStack{}
	}
	return t.InfrastructureStack
}

type GetInfrastructureStackID struct {
	InfrastructureStack *InfrastructureStackIDFragment "json:\"infrastructureStack,omitempty\" graphql:\"infrastructureStack\""
}

func (t *GetInfrastructureStackID) GetInfrastructureStack() *InfrastructureStackIDFragment {
	if t == nil {
		t = &GetInfrastructureStackID{}
	}
	return t.InfrastructureStack
}

type GetInfrastructureStackStatus struct {
	InfrastructureStack *InfrastructureStackStatusFragment "json:\"infrastructureStack,omitempty\" graphql:\"infrastructureStack\""
}

func (t *GetInfrastructureStackStatus) GetInfrastructureStack() *InfrastructureStackStatusFragment {
	if t == nil {
		t = &GetInfrastructureStackStatus{}
	}
	return t.InfrastructureStack
}

type CompletesStackRun struct {
	CompleteStackRun *StackRunIDFragment "json:\"completeStackRun,omitempty\" graphql:\"completeStackRun\""
}

func (t *CompletesStackRun) GetCompleteStackRun() *StackRunIDFragment {
	if t == nil {
		t = &CompletesStackRun{}
	}
	return t.CompleteStackRun
}

type AddStackRunLogs struct {
	AddRunLogs *AddStackRunLogs_AddRunLogs "json:\"addRunLogs,omitempty\" graphql:\"addRunLogs\""
}

func (t *AddStackRunLogs) GetAddRunLogs() *AddStackRunLogs_AddRunLogs {
	if t == nil {
		t = &AddStackRunLogs{}
	}
	return t.AddRunLogs
}

type UpdateStackRunStep struct {
	UpdateRunStep *RunStepFragment "json:\"updateRunStep,omitempty\" graphql:\"updateRunStep\""
}

func (t *UpdateStackRunStep) GetUpdateRunStep() *RunStepFragment {
	if t == nil {
		t = &UpdateStackRunStep{}
	}
	return t.UpdateRunStep
}

type UpdateCustomStackRun struct {
	UpdateCustomStackRun *CustomStackRunFragment "json:\"updateCustomStackRun,omitempty\" graphql:\"updateCustomStackRun\""
}

func (t *UpdateCustomStackRun) GetUpdateCustomStackRun() *CustomStackRunFragment {
	if t == nil {
		t = &UpdateCustomStackRun{}
	}
	return t.UpdateCustomStackRun
}

type CreateCustomStackRun struct {
	CreateCustomStackRun *CustomStackRunFragment "json:\"createCustomStackRun,omitempty\" graphql:\"createCustomStackRun\""
}

func (t *CreateCustomStackRun) GetCreateCustomStackRun() *CustomStackRunFragment {
	if t == nil {
		t = &CreateCustomStackRun{}
	}
	return t.CreateCustomStackRun
}

type DeleteCustomStackRun struct {
	DeleteCustomStackRun *CustomStackRunFragment "json:\"deleteCustomStackRun,omitempty\" graphql:\"deleteCustomStackRun\""
}

func (t *DeleteCustomStackRun) GetDeleteCustomStackRun() *CustomStackRunFragment {
	if t == nil {
		t = &DeleteCustomStackRun{}
	}
	return t.DeleteCustomStackRun
}

type GetCustomStackRun struct {
	CustomStackRun *CustomStackRunFragment "json:\"customStackRun,omitempty\" graphql:\"customStackRun\""
}

func (t *GetCustomStackRun) GetCustomStackRun() *CustomStackRunFragment {
	if t == nil {
		t = &GetCustomStackRun{}
	}
	return t.CustomStackRun
}

type ListStackRuns struct {
	InfrastructureStack *ListStackRuns_InfrastructureStack "json:\"infrastructureStack,omitempty\" graphql:\"infrastructureStack\""
}

func (t *ListStackRuns) GetInfrastructureStack() *ListStackRuns_InfrastructureStack {
	if t == nil {
		t = &ListStackRuns{}
	}
	return t.InfrastructureStack
}

type TriggerRun struct {
	TriggerRun *StackRunBaseFragment "json:\"triggerRun,omitempty\" graphql:\"triggerRun\""
}

func (t *TriggerRun) GetTriggerRun() *StackRunBaseFragment {
	if t == nil {
		t = &TriggerRun{}
	}
	return t.TriggerRun
}

type GetStackDefinition struct {
	StackDefinition *StackDefinitionFragment "json:\"stackDefinition,omitempty\" graphql:\"stackDefinition\""
}

func (t *GetStackDefinition) GetStackDefinition() *StackDefinitionFragment {
	if t == nil {
		t = &GetStackDefinition{}
	}
	return t.StackDefinition
}

type ListStackDefinitions struct {
	StackDefinitions *ListStackDefinitions_StackDefinitions "json:\"stackDefinitions,omitempty\" graphql:\"stackDefinitions\""
}

func (t *ListStackDefinitions) GetStackDefinitions() *ListStackDefinitions_StackDefinitions {
	if t == nil {
		t = &ListStackDefinitions{}
	}
	return t.StackDefinitions
}

type CreateStackDefinition struct {
	CreateStackDefinition *StackDefinitionFragment "json:\"createStackDefinition,omitempty\" graphql:\"createStackDefinition\""
}

func (t *CreateStackDefinition) GetCreateStackDefinition() *StackDefinitionFragment {
	if t == nil {
		t = &CreateStackDefinition{}
	}
	return t.CreateStackDefinition
}

type UpdateStackDefinition struct {
	UpdateStackDefinition *StackDefinitionFragment "json:\"updateStackDefinition,omitempty\" graphql:\"updateStackDefinition\""
}

func (t *UpdateStackDefinition) GetUpdateStackDefinition() *StackDefinitionFragment {
	if t == nil {
		t = &UpdateStackDefinition{}
	}
	return t.UpdateStackDefinition
}

type DeleteStackDefinition struct {
	DeleteStackDefinition *StackDefinitionFragment "json:\"deleteStackDefinition,omitempty\" graphql:\"deleteStackDefinition\""
}

func (t *DeleteStackDefinition) GetDeleteStackDefinition() *StackDefinitionFragment {
	if t == nil {
		t = &DeleteStackDefinition{}
	}
	return t.DeleteStackDefinition
}

type ListAccessTokens struct {
	AccessTokens *ListAccessTokens_AccessTokens "json:\"accessTokens,omitempty\" graphql:\"accessTokens\""
}

func (t *ListAccessTokens) GetAccessTokens() *ListAccessTokens_AccessTokens {
	if t == nil {
		t = &ListAccessTokens{}
	}
	return t.AccessTokens
}

type GetAccessToken struct {
	AccessToken *AccessTokenFragment "json:\"accessToken,omitempty\" graphql:\"accessToken\""
}

func (t *GetAccessToken) GetAccessToken() *AccessTokenFragment {
	if t == nil {
		t = &GetAccessToken{}
	}
	return t.AccessToken
}

type TokenExchange struct {
	TokenExchange *TokenExchange_TokenExchange "json:\"tokenExchange,omitempty\" graphql:\"tokenExchange\""
}

func (t *TokenExchange) GetTokenExchange() *TokenExchange_TokenExchange {
	if t == nil {
		t = &TokenExchange{}
	}
	return t.TokenExchange
}

type CreateAccessToken struct {
	CreateAccessToken *AccessTokenFragment "json:\"createAccessToken,omitempty\" graphql:\"createAccessToken\""
}

func (t *CreateAccessToken) GetCreateAccessToken() *AccessTokenFragment {
	if t == nil {
		t = &CreateAccessToken{}
	}
	return t.CreateAccessToken
}

type DeleteAccessToken struct {
	DeleteAccessToken *AccessTokenFragment "json:\"deleteAccessToken,omitempty\" graphql:\"deleteAccessToken\""
}

func (t *DeleteAccessToken) GetDeleteAccessToken() *AccessTokenFragment {
	if t == nil {
		t = &DeleteAccessToken{}
	}
	return t.DeleteAccessToken
}

type SaveUpgradeInsights struct {
	SaveUpgradeInsights []*SaveUpgradeInsights_SaveUpgradeInsights "json:\"saveUpgradeInsights,omitempty\" graphql:\"saveUpgradeInsights\""
}

func (t *SaveUpgradeInsights) GetSaveUpgradeInsights() []*SaveUpgradeInsights_SaveUpgradeInsights {
	if t == nil {
		t = &SaveUpgradeInsights{}
	}
	return t.SaveUpgradeInsights
}

type GetUser struct {
	User *UserFragment "json:\"user,omitempty\" graphql:\"user\""
}

func (t *GetUser) GetUser() *UserFragment {
	if t == nil {
		t = &GetUser{}
	}
	return t.User
}

type CreateUser struct {
	CreateUser *UserFragment "json:\"createUser,omitempty\" graphql:\"createUser\""
}

func (t *CreateUser) GetCreateUser() *UserFragment {
	if t == nil {
		t = &CreateUser{}
	}
	return t.CreateUser
}

type UpdateUser struct {
	UpdateUser *UserFragment "json:\"updateUser,omitempty\" graphql:\"updateUser\""
}

func (t *UpdateUser) GetUpdateUser() *UserFragment {
	if t == nil {
		t = &UpdateUser{}
	}
	return t.UpdateUser
}

type UpsertUser struct {
	UpsertUser *UserFragment "json:\"upsertUser,omitempty\" graphql:\"upsertUser\""
}

func (t *UpsertUser) GetUpsertUser() *UserFragment {
	if t == nil {
		t = &UpsertUser{}
	}
	return t.UpsertUser
}

type DeleteUser struct {
	DeleteUser *UserFragment "json:\"deleteUser,omitempty\" graphql:\"deleteUser\""
}

func (t *DeleteUser) GetDeleteUser() *UserFragment {
	if t == nil {
		t = &DeleteUser{}
	}
	return t.DeleteUser
}

type AddGroupMember struct {
	CreateGroupMember *GroupMemberFragment "json:\"createGroupMember,omitempty\" graphql:\"createGroupMember\""
}

func (t *AddGroupMember) GetCreateGroupMember() *GroupMemberFragment {
	if t == nil {
		t = &AddGroupMember{}
	}
	return t.CreateGroupMember
}

type DeleteGroupMember struct {
	DeleteGroupMember *GroupMemberFragment "json:\"deleteGroupMember,omitempty\" graphql:\"deleteGroupMember\""
}

func (t *DeleteGroupMember) GetDeleteGroupMember() *GroupMemberFragment {
	if t == nil {
		t = &DeleteGroupMember{}
	}
	return t.DeleteGroupMember
}

type UpsertVulnerabilities struct {
	UpsertVulnerabilities *int64 "json:\"upsertVulnerabilities,omitempty\" graphql:\"upsertVulnerabilities\""
}

func (t *UpsertVulnerabilities) GetUpsertVulnerabilities() *int64 {
	if t == nil {
		t = &UpsertVulnerabilities{}
	}
	return t.UpsertVulnerabilities
}

const GetAgentRuntimeDocument = `query GetAgentRuntime ($id: ID!) {
	agentRuntime(id: $id) {
		... AgentRuntimeFragment
	}
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetAgentRuntime(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAgentRuntime, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetAgentRuntime
	if err := c.Client.Post(ctx, "GetAgentRuntime", GetAgentRuntimeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertAgentRuntimeDocument = `mutation UpsertAgentRuntime ($attributes: AgentRuntimeAttributes!) {
	upsertAgentRuntime(attributes: $attributes) {
		... AgentRuntimeFragment
	}
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertAgentRuntime(ctx context.Context, attributes AgentRuntimeAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertAgentRuntime, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertAgentRuntime
	if err := c.Client.Post(ctx, "UpsertAgentRuntime", UpsertAgentRuntimeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAgentRuntimeDocument = `mutation DeleteAgentRuntime ($id: ID!) {
	deleteAgentRuntime(id: $id) {
		id
	}
}
`

func (c *Client) DeleteAgentRuntime(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteAgentRuntime, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteAgentRuntime
	if err := c.Client.Post(ctx, "DeleteAgentRuntime", DeleteAgentRuntimeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListAgentRuntimesDocument = `query ListAgentRuntimes ($after: String, $first: Int, $before: String, $last: Int, $q: String, $type: AgentRuntimeType) {
	agentRuntimes(after: $after, first: $first, before: $before, last: $last, q: $q, type: $type) {
		edges {
			node {
				... AgentRuntimeFragment
			}
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
`

func (c *Client) ListAgentRuntimes(ctx context.Context, after *string, first *int64, before *string, last *int64, q *string, typeArg *AgentRuntimeType, interceptors ...clientv2.RequestInterceptor) (*ListAgentRuntimes, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
		"q":      q,
		"type":   typeArg,
	}

	var res ListAgentRuntimes
	if err := c.Client.Post(ctx, "ListAgentRuntimes", ListAgentRuntimesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAgentRunDocument = `query GetAgentRun ($id: ID!) {
	agentRun(id: $id) {
		... AgentRunFragment
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) GetAgentRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAgentRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetAgentRun
	if err := c.Client.Post(ctx, "GetAgentRun", GetAgentRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListAgentRunsDocument = `query ListAgentRuns ($after: String, $first: Int, $before: String, $last: Int) {
	agentRuns(after: $after, first: $first, before: $before, last: $last) {
		edges {
			node {
				... AgentRunFragment
			}
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
`

func (c *Client) ListAgentRuns(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListAgentRuns, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListAgentRuns
	if err := c.Client.Post(ctx, "ListAgentRuns", ListAgentRunsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListAgentRuntimePendingRunsDocument = `query ListAgentRuntimePendingRuns ($id: ID!, $after: String, $first: Int, $before: String, $last: Int) {
	agentRuntime(id: $id) {
		pendingRuns(after: $after, first: $first, before: $before, last: $last) {
			edges {
				node {
					... AgentRunFragment
				}
			}
			pageInfo {
				... PageInfoFragment
			}
		}
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
`

func (c *Client) ListAgentRuntimePendingRuns(ctx context.Context, id string, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListAgentRuntimePendingRuns, error) {
	vars := map[string]any{
		"id":     id,
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListAgentRuntimePendingRuns
	if err := c.Client.Post(ctx, "ListAgentRuntimePendingRuns", ListAgentRuntimePendingRunsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CancelAgentRunDocument = `mutation CancelAgentRun ($id: ID!) {
	cancelAgentRun(id: $id) {
		id
	}
}
`

func (c *Client) CancelAgentRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CancelAgentRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res CancelAgentRun
	if err := c.Client.Post(ctx, "CancelAgentRun", CancelAgentRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAgentRunDocument = `mutation CreateAgentRun ($runtimeId: ID!, $attributes: AgentRunAttributes!) {
	createAgentRun(runtimeId: $runtimeId, attributes: $attributes) {
		... AgentRunFragment
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) CreateAgentRun(ctx context.Context, runtimeID string, attributes AgentRunAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateAgentRun, error) {
	vars := map[string]any{
		"runtimeId":  runtimeID,
		"attributes": attributes,
	}

	var res CreateAgentRun
	if err := c.Client.Post(ctx, "CreateAgentRun", CreateAgentRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAgentRunDocument = `mutation UpdateAgentRun ($id: ID!, $attributes: AgentRunStatusAttributes!) {
	updateAgentRun(id: $id, attributes: $attributes) {
		... AgentRunFragment
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) UpdateAgentRun(ctx context.Context, id string, attributes AgentRunStatusAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateAgentRun, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateAgentRun
	if err := c.Client.Post(ctx, "UpdateAgentRun", UpdateAgentRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAgentRunAnalysisDocument = `mutation UpdateAgentRunAnalysis ($id: ID!, $attributes: AgentAnalysisAttributes!) {
	updateAgentRunAnalysis(id: $id, attributes: $attributes) {
		... AgentRunFragment
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) UpdateAgentRunAnalysis(ctx context.Context, id string, attributes AgentAnalysisAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateAgentRunAnalysis, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateAgentRunAnalysis
	if err := c.Client.Post(ctx, "UpdateAgentRunAnalysis", UpdateAgentRunAnalysisDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAgentRunTodosDocument = `mutation UpdateAgentRunTodos ($id: ID!, $todos: [AgentTodoAttributes]) {
	updateAgentRunTodos(id: $id, todos: $todos) {
		... AgentRunFragment
	}
}
fragment AgentRunFragment on AgentRun {
	id
	prompt
	repository
	status
	mode
	podReference {
		... AgentPodReferenceFragment
	}
	error
	analysis {
		... AgentAnalysisFragment
	}
	todos {
		... AgentTodoFragment
	}
	scmCreds {
		... ScmCredentialFragment
	}
	pluralCreds {
		... PluralCredsFragment
	}
	runtime {
		... AgentRuntimeFragment
	}
	user {
		id
		name
		email
	}
	flow {
		id
		name
	}
	pullRequests {
		... PullRequestFragment
	}
}
fragment AgentPodReferenceFragment on AgentPodReference {
	name
	namespace
}
fragment AgentAnalysisFragment on AgentAnalysis {
	summary
	analysis
	bullets
}
fragment AgentTodoFragment on AgentTodo {
	description
	done
	title
}
fragment ScmCredentialFragment on ScmCreds {
	token
	username
}
fragment PluralCredsFragment on PluralCreds {
	token
	url
}
fragment AgentRuntimeFragment on AgentRuntime {
	id
	name
	type
	aiProxy
	cluster {
		... TinyClusterFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) UpdateAgentRunTodos(ctx context.Context, id string, todos []*AgentTodoAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateAgentRunTodos, error) {
	vars := map[string]any{
		"id":    id,
		"todos": todos,
	}

	var res UpdateAgentRunTodos
	if err := c.Client.Post(ctx, "UpdateAgentRunTodos", UpdateAgentRunTodosDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAgentPullRequestDocument = `mutation CreateAgentPullRequest ($runId: ID!, $attributes: AgentPullRequestAttributes!) {
	agentPullRequest(runId: $runId, attributes: $attributes) {
		... PullRequestFragment
	}
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) CreateAgentPullRequest(ctx context.Context, runID string, attributes AgentPullRequestAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateAgentPullRequest, error) {
	vars := map[string]any{
		"runId":      runID,
		"attributes": attributes,
	}

	var res CreateAgentPullRequest
	if err := c.Client.Post(ctx, "CreateAgentPullRequest", CreateAgentPullRequestDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddClusterAuditLogDocument = `mutation AddClusterAuditLog ($attributes: ClusterAuditAttributes!) {
	addClusterAuditLog(audit: $attributes)
}
`

func (c *Client) AddClusterAuditLog(ctx context.Context, attributes ClusterAuditAttributes, interceptors ...clientv2.RequestInterceptor) (*AddClusterAuditLog, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res AddClusterAuditLog
	if err := c.Client.Post(ctx, "AddClusterAuditLog", AddClusterAuditLogDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListScmWebhooksDocument = `query ListScmWebhooks ($after: String, $before: String, $first: Int, $last: Int) {
	scmWebhooks(after: $after, before: $before, first: $first, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... ScmWebhookFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ScmWebhookFragment on ScmWebhook {
	id
	insertedAt
	updatedAt
	name
	owner
	type
	url
}
`

func (c *Client) ListScmWebhooks(ctx context.Context, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListScmWebhooks, error) {
	vars := map[string]any{
		"after":  after,
		"before": before,
		"first":  first,
		"last":   last,
	}

	var res ListScmWebhooks
	if err := c.Client.Post(ctx, "ListScmWebhooks", ListScmWebhooksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScmWebhookDocument = `query GetScmWebhook ($id: ID, $externalId: String) {
	scmWebhook(id: $id, externalId: $externalId) {
		... ScmWebhookFragment
	}
}
fragment ScmWebhookFragment on ScmWebhook {
	id
	insertedAt
	updatedAt
	name
	owner
	type
	url
}
`

func (c *Client) GetScmWebhook(ctx context.Context, id *string, externalID *string, interceptors ...clientv2.RequestInterceptor) (*GetScmWebhook, error) {
	vars := map[string]any{
		"id":         id,
		"externalId": externalID,
	}

	var res GetScmWebhook
	if err := c.Client.Post(ctx, "GetScmWebhook", GetScmWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateScmWebhookDocument = `mutation CreateScmWebhook ($connectionId: ID!, $owner: String!) {
	createScmWebhook(connectionId: $connectionId, owner: $owner) {
		... ScmWebhookFragment
	}
}
fragment ScmWebhookFragment on ScmWebhook {
	id
	insertedAt
	updatedAt
	name
	owner
	type
	url
}
`

func (c *Client) CreateScmWebhook(ctx context.Context, connectionID string, owner string, interceptors ...clientv2.RequestInterceptor) (*CreateScmWebhook, error) {
	vars := map[string]any{
		"connectionId": connectionID,
		"owner":        owner,
	}

	var res CreateScmWebhook
	if err := c.Client.Post(ctx, "CreateScmWebhook", CreateScmWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateScmWebhookPointerDocument = `mutation CreateScmWebhookPointer ($attributes: ScmWebhookAttributes!) {
	createScmWebhookPointer(attributes: $attributes) {
		... ScmWebhookFragment
	}
}
fragment ScmWebhookFragment on ScmWebhook {
	id
	insertedAt
	updatedAt
	name
	owner
	type
	url
}
`

func (c *Client) CreateScmWebhookPointer(ctx context.Context, attributes ScmWebhookAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateScmWebhookPointer, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateScmWebhookPointer
	if err := c.Client.Post(ctx, "CreateScmWebhookPointer", CreateScmWebhookPointerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteScmWebhookDocument = `mutation DeleteScmWebhook ($id: ID!) {
	deleteScmWebhook(id: $id) {
		... ScmWebhookFragment
	}
}
fragment ScmWebhookFragment on ScmWebhook {
	id
	insertedAt
	updatedAt
	name
	owner
	type
	url
}
`

func (c *Client) DeleteScmWebhook(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteScmWebhook, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteScmWebhook
	if err := c.Client.Post(ctx, "DeleteScmWebhook", DeleteScmWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListObservabilityWebhooksDocument = `query ListObservabilityWebhooks ($after: String, $before: String, $first: Int, $last: Int) {
	observabilityWebhooks(after: $after, before: $before, first: $first, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... ObservabilityWebhookFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ObservabilityWebhookFragment on ObservabilityWebhook {
	id
	insertedAt
	updatedAt
	name
	type
	url
}
`

func (c *Client) ListObservabilityWebhooks(ctx context.Context, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListObservabilityWebhooks, error) {
	vars := map[string]any{
		"after":  after,
		"before": before,
		"first":  first,
		"last":   last,
	}

	var res ListObservabilityWebhooks
	if err := c.Client.Post(ctx, "ListObservabilityWebhooks", ListObservabilityWebhooksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetObservabilityWebhookDocument = `query GetObservabilityWebhook ($id: ID, $name: String) {
	observabilityWebhook(id: $id, name: $name) {
		... ObservabilityWebhookFragment
	}
}
fragment ObservabilityWebhookFragment on ObservabilityWebhook {
	id
	insertedAt
	updatedAt
	name
	type
	url
}
`

func (c *Client) GetObservabilityWebhook(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetObservabilityWebhook, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetObservabilityWebhook
	if err := c.Client.Post(ctx, "GetObservabilityWebhook", GetObservabilityWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertObservabilityWebhookDocument = `mutation UpsertObservabilityWebhook ($attributes: ObservabilityWebhookAttributes!) {
	upsertObservabilityWebhook(attributes: $attributes) {
		... ObservabilityWebhookFragment
	}
}
fragment ObservabilityWebhookFragment on ObservabilityWebhook {
	id
	insertedAt
	updatedAt
	name
	type
	url
}
`

func (c *Client) UpsertObservabilityWebhook(ctx context.Context, attributes ObservabilityWebhookAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertObservabilityWebhook, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertObservabilityWebhook
	if err := c.Client.Post(ctx, "UpsertObservabilityWebhook", UpsertObservabilityWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteObservabilityWebhookDocument = `mutation DeleteObservabilityWebhook ($id: ID!) {
	deleteObservabilityWebhook(id: $id) {
		... ObservabilityWebhookFragment
	}
}
fragment ObservabilityWebhookFragment on ObservabilityWebhook {
	id
	insertedAt
	updatedAt
	name
	type
	url
}
`

func (c *Client) DeleteObservabilityWebhook(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteObservabilityWebhook, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteObservabilityWebhook
	if err := c.Client.Post(ctx, "DeleteObservabilityWebhook", DeleteObservabilityWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateClusterBackupDocument = `mutation CreateClusterBackup ($attributes: BackupAttributes!) {
	createClusterBackup(attributes: $attributes) {
		... ClusterBackupFragment
	}
}
fragment ClusterBackupFragment on ClusterBackup {
	id
	name
	cluster {
		id
	}
	garbageCollected
}
`

func (c *Client) CreateClusterBackup(ctx context.Context, attributes BackupAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterBackup, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateClusterBackup
	if err := c.Client.Post(ctx, "CreateClusterBackup", CreateClusterBackupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterBackupDocument = `query GetClusterBackup ($id: ID, $clusterId: ID, $namespace: String, $name: String) {
	clusterBackup(id: $id, clusterId: $clusterId, namespace: $namespace, name: $name) {
		... ClusterBackupFragment
	}
}
fragment ClusterBackupFragment on ClusterBackup {
	id
	name
	cluster {
		id
	}
	garbageCollected
}
`

func (c *Client) GetClusterBackup(ctx context.Context, id *string, clusterID *string, namespace *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterBackup, error) {
	vars := map[string]any{
		"id":        id,
		"clusterId": clusterID,
		"namespace": namespace,
		"name":      name,
	}

	var res GetClusterBackup
	if err := c.Client.Post(ctx, "GetClusterBackup", GetClusterBackupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateClusterRestoreDocument = `mutation UpdateClusterRestore ($id: ID!, $attributes: RestoreAttributes!) {
	updateClusterRestore(id: $id, attributes: $attributes) {
		... ClusterRestoreFragment
	}
}
fragment ClusterRestoreFragment on ClusterRestore {
	id
	status
	backup {
		... ClusterBackupFragment
	}
}
fragment ClusterBackupFragment on ClusterBackup {
	id
	name
	cluster {
		id
	}
	garbageCollected
}
`

func (c *Client) UpdateClusterRestore(ctx context.Context, id string, attributes RestoreAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterRestore, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateClusterRestore
	if err := c.Client.Post(ctx, "UpdateClusterRestore", UpdateClusterRestoreDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateClusterRestoreDocument = `mutation CreateClusterRestore ($backupId: ID!) {
	createClusterRestore(backupId: $backupId) {
		... ClusterRestoreFragment
	}
}
fragment ClusterRestoreFragment on ClusterRestore {
	id
	status
	backup {
		... ClusterBackupFragment
	}
}
fragment ClusterBackupFragment on ClusterBackup {
	id
	name
	cluster {
		id
	}
	garbageCollected
}
`

func (c *Client) CreateClusterRestore(ctx context.Context, backupID string, interceptors ...clientv2.RequestInterceptor) (*CreateClusterRestore, error) {
	vars := map[string]any{
		"backupId": backupID,
	}

	var res CreateClusterRestore
	if err := c.Client.Post(ctx, "CreateClusterRestore", CreateClusterRestoreDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterRestoreDocument = `query GetClusterRestore ($id: ID!) {
	clusterRestore(id: $id) {
		... ClusterRestoreFragment
	}
}
fragment ClusterRestoreFragment on ClusterRestore {
	id
	status
	backup {
		... ClusterBackupFragment
	}
}
fragment ClusterBackupFragment on ClusterBackup {
	id
	name
	cluster {
		id
	}
	garbageCollected
}
`

func (c *Client) GetClusterRestore(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetClusterRestore, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetClusterRestore
	if err := c.Client.Post(ctx, "GetClusterRestore", GetClusterRestoreDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBootstrapTokenDocument = `mutation CreateBootstrapToken ($attributes: BootstrapTokenAttributes!) {
	createBootstrapToken(attributes: $attributes) {
		... BootstrapTokenBase
	}
}
fragment BootstrapTokenBase on BootstrapToken {
	id
	token
}
`

func (c *Client) CreateBootstrapToken(ctx context.Context, attributes BootstrapTokenAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateBootstrapToken, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateBootstrapToken
	if err := c.Client.Post(ctx, "CreateBootstrapToken", CreateBootstrapTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteBootstrapTokenDocument = `mutation DeleteBootstrapToken ($id: ID!) {
	deleteBootstrapToken(id: $id) {
		id
	}
}
`

func (c *Client) DeleteBootstrapToken(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteBootstrapToken, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteBootstrapToken
	if err := c.Client.Post(ctx, "DeleteBootstrapToken", DeleteBootstrapTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertCatalogDocument = `mutation UpsertCatalog ($attributes: CatalogAttributes) {
	upsertCatalog(attributes: $attributes) {
		... CatalogFragment
	}
}
fragment CatalogFragment on Catalog {
	id
	name
	description
	category
	author
	project {
		... ProjectFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	insertedAt
	updatedAt
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertCatalog(ctx context.Context, attributes *CatalogAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertCatalog, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertCatalog
	if err := c.Client.Post(ctx, "UpsertCatalog", UpsertCatalogDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteCatalogDocument = `mutation DeleteCatalog ($id: ID!) {
	deleteCatalog(id: $id) {
		... CatalogFragment
	}
}
fragment CatalogFragment on Catalog {
	id
	name
	description
	category
	author
	project {
		... ProjectFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	insertedAt
	updatedAt
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteCatalog(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCatalog, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteCatalog
	if err := c.Client.Post(ctx, "DeleteCatalog", DeleteCatalogDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCatalogDocument = `query GetCatalog ($id: ID, $name: String) {
	catalog(id: $id, name: $name) {
		... CatalogFragment
	}
}
fragment CatalogFragment on Catalog {
	id
	name
	description
	category
	author
	project {
		... ProjectFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	insertedAt
	updatedAt
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetCatalog(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetCatalog, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetCatalog
	if err := c.Client.Post(ctx, "GetCatalog", GetCatalogDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertCloudConnectionDocument = `mutation UpsertCloudConnection ($attributes: CloudConnectionAttributes!) {
	upsertCloudConnection(attributes: $attributes) {
		... CloudConnectionFragment
	}
}
fragment CloudConnectionFragment on CloudConnection {
	id
	name
	readBindings {
		... PolicyBindingFragment
	}
	provider
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertCloudConnection(ctx context.Context, attributes CloudConnectionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertCloudConnection, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertCloudConnection
	if err := c.Client.Post(ctx, "UpsertCloudConnection", UpsertCloudConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteCloudConnectionDocument = `mutation DeleteCloudConnection ($id: ID!) {
	deleteCloudConnection(id: $id) {
		... CloudConnectionFragment
	}
}
fragment CloudConnectionFragment on CloudConnection {
	id
	name
	readBindings {
		... PolicyBindingFragment
	}
	provider
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteCloudConnection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCloudConnection, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteCloudConnection
	if err := c.Client.Post(ctx, "DeleteCloudConnection", DeleteCloudConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCloudConnectionDocument = `query GetCloudConnection ($id: ID, $name: String) {
	cloudConnection(id: $id, name: $name) {
		... CloudConnectionFragment
	}
}
fragment CloudConnectionFragment on CloudConnection {
	id
	name
	readBindings {
		... PolicyBindingFragment
	}
	provider
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetCloudConnection(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetCloudConnection, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetCloudConnection
	if err := c.Client.Post(ctx, "GetCloudConnection", GetCloudConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateClusterDocument = `mutation CreateCluster ($attributes: ClusterAttributes!) {
	createCluster(attributes: $attributes) {
		deployToken
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) CreateCluster(ctx context.Context, attributes ClusterAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateCluster, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateCluster
	if err := c.Client.Post(ctx, "CreateCluster", CreateClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateClusterDocument = `mutation UpdateCluster ($id: ID!, $attributes: ClusterUpdateAttributes!) {
	updateCluster(id: $id, attributes: $attributes) {
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpdateCluster(ctx context.Context, id string, attributes ClusterUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateCluster, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateCluster
	if err := c.Client.Post(ctx, "UpdateCluster", UpdateClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteClusterDocument = `mutation DeleteCluster ($id: ID!) {
	deleteCluster(id: $id) {
		id
	}
}
`

func (c *Client) DeleteCluster(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCluster, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteCluster
	if err := c.Client.Post(ctx, "DeleteCluster", DeleteClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DetachClusterDocument = `mutation DetachCluster ($id: ID!) {
	detachCluster(id: $id) {
		id
	}
}
`

func (c *Client) DetachCluster(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DetachCluster, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DetachCluster
	if err := c.Client.Post(ctx, "DetachCluster", DetachClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateClusterProviderDocument = `mutation CreateClusterProvider ($attributes: ClusterProviderAttributes!) {
	createClusterProvider(attributes: $attributes) {
		... ClusterProviderFragment
	}
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) CreateClusterProvider(ctx context.Context, attributes ClusterProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterProvider, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateClusterProvider
	if err := c.Client.Post(ctx, "CreateClusterProvider", CreateClusterProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateClusterProviderDocument = `mutation UpdateClusterProvider ($id: ID!, $attributes: ClusterProviderUpdateAttributes!) {
	updateClusterProvider(id: $id, attributes: $attributes) {
		... ClusterProviderFragment
	}
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) UpdateClusterProvider(ctx context.Context, id string, attributes ClusterProviderUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterProvider, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateClusterProvider
	if err := c.Client.Post(ctx, "UpdateClusterProvider", UpdateClusterProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteClusterProviderDocument = `mutation DeleteClusterProvider ($id: ID!) {
	deleteClusterProvider(id: $id) {
		... ClusterProviderFragment
	}
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) DeleteClusterProvider(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteClusterProvider, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteClusterProvider
	if err := c.Client.Post(ctx, "DeleteClusterProvider", DeleteClusterProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PingClusterDocument = `mutation PingCluster ($attributes: ClusterPing!) {
	pingCluster(attributes: $attributes) {
		id
		name
	}
}
`

func (c *Client) PingCluster(ctx context.Context, attributes ClusterPing, interceptors ...clientv2.RequestInterceptor) (*PingCluster, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res PingCluster
	if err := c.Client.Post(ctx, "PingCluster", PingClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RegisterRuntimeServicesDocument = `mutation RegisterRuntimeServices ($services: [RuntimeServiceAttributes], $layout: OperationalLayoutAttributes, $deprecated: [DeprecatedCustomResourceAttributes], $serviceId: ID) {
	registerRuntimeServices(services: $services, layout: $layout, deprecated: $deprecated, serviceId: $serviceId)
}
`

func (c *Client) RegisterRuntimeServices(ctx context.Context, services []*RuntimeServiceAttributes, layout *OperationalLayoutAttributes, deprecated []*DeprecatedCustomResourceAttributes, serviceID *string, interceptors ...clientv2.RequestInterceptor) (*RegisterRuntimeServices, error) {
	vars := map[string]any{
		"services":   services,
		"layout":     layout,
		"deprecated": deprecated,
		"serviceId":  serviceID,
	}

	var res RegisterRuntimeServices
	if err := c.Client.Post(ctx, "RegisterRuntimeServices", RegisterRuntimeServicesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClustersDocument = `query ListClusters ($cursor: String, $before: String, $last: Int) {
	clusters(after: $cursor, first: 100, before: $before, last: $last) {
		edges {
			... ClusterEdgeFragment
		}
	}
}
fragment ClusterEdgeFragment on ClusterEdge {
	node {
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) ListClusters(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusters, error) {
	vars := map[string]any{
		"cursor": cursor,
		"before": before,
		"last":   last,
	}

	var res ListClusters
	if err := c.Client.Post(ctx, "ListClusters", ListClustersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClustersWithParametersDocument = `query ListClustersWithParameters ($after: String, $first: Int, $before: String, $last: Int, $projectId: ID, $tagQuery: TagQuery) {
	clusters(after: $after, first: $first, before: $before, last: $last, projectId: $projectId, tagQuery: $tagQuery) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... ClusterEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ClusterEdgeFragment on ClusterEdge {
	node {
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) ListClustersWithParameters(ctx context.Context, after *string, first *int64, before *string, last *int64, projectID *string, tagQuery *TagQuery, interceptors ...clientv2.RequestInterceptor) (*ListClustersWithParameters, error) {
	vars := map[string]any{
		"after":     after,
		"first":     first,
		"before":    before,
		"last":      last,
		"projectId": projectID,
		"tagQuery":  tagQuery,
	}

	var res ListClustersWithParameters
	if err := c.Client.Post(ctx, "ListClustersWithParameters", ListClustersWithParametersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterDocument = `query GetCluster ($id: ID) {
	cluster(id: $id) {
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetCluster(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetCluster, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetCluster
	if err := c.Client.Post(ctx, "GetCluster", GetClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTinyClusterDocument = `query GetTinyCluster ($id: ID) {
	cluster(id: $id) {
		... TinyClusterFragment
	}
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) GetTinyCluster(ctx context.Context, id *string, interceptors ...clientv2.RequestInterceptor) (*GetTinyCluster, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetTinyCluster
	if err := c.Client.Post(ctx, "GetTinyCluster", GetTinyClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAgentURLDocument = `query GetAgentUrl ($id: ID!) {
	cluster(id: $id) {
		agentUrl
	}
}
`

func (c *Client) GetAgentURL(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAgentURL, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetAgentURL
	if err := c.Client.Post(ctx, "GetAgentUrl", GetAgentURLDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterWithTokenDocument = `query GetClusterWithToken ($id: ID, $handle: String) {
	cluster(id: $id, handle: $handle) {
		... ClusterFragment
		deployToken
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetClusterWithToken(ctx context.Context, id *string, handle *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterWithToken, error) {
	vars := map[string]any{
		"id":     id,
		"handle": handle,
	}

	var res GetClusterWithToken
	if err := c.Client.Post(ctx, "GetClusterWithToken", GetClusterWithTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterByHandleDocument = `query GetClusterByHandle ($handle: String) {
	cluster(handle: $handle) {
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetClusterByHandle(ctx context.Context, handle *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterByHandle, error) {
	vars := map[string]any{
		"handle": handle,
	}

	var res GetClusterByHandle
	if err := c.Client.Post(ctx, "GetClusterByHandle", GetClusterByHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterProviderDocument = `query GetClusterProvider ($id: ID!) {
	clusterProvider(id: $id) {
		... ClusterProviderFragment
	}
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) GetClusterProvider(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetClusterProvider, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetClusterProvider
	if err := c.Client.Post(ctx, "GetClusterProvider", GetClusterProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterProviderByCloudDocument = `query GetClusterProviderByCloud ($cloud: String!) {
	clusterProvider(cloud: $cloud) {
		... ClusterProviderFragment
	}
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) GetClusterProviderByCloud(ctx context.Context, cloud string, interceptors ...clientv2.RequestInterceptor) (*GetClusterProviderByCloud, error) {
	vars := map[string]any{
		"cloud": cloud,
	}

	var res GetClusterProviderByCloud
	if err := c.Client.Post(ctx, "GetClusterProviderByCloud", GetClusterProviderByCloudDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClusterServicesDocument = `query ListClusterServices {
	clusterServices {
		... ServiceDeploymentBaseFragment
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) ListClusterServices(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListClusterServices, error) {
	vars := map[string]any{}

	var res ListClusterServices
	if err := c.Client.Post(ctx, "ListClusterServices", ListClusterServicesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListServiceDeploymentsDocument = `query ListServiceDeployments ($cursor: String, $before: String, $last: Int) {
	serviceDeployments(after: $cursor, first: 100, before: $before, last: $last) {
		edges {
			node {
				... ServiceDeploymentFragment
			}
		}
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) ListServiceDeployments(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListServiceDeployments, error) {
	vars := map[string]any{
		"cursor": cursor,
		"before": before,
		"last":   last,
	}

	var res ListServiceDeployments
	if err := c.Client.Post(ctx, "ListServiceDeployments", ListServiceDeploymentsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MyClusterDocument = `query MyCluster {
	myCluster {
		... {
			id
			name
			distro
			restore {
				... ClusterRestoreFragment
			}
		}
	}
}
fragment ClusterRestoreFragment on ClusterRestore {
	id
	status
	backup {
		... ClusterBackupFragment
	}
}
fragment ClusterBackupFragment on ClusterBackup {
	id
	name
	cluster {
		id
	}
	garbageCollected
}
`

func (c *Client) MyCluster(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*MyCluster, error) {
	vars := map[string]any{}

	var res MyCluster
	if err := c.Client.Post(ctx, "MyCluster", MyClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertVirtualClusterDocument = `mutation UpsertVirtualCluster ($parentID: ID!, $attributes: ClusterAttributes!) {
	upsertVirtualCluster(parentId: $parentID, attributes: $attributes) {
		deployToken
		... ClusterFragment
	}
}
fragment ClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	insertedAt
	pingedAt
	protect
	currentVersion
	kasUrl
	deletedAt
	metadata
	distro
	tags {
		... ClusterTags
	}
	provider {
		... ClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	status {
		... ClusterStatusFragment
	}
	project {
		... TinyProjectFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment ClusterStatusFragment on ClusterStatus {
	conditions {
		... ClusterConditionFragment
	}
}
fragment ClusterConditionFragment on ClusterCondition {
	status
	type
	message
	reason
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertVirtualCluster(ctx context.Context, parentID string, attributes ClusterAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertVirtualCluster, error) {
	vars := map[string]any{
		"parentID":   parentID,
		"attributes": attributes,
	}

	var res UpsertVirtualCluster
	if err := c.Client.Post(ctx, "UpsertVirtualCluster", UpsertVirtualClusterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGlobalServiceDeploymentDocument = `query GetGlobalServiceDeployment ($id: ID!) {
	globalService(id: $id) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) GetGlobalServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetGlobalServiceDeployment, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetGlobalServiceDeployment
	if err := c.Client.Post(ctx, "GetGlobalServiceDeployment", GetGlobalServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGlobalServiceDeploymentDocument = `mutation CreateGlobalServiceDeployment ($serviceId: ID!, $attributes: GlobalServiceAttributes!) {
	createGlobalService(serviceId: $serviceId, attributes: $attributes) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) CreateGlobalServiceDeployment(ctx context.Context, serviceID string, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGlobalServiceDeployment, error) {
	vars := map[string]any{
		"serviceId":  serviceID,
		"attributes": attributes,
	}

	var res CreateGlobalServiceDeployment
	if err := c.Client.Post(ctx, "CreateGlobalServiceDeployment", CreateGlobalServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGlobalServiceDeploymentFromTemplateDocument = `mutation CreateGlobalServiceDeploymentFromTemplate ($attributes: GlobalServiceAttributes!) {
	createGlobalService(attributes: $attributes) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) CreateGlobalServiceDeploymentFromTemplate(ctx context.Context, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGlobalServiceDeploymentFromTemplate, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateGlobalServiceDeploymentFromTemplate
	if err := c.Client.Post(ctx, "CreateGlobalServiceDeploymentFromTemplate", CreateGlobalServiceDeploymentFromTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGlobalServiceDeploymentDocument = `mutation UpdateGlobalServiceDeployment ($id: ID!, $attributes: GlobalServiceAttributes!) {
	updateGlobalService(id: $id, attributes: $attributes) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) UpdateGlobalServiceDeployment(ctx context.Context, id string, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGlobalServiceDeployment, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateGlobalServiceDeployment
	if err := c.Client.Post(ctx, "UpdateGlobalServiceDeployment", UpdateGlobalServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGlobalServiceDeploymentDocument = `mutation DeleteGlobalServiceDeployment ($id: ID!) {
	deleteGlobalService(id: $id) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) DeleteGlobalServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteGlobalServiceDeployment, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteGlobalServiceDeployment
	if err := c.Client.Post(ctx, "DeleteGlobalServiceDeployment", DeleteGlobalServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateServiceDeploymentDocument = `mutation CreateServiceDeployment ($clusterId: ID!, $attributes: ServiceDeploymentAttributes!) {
	createServiceDeployment(clusterId: $clusterId, attributes: $attributes) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) CreateServiceDeployment(ctx context.Context, clusterID string, attributes ServiceDeploymentAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceDeployment, error) {
	vars := map[string]any{
		"clusterId":  clusterID,
		"attributes": attributes,
	}

	var res CreateServiceDeployment
	if err := c.Client.Post(ctx, "CreateServiceDeployment", CreateServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateServiceDeploymentWithHandleDocument = `mutation CreateServiceDeploymentWithHandle ($cluster: String!, $attributes: ServiceDeploymentAttributes!) {
	createServiceDeployment(cluster: $cluster, attributes: $attributes) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) CreateServiceDeploymentWithHandle(ctx context.Context, cluster string, attributes ServiceDeploymentAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceDeploymentWithHandle, error) {
	vars := map[string]any{
		"cluster":    cluster,
		"attributes": attributes,
	}

	var res CreateServiceDeploymentWithHandle
	if err := c.Client.Post(ctx, "CreateServiceDeploymentWithHandle", CreateServiceDeploymentWithHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteServiceDeploymentDocument = `mutation DeleteServiceDeployment ($id: ID!) {
	deleteServiceDeployment(id: $id) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) DeleteServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteServiceDeployment, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteServiceDeployment
	if err := c.Client.Post(ctx, "DeleteServiceDeployment", DeleteServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DetachServiceDeploymentDocument = `mutation DetachServiceDeployment ($id: ID!) {
	detachServiceDeployment(id: $id) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) DetachServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DetachServiceDeployment, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DetachServiceDeployment
	if err := c.Client.Post(ctx, "DetachServiceDeployment", DetachServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateServiceDeploymentDocument = `mutation UpdateServiceDeployment ($id: ID!, $attributes: ServiceUpdateAttributes!) {
	updateServiceDeployment(id: $id, attributes: $attributes) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) UpdateServiceDeployment(ctx context.Context, id string, attributes ServiceUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceDeployment, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateServiceDeployment
	if err := c.Client.Post(ctx, "UpdateServiceDeployment", UpdateServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateServiceDeploymentWithHandleDocument = `mutation UpdateServiceDeploymentWithHandle ($cluster: String!, $name: String!, $attributes: ServiceUpdateAttributes!) {
	updateServiceDeployment(cluster: $cluster, name: $name, attributes: $attributes) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) UpdateServiceDeploymentWithHandle(ctx context.Context, cluster string, name string, attributes ServiceUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceDeploymentWithHandle, error) {
	vars := map[string]any{
		"cluster":    cluster,
		"name":       name,
		"attributes": attributes,
	}

	var res UpdateServiceDeploymentWithHandle
	if err := c.Client.Post(ctx, "UpdateServiceDeploymentWithHandle", UpdateServiceDeploymentWithHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CloneServiceDeploymentDocument = `mutation CloneServiceDeployment ($clusterId: ID!, $id: ID!, $attributes: ServiceCloneAttributes!) {
	cloneService(clusterId: $clusterId, serviceId: $id, attributes: $attributes) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) CloneServiceDeployment(ctx context.Context, clusterID string, id string, attributes ServiceCloneAttributes, interceptors ...clientv2.RequestInterceptor) (*CloneServiceDeployment, error) {
	vars := map[string]any{
		"clusterId":  clusterID,
		"id":         id,
		"attributes": attributes,
	}

	var res CloneServiceDeployment
	if err := c.Client.Post(ctx, "CloneServiceDeployment", CloneServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CloneServiceDeploymentWithHandleDocument = `mutation CloneServiceDeploymentWithHandle ($clusterId: ID!, $cluster: String!, $name: String!, $attributes: ServiceCloneAttributes!) {
	cloneService(clusterId: $clusterId, cluster: $cluster, name: $name, attributes: $attributes) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) CloneServiceDeploymentWithHandle(ctx context.Context, clusterID string, cluster string, name string, attributes ServiceCloneAttributes, interceptors ...clientv2.RequestInterceptor) (*CloneServiceDeploymentWithHandle, error) {
	vars := map[string]any{
		"clusterId":  clusterID,
		"cluster":    cluster,
		"name":       name,
		"attributes": attributes,
	}

	var res CloneServiceDeploymentWithHandle
	if err := c.Client.Post(ctx, "CloneServiceDeploymentWithHandle", CloneServiceDeploymentWithHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RollbackServiceDocument = `mutation RollbackService ($id: ID!, $revisionId: ID!) {
	rollbackService(id: $id, revisionId: $revisionId) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) RollbackService(ctx context.Context, id string, revisionID string, interceptors ...clientv2.RequestInterceptor) (*RollbackService, error) {
	vars := map[string]any{
		"id":         id,
		"revisionId": revisionID,
	}

	var res RollbackService
	if err := c.Client.Post(ctx, "RollbackService", RollbackServiceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateServiceComponentsDocument = `mutation updateServiceComponents ($id: ID!, $components: [ComponentAttributes], $revisionId: ID!, $sha: String, $errors: [ServiceErrorAttributes]) {
	updateServiceComponents(id: $id, components: $components, revisionId: $revisionId, sha: $sha, errors: $errors) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) UpdateServiceComponents(ctx context.Context, id string, components []*ComponentAttributes, revisionID string, sha *string, errors []*ServiceErrorAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceComponents, error) {
	vars := map[string]any{
		"id":         id,
		"components": components,
		"revisionId": revisionID,
		"sha":        sha,
		"errors":     errors,
	}

	var res UpdateServiceComponents
	if err := c.Client.Post(ctx, "updateServiceComponents", UpdateServiceComponentsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddServiceErrorDocument = `mutation AddServiceError ($id: ID!, $errors: [ServiceErrorAttributes]) {
	updateServiceComponents(id: $id, errors: $errors) {
		... ServiceDeploymentFragment
	}
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) AddServiceError(ctx context.Context, id string, errors []*ServiceErrorAttributes, interceptors ...clientv2.RequestInterceptor) (*AddServiceError, error) {
	vars := map[string]any{
		"id":     id,
		"errors": errors,
	}

	var res AddServiceError
	if err := c.Client.Post(ctx, "AddServiceError", AddServiceErrorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateDeploymentSettingsDocument = `mutation UpdateDeploymentSettings ($attributes: DeploymentSettingsAttributes!) {
	updateDeploymentSettings(attributes: $attributes) {
		... DeploymentSettingsFragment
	}
}
fragment DeploymentSettingsFragment on DeploymentSettings {
	id
	name
	agentHelmValues
	agentVsn
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
	artifactRepository {
		... GitRepositoryFragment
	}
	deployerRepository {
		... GitRepositoryFragment
	}
	ai {
		... AISettingsFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment AISettingsFragment on AiSettings {
	enabled
	provider
	openai {
		model
	}
	anthropic {
		model
	}
}
`

func (c *Client) UpdateDeploymentSettings(ctx context.Context, attributes DeploymentSettingsAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateDeploymentSettings, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpdateDeploymentSettings
	if err := c.Client.Post(ctx, "UpdateDeploymentSettings", UpdateDeploymentSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDeploymentSettingsDocument = `query GetDeploymentSettings {
	deploymentSettings {
		... DeploymentSettingsFragment
	}
}
fragment DeploymentSettingsFragment on DeploymentSettings {
	id
	name
	agentHelmValues
	agentVsn
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	createBindings {
		... PolicyBindingFragment
	}
	artifactRepository {
		... GitRepositoryFragment
	}
	deployerRepository {
		... GitRepositoryFragment
	}
	ai {
		... AISettingsFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment AISettingsFragment on AiSettings {
	enabled
	provider
	openai {
		model
	}
	anthropic {
		model
	}
}
`

func (c *Client) GetDeploymentSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetDeploymentSettings, error) {
	vars := map[string]any{}

	var res GetDeploymentSettings
	if err := c.Client.Post(ctx, "GetDeploymentSettings", GetDeploymentSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetServiceDeploymentDocument = `query GetServiceDeployment ($id: ID!) {
	serviceDeployment(id: $id) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) GetServiceDeployment(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeployment, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetServiceDeployment
	if err := c.Client.Post(ctx, "GetServiceDeployment", GetServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetServiceDeploymentComponentsDocument = `query GetServiceDeploymentComponents ($id: ID!) {
	serviceDeployment(id: $id) {
		id
		components {
			kind
			state
		}
	}
}
`

func (c *Client) GetServiceDeploymentComponents(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeploymentComponents, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetServiceDeploymentComponents
	if err := c.Client.Post(ctx, "GetServiceDeploymentComponents", GetServiceDeploymentComponentsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetServiceDeploymentForAgentDocument = `query GetServiceDeploymentForAgent ($id: ID!) {
	serviceDeployment(id: $id) {
		... ServiceDeploymentForAgent
	}
}
fragment ServiceDeploymentForAgent on ServiceDeployment {
	id
	name
	namespace
	version
	tarball
	deletedAt
	dryRun
	templated
	sha
	cluster {
		id
		name
		handle
		self
		version
		pingedAt
		metadata
		currentVersion
		kasUrl
		distro
	}
	kustomize {
		... KustomizeFragment
	}
	helm {
		release
		valuesFiles
		values
		ignoreHooks
		ignoreCrds
		luaScript
		luaFile
		luaFolder
	}
	configuration {
		name
		value
	}
	contexts {
		name
		configuration
	}
	syncConfig {
		createNamespace
		enforceNamespace
		deleteNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
	revision {
		id
	}
	imports {
		id
		stack {
			id
			name
		}
		outputs {
			name
			value
			secret
		}
	}
	renderers {
		... RendererFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment RendererFragment on Renderer {
	path
	type
	helm {
		... HelmMinimalFragment
	}
}
fragment HelmMinimalFragment on HelmMinimal {
	values
	valuesFiles
	release
}
`

func (c *Client) GetServiceDeploymentForAgent(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeploymentForAgent, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetServiceDeploymentForAgent
	if err := c.Client.Post(ctx, "GetServiceDeploymentForAgent", GetServiceDeploymentForAgentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetServiceDeploymentByHandleDocument = `query GetServiceDeploymentByHandle ($cluster: String!, $name: String!) {
	serviceDeployment(cluster: $cluster, name: $name) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) GetServiceDeploymentByHandle(ctx context.Context, cluster string, name string, interceptors ...clientv2.RequestInterceptor) (*GetServiceDeploymentByHandle, error) {
	vars := map[string]any{
		"cluster": cluster,
		"name":    name,
	}

	var res GetServiceDeploymentByHandle
	if err := c.Client.Post(ctx, "GetServiceDeploymentByHandle", GetServiceDeploymentByHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListServiceDeploymentDocument = `query ListServiceDeployment ($after: String, $before: String, $last: Int, $clusterId: ID) {
	serviceDeployments(after: $after, first: 100, before: $before, last: $last, clusterId: $clusterId) {
		edges {
			... ServiceDeploymentEdgeFragment
		}
	}
}
fragment ServiceDeploymentEdgeFragment on ServiceDeploymentEdge {
	node {
		... ServiceDeploymentBaseFragment
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) ListServiceDeployment(ctx context.Context, after *string, before *string, last *int64, clusterID *string, interceptors ...clientv2.RequestInterceptor) (*ListServiceDeployment, error) {
	vars := map[string]any{
		"after":     after,
		"before":    before,
		"last":      last,
		"clusterId": clusterID,
	}

	var res ListServiceDeployment
	if err := c.Client.Post(ctx, "ListServiceDeployment", ListServiceDeploymentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PagedClusterServicesDocument = `query PagedClusterServices ($after: String, $first: Int, $before: String, $last: Int) {
	pagedClusterServices(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... ServiceDeploymentEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ServiceDeploymentEdgeFragment on ServiceDeploymentEdge {
	node {
		... ServiceDeploymentBaseFragment
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) PagedClusterServices(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterServices, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res PagedClusterServices
	if err := c.Client.Post(ctx, "PagedClusterServices", PagedClusterServicesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PagedClusterServicesForAgentDocument = `query PagedClusterServicesForAgent ($after: String, $first: Int, $before: String, $last: Int) {
	pagedClusterServices(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... ServiceDeploymentEdgeFragmentForAgent
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ServiceDeploymentEdgeFragmentForAgent on ServiceDeploymentEdge {
	node {
		... ServiceDeploymentForAgent
	}
}
fragment ServiceDeploymentForAgent on ServiceDeployment {
	id
	name
	namespace
	version
	tarball
	deletedAt
	dryRun
	templated
	sha
	cluster {
		id
		name
		handle
		self
		version
		pingedAt
		metadata
		currentVersion
		kasUrl
		distro
	}
	kustomize {
		... KustomizeFragment
	}
	helm {
		release
		valuesFiles
		values
		ignoreHooks
		ignoreCrds
		luaScript
		luaFile
		luaFolder
	}
	configuration {
		name
		value
	}
	contexts {
		name
		configuration
	}
	syncConfig {
		createNamespace
		enforceNamespace
		deleteNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
	revision {
		id
	}
	imports {
		id
		stack {
			id
			name
		}
		outputs {
			name
			value
			secret
		}
	}
	renderers {
		... RendererFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment RendererFragment on Renderer {
	path
	type
	helm {
		... HelmMinimalFragment
	}
}
fragment HelmMinimalFragment on HelmMinimal {
	values
	valuesFiles
	release
}
`

func (c *Client) PagedClusterServicesForAgent(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterServicesForAgent, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res PagedClusterServicesForAgent
	if err := c.Client.Post(ctx, "PagedClusterServicesForAgent", PagedClusterServicesForAgentDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PagedClusterServiceIdsDocument = `query PagedClusterServiceIds ($after: String, $first: Int, $before: String, $last: Int) {
	pagedClusterServices(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... ServiceDeploymentIdEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ServiceDeploymentIdEdgeFragment on ServiceDeploymentEdge {
	node {
		... ServiceDeploymentIdFragment
	}
}
fragment ServiceDeploymentIdFragment on ServiceDeployment {
	id
}
`

func (c *Client) PagedClusterServiceIds(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterServiceIds, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res PagedClusterServiceIds
	if err := c.Client.Post(ctx, "PagedClusterServiceIds", PagedClusterServiceIdsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListServiceDeploymentByHandleDocument = `query ListServiceDeploymentByHandle ($after: String, $before: String, $last: Int, $cluster: String) {
	serviceDeployments(after: $after, first: 100, before: $before, last: $last, cluster: $cluster) {
		edges {
			... ServiceDeploymentEdgeFragment
		}
	}
}
fragment ServiceDeploymentEdgeFragment on ServiceDeploymentEdge {
	node {
		... ServiceDeploymentBaseFragment
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) ListServiceDeploymentByHandle(ctx context.Context, after *string, before *string, last *int64, cluster *string, interceptors ...clientv2.RequestInterceptor) (*ListServiceDeploymentByHandle, error) {
	vars := map[string]any{
		"after":   after,
		"before":  before,
		"last":    last,
		"cluster": cluster,
	}

	var res ListServiceDeploymentByHandle
	if err := c.Client.Post(ctx, "ListServiceDeploymentByHandle", ListServiceDeploymentByHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetServiceContextDocument = `query GetServiceContext ($name: String!) {
	serviceContext(name: $name) {
		... ServiceContextFragment
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
`

func (c *Client) GetServiceContext(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetServiceContext, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetServiceContext
	if err := c.Client.Post(ctx, "GetServiceContext", GetServiceContextDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SaveServiceContextDocument = `mutation SaveServiceContext ($name: String!, $attributes: ServiceContextAttributes!) {
	saveServiceContext(name: $name, attributes: $attributes) {
		... ServiceContextFragment
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
`

func (c *Client) SaveServiceContext(ctx context.Context, name string, attributes ServiceContextAttributes, interceptors ...clientv2.RequestInterceptor) (*SaveServiceContext, error) {
	vars := map[string]any{
		"name":       name,
		"attributes": attributes,
	}

	var res SaveServiceContext
	if err := c.Client.Post(ctx, "SaveServiceContext", SaveServiceContextDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteServiceContextDocument = `mutation DeleteServiceContext ($id: ID!) {
	deleteServiceContext(id: $id) {
		... ServiceContextFragment
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
`

func (c *Client) DeleteServiceContext(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteServiceContext, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteServiceContext
	if err := c.Client.Post(ctx, "DeleteServiceContext", DeleteServiceContextDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGlobalServiceDocument = `mutation CreateGlobalService ($attributes: GlobalServiceAttributes!) {
	createGlobalService(attributes: $attributes) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) CreateGlobalService(ctx context.Context, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGlobalService, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateGlobalService
	if err := c.Client.Post(ctx, "CreateGlobalService", CreateGlobalServiceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGlobalServiceDocument = `mutation UpdateGlobalService ($id: ID!, $attributes: GlobalServiceAttributes!) {
	updateGlobalService(id: $id, attributes: $attributes) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) UpdateGlobalService(ctx context.Context, id string, attributes GlobalServiceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGlobalService, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateGlobalService
	if err := c.Client.Post(ctx, "UpdateGlobalService", UpdateGlobalServiceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGlobalServiceDocument = `mutation DeleteGlobalService ($id: ID!) {
	deleteGlobalService(id: $id) {
		... GlobalServiceFragment
	}
}
fragment GlobalServiceFragment on GlobalService {
	id
	name
	distro
	provider {
		id
	}
	service {
		id
	}
	tags {
		... ClusterTags
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) DeleteGlobalService(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteGlobalService, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteGlobalService
	if err := c.Client.Post(ctx, "DeleteGlobalService", DeleteGlobalServiceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const KickServiceDocument = `mutation KickService ($id: ID!) {
	kickService(serviceId: $id) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) KickService(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*KickService, error) {
	vars := map[string]any{
		"id": id,
	}

	var res KickService
	if err := c.Client.Post(ctx, "KickService", KickServiceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const KickServiceByHandleDocument = `mutation KickServiceByHandle ($cluster: String!, $name: String!) {
	kickService(cluster: $cluster, name: $name) {
		... ServiceDeploymentExtended
	}
}
fragment ServiceDeploymentExtended on ServiceDeployment {
	cluster {
		... BaseClusterFragment
	}
	errors {
		... ErrorFragment
	}
	revision {
		... RevisionFragment
	}
	contexts {
		... ServiceContextFragment
	}
	... ServiceDeploymentFragment
}
fragment BaseClusterFragment on Cluster {
	id
	name
	handle
	self
	version
	pingedAt
	currentVersion
	kasUrl
	metadata
	credential {
		... ProviderCredentialFragment
	}
	provider {
		... BaseClusterProviderFragment
	}
	nodePools {
		... NodePoolFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
fragment BaseClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	repository {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment NodePoolFragment on NodePool {
	id
	name
	minSize
	maxSize
	instanceType
	labels
	taints {
		... NodePoolTaintFragment
	}
}
fragment NodePoolTaintFragment on Taint {
	key
	value
	effect
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment ErrorFragment on ServiceError {
	source
	message
}
fragment RevisionFragment on Revision {
	id
	sha
	git {
		ref
		folder
	}
}
fragment ServiceContextFragment on ServiceContext {
	id
	name
	configuration
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
`

func (c *Client) KickServiceByHandle(ctx context.Context, cluster string, name string, interceptors ...clientv2.RequestInterceptor) (*KickServiceByHandle, error) {
	vars := map[string]any{
		"cluster": cluster,
		"name":    name,
	}

	var res KickServiceByHandle
	if err := c.Client.Post(ctx, "KickServiceByHandle", KickServiceByHandleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterRegistrationDocument = `query GetClusterRegistration ($id: ID, $machineId: String) {
	clusterRegistration(id: $id, machineId: $machineId) {
		... ClusterRegistrationFragment
	}
}
fragment ClusterRegistrationFragment on ClusterRegistration {
	id
	insertedAt
	updatedAt
	machineId
	name
	handle
	metadata
	tags {
		... ClusterTags
	}
	creator {
		... UserFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment UserFragment on User {
	name
	id
	email
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) GetClusterRegistration(ctx context.Context, id *string, machineID *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterRegistration, error) {
	vars := map[string]any{
		"id":        id,
		"machineId": machineID,
	}

	var res GetClusterRegistration
	if err := c.Client.Post(ctx, "GetClusterRegistration", GetClusterRegistrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterRegistrationsDocument = `query GetClusterRegistrations ($after: String, $first: Int, $before: String, $last: Int) {
	clusterRegistrations(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... ClusterRegistrationFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ClusterRegistrationFragment on ClusterRegistration {
	id
	insertedAt
	updatedAt
	machineId
	name
	handle
	metadata
	tags {
		... ClusterTags
	}
	creator {
		... UserFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment UserFragment on User {
	name
	id
	email
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) GetClusterRegistrations(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*GetClusterRegistrations, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res GetClusterRegistrations
	if err := c.Client.Post(ctx, "GetClusterRegistrations", GetClusterRegistrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateClusterRegistrationDocument = `mutation CreateClusterRegistration ($attributes: ClusterRegistrationCreateAttributes!) {
	createClusterRegistration(attributes: $attributes) {
		... ClusterRegistrationFragment
	}
}
fragment ClusterRegistrationFragment on ClusterRegistration {
	id
	insertedAt
	updatedAt
	machineId
	name
	handle
	metadata
	tags {
		... ClusterTags
	}
	creator {
		... UserFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment UserFragment on User {
	name
	id
	email
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) CreateClusterRegistration(ctx context.Context, attributes ClusterRegistrationCreateAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterRegistration, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateClusterRegistration
	if err := c.Client.Post(ctx, "CreateClusterRegistration", CreateClusterRegistrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateClusterRegistrationDocument = `mutation UpdateClusterRegistration ($id: ID!, $attributes: ClusterRegistrationUpdateAttributes!) {
	updateClusterRegistration(id: $id, attributes: $attributes) {
		... ClusterRegistrationFragment
	}
}
fragment ClusterRegistrationFragment on ClusterRegistration {
	id
	insertedAt
	updatedAt
	machineId
	name
	handle
	metadata
	tags {
		... ClusterTags
	}
	creator {
		... UserFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment UserFragment on User {
	name
	id
	email
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) UpdateClusterRegistration(ctx context.Context, id string, attributes ClusterRegistrationUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterRegistration, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateClusterRegistration
	if err := c.Client.Post(ctx, "UpdateClusterRegistration", UpdateClusterRegistrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteClusterRegistrationDocument = `mutation DeleteClusterRegistration ($id: ID!) {
	deleteClusterRegistration(id: $id) {
		... ClusterRegistrationFragment
	}
}
fragment ClusterRegistrationFragment on ClusterRegistration {
	id
	insertedAt
	updatedAt
	machineId
	name
	handle
	metadata
	tags {
		... ClusterTags
	}
	creator {
		... UserFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment ClusterTags on Tag {
	name
	value
}
fragment UserFragment on User {
	name
	id
	email
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) DeleteClusterRegistration(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteClusterRegistration, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteClusterRegistration
	if err := c.Client.Post(ctx, "DeleteClusterRegistration", DeleteClusterRegistrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateClusterIsoImageDocument = `mutation CreateClusterIsoImage ($attributes: ClusterIsoImageAttributes!) {
	createClusterIsoImage(attributes: $attributes) {
		... ClusterIsoImageFragment
	}
}
fragment ClusterIsoImageFragment on ClusterIsoImage {
	id
	image
	project {
		... TinyProjectFragment
	}
	registry
	user
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) CreateClusterIsoImage(ctx context.Context, attributes ClusterIsoImageAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateClusterIsoImage, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateClusterIsoImage
	if err := c.Client.Post(ctx, "CreateClusterIsoImage", CreateClusterIsoImageDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateClusterIsoImageDocument = `mutation UpdateClusterIsoImage ($id: ID!, $attributes: ClusterIsoImageAttributes!) {
	updateClusterIsoImage(id: $id, attributes: $attributes) {
		... ClusterIsoImageFragment
	}
}
fragment ClusterIsoImageFragment on ClusterIsoImage {
	id
	image
	project {
		... TinyProjectFragment
	}
	registry
	user
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) UpdateClusterIsoImage(ctx context.Context, id string, attributes ClusterIsoImageAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateClusterIsoImage, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateClusterIsoImage
	if err := c.Client.Post(ctx, "UpdateClusterIsoImage", UpdateClusterIsoImageDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteClusterIsoImageDocument = `mutation DeleteClusterIsoImage ($id: ID!) {
	deleteClusterIsoImage(id: $id) {
		... ClusterIsoImageFragment
	}
}
fragment ClusterIsoImageFragment on ClusterIsoImage {
	id
	image
	project {
		... TinyProjectFragment
	}
	registry
	user
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) DeleteClusterIsoImage(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteClusterIsoImage, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteClusterIsoImage
	if err := c.Client.Post(ctx, "DeleteClusterIsoImage", DeleteClusterIsoImageDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterIsoImageDocument = `query GetClusterIsoImage ($id: ID, $image: String) {
	clusterIsoImage(id: $id, image: $image) {
		... ClusterIsoImageFragment
	}
}
fragment ClusterIsoImageFragment on ClusterIsoImage {
	id
	image
	project {
		... TinyProjectFragment
	}
	registry
	user
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) GetClusterIsoImage(ctx context.Context, id *string, image *string, interceptors ...clientv2.RequestInterceptor) (*GetClusterIsoImage, error) {
	vars := map[string]any{
		"id":    id,
		"image": image,
	}

	var res GetClusterIsoImage
	if err := c.Client.Post(ctx, "GetClusterIsoImage", GetClusterIsoImageDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFederatedCredentialDocument = `query GetFederatedCredential ($id: ID!) {
	federatedCredential(id: $id) {
		... FederatedCredentialFragment
	}
}
fragment FederatedCredentialFragment on FederatedCredential {
	id
	claimsLike
	issuer
	scopes
	insertedAt
	updatedAt
	user {
		id
		name
		email
	}
}
`

func (c *Client) GetFederatedCredential(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetFederatedCredential, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetFederatedCredential
	if err := c.Client.Post(ctx, "GetFederatedCredential", GetFederatedCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateFederatedCredentialDocument = `mutation CreateFederatedCredential ($attributes: FederatedCredentialAttributes!) {
	createFederatedCredential(attributes: $attributes) {
		... FederatedCredentialFragment
	}
}
fragment FederatedCredentialFragment on FederatedCredential {
	id
	claimsLike
	issuer
	scopes
	insertedAt
	updatedAt
	user {
		id
		name
		email
	}
}
`

func (c *Client) CreateFederatedCredential(ctx context.Context, attributes FederatedCredentialAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateFederatedCredential, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateFederatedCredential
	if err := c.Client.Post(ctx, "CreateFederatedCredential", CreateFederatedCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFederatedCredentialDocument = `mutation DeleteFederatedCredential ($id: ID!) {
	deleteFederatedCredential(id: $id) {
		id
	}
}
`

func (c *Client) DeleteFederatedCredential(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteFederatedCredential, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteFederatedCredential
	if err := c.Client.Post(ctx, "DeleteFederatedCredential", DeleteFederatedCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateFederatedCredentialDocument = `mutation UpdateFederatedCredential ($id: ID!, $attributes: FederatedCredentialAttributes!) {
	updateFederatedCredential(id: $id, attributes: $attributes) {
		... FederatedCredentialFragment
	}
}
fragment FederatedCredentialFragment on FederatedCredential {
	id
	claimsLike
	issuer
	scopes
	insertedAt
	updatedAt
	user {
		id
		name
		email
	}
}
`

func (c *Client) UpdateFederatedCredential(ctx context.Context, id string, attributes FederatedCredentialAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateFederatedCredential, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateFederatedCredential
	if err := c.Client.Post(ctx, "UpdateFederatedCredential", UpdateFederatedCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFlowDocument = `query GetFlow ($id: ID!) {
	flow(id: $id) {
		... FlowFragment
	}
}
fragment FlowFragment on Flow {
	id
	name
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	project {
		... ProjectFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
`

func (c *Client) GetFlow(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetFlow, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetFlow
	if err := c.Client.Post(ctx, "GetFlow", GetFlowDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertFlowDocument = `mutation UpsertFlow ($attributes: FlowAttributes!) {
	upsertFlow(attributes: $attributes) {
		... FlowFragment
	}
}
fragment FlowFragment on Flow {
	id
	name
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	project {
		... ProjectFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
`

func (c *Client) UpsertFlow(ctx context.Context, attributes FlowAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertFlow, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertFlow
	if err := c.Client.Post(ctx, "UpsertFlow", UpsertFlowDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFlowDocument = `mutation DeleteFlow ($id: ID!) {
	deleteFlow(id: $id) {
		id
	}
}
`

func (c *Client) DeleteFlow(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteFlow, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteFlow
	if err := c.Client.Post(ctx, "DeleteFlow", DeleteFlowDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterGatesDocument = `query GetClusterGates {
	clusterGates {
		... PipelineGateFragment
	}
}
fragment PipelineGateFragment on PipelineGate {
	id
	name
	type
	state
	updatedAt
	spec {
		... GateSpecFragment
	}
	status {
		... GateStatusFragment
	}
}
fragment GateSpecFragment on GateSpec {
	job {
		... JobSpecFragment
	}
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment GateStatusFragment on GateStatus {
	jobRef {
		... JobReferenceFragment
	}
}
fragment JobReferenceFragment on JobReference {
	name
	namespace
}
`

func (c *Client) GetClusterGates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetClusterGates, error) {
	vars := map[string]any{}

	var res GetClusterGates
	if err := c.Client.Post(ctx, "GetClusterGates", GetClusterGatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PagedClusterGatesDocument = `query PagedClusterGates ($after: String, $first: Int, $before: String, $last: Int) {
	pagedClusterGates(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... PipelineGateEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment PipelineGateEdgeFragment on PipelineGateEdge {
	node {
		... PipelineGateFragment
	}
}
fragment PipelineGateFragment on PipelineGate {
	id
	name
	type
	state
	updatedAt
	spec {
		... GateSpecFragment
	}
	status {
		... GateStatusFragment
	}
}
fragment GateSpecFragment on GateSpec {
	job {
		... JobSpecFragment
	}
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment GateStatusFragment on GateStatus {
	jobRef {
		... JobReferenceFragment
	}
}
fragment JobReferenceFragment on JobReference {
	name
	namespace
}
`

func (c *Client) PagedClusterGates(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterGates, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res PagedClusterGates
	if err := c.Client.Post(ctx, "PagedClusterGates", PagedClusterGatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PagedClusterGateIDsDocument = `query PagedClusterGateIDs ($after: String, $first: Int, $before: String, $last: Int) {
	pagedClusterGates(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... PipelineGateIDsEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment PipelineGateIDsEdgeFragment on PipelineGateEdge {
	node {
		... {
			id
		}
	}
}
`

func (c *Client) PagedClusterGateIDs(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*PagedClusterGateIDs, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res PagedClusterGateIDs
	if err := c.Client.Post(ctx, "PagedClusterGateIDs", PagedClusterGateIDsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGateDocument = `mutation updateGate ($id: ID!, $attributes: GateUpdateAttributes!) {
	updateGate(id: $id, attributes: $attributes) {
		... PipelineGateFragment
	}
}
fragment PipelineGateFragment on PipelineGate {
	id
	name
	type
	state
	updatedAt
	spec {
		... GateSpecFragment
	}
	status {
		... GateStatusFragment
	}
}
fragment GateSpecFragment on GateSpec {
	job {
		... JobSpecFragment
	}
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment GateStatusFragment on GateStatus {
	jobRef {
		... JobReferenceFragment
	}
}
fragment JobReferenceFragment on JobReference {
	name
	namespace
}
`

func (c *Client) UpdateGate(ctx context.Context, id string, attributes GateUpdateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGate, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateGate
	if err := c.Client.Post(ctx, "updateGate", UpdateGateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetClusterGateDocument = `query GetClusterGate ($id: ID!) {
	clusterGate(id: $id) {
		... PipelineGateFragment
	}
}
fragment PipelineGateFragment on PipelineGate {
	id
	name
	type
	state
	updatedAt
	spec {
		... GateSpecFragment
	}
	status {
		... GateStatusFragment
	}
}
fragment GateSpecFragment on GateSpec {
	job {
		... JobSpecFragment
	}
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment GateStatusFragment on GateStatus {
	jobRef {
		... JobReferenceFragment
	}
}
fragment JobReferenceFragment on JobReference {
	name
	namespace
}
`

func (c *Client) GetClusterGate(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetClusterGate, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetClusterGate
	if err := c.Client.Post(ctx, "GetClusterGate", GetClusterGateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGitRepositoryDocument = `mutation CreateGitRepository ($attributes: GitAttributes!) {
	createGitRepository(attributes: $attributes) {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) CreateGitRepository(ctx context.Context, attributes GitAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGitRepository, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateGitRepository
	if err := c.Client.Post(ctx, "CreateGitRepository", CreateGitRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGitRepositoryDocument = `mutation UpdateGitRepository ($id: ID!, $attributes: GitAttributes!) {
	updateGitRepository(id: $id, attributes: $attributes) {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) UpdateGitRepository(ctx context.Context, id string, attributes GitAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGitRepository, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateGitRepository
	if err := c.Client.Post(ctx, "UpdateGitRepository", UpdateGitRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGitRepositoryDocument = `mutation DeleteGitRepository ($id: ID!) {
	deleteGitRepository(id: $id) {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) DeleteGitRepository(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteGitRepository, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteGitRepository
	if err := c.Client.Post(ctx, "DeleteGitRepository", DeleteGitRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListGitRepositoriesDocument = `query ListGitRepositories ($cursor: String, $before: String, $last: Int) {
	gitRepositories(after: $cursor, first: 100, before: $before, last: $last) {
		edges {
			... GitRepositoryEdgeFragment
		}
	}
}
fragment GitRepositoryEdgeFragment on GitRepositoryEdge {
	node {
		... GitRepositoryFragment
	}
	cursor
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) ListGitRepositories(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListGitRepositories, error) {
	vars := map[string]any{
		"cursor": cursor,
		"before": before,
		"last":   last,
	}

	var res ListGitRepositories
	if err := c.Client.Post(ctx, "ListGitRepositories", ListGitRepositoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGitRepositoryDocument = `query GetGitRepository ($id: ID, $url: String) {
	gitRepository(id: $id, url: $url) {
		... GitRepositoryFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
`

func (c *Client) GetGitRepository(ctx context.Context, id *string, url *string, interceptors ...clientv2.RequestInterceptor) (*GetGitRepository, error) {
	vars := map[string]any{
		"id":  id,
		"url": url,
	}

	var res GetGitRepository
	if err := c.Client.Post(ctx, "GetGitRepository", GetGitRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScmConnectionDocument = `query GetScmConnection ($id: ID!) {
	scmConnection(id: $id) {
		... ScmConnectionFragment
	}
}
fragment ScmConnectionFragment on ScmConnection {
	id
	name
	apiUrl
	baseUrl
	type
	username
	insertedAt
	updatedAt
}
`

func (c *Client) GetScmConnection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetScmConnection, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetScmConnection
	if err := c.Client.Post(ctx, "GetScmConnection", GetScmConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetScmConnectionByNameDocument = `query GetScmConnectionByName ($name: String!) {
	scmConnection(name: $name) {
		... ScmConnectionFragment
	}
}
fragment ScmConnectionFragment on ScmConnection {
	id
	name
	apiUrl
	baseUrl
	type
	username
	insertedAt
	updatedAt
}
`

func (c *Client) GetScmConnectionByName(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetScmConnectionByName, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetScmConnectionByName
	if err := c.Client.Post(ctx, "GetScmConnectionByName", GetScmConnectionByNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListScmConnectionsDocument = `query ListScmConnections ($cursor: String, $before: String, $last: Int) {
	scmConnections(after: $cursor, first: 100, before: $before, last: $last) {
		edges {
			node {
				... ScmConnectionFragment
			}
			cursor
		}
	}
}
fragment ScmConnectionFragment on ScmConnection {
	id
	name
	apiUrl
	baseUrl
	type
	username
	insertedAt
	updatedAt
}
`

func (c *Client) ListScmConnections(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListScmConnections, error) {
	vars := map[string]any{
		"cursor": cursor,
		"before": before,
		"last":   last,
	}

	var res ListScmConnections
	if err := c.Client.Post(ctx, "ListScmConnections", ListScmConnectionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateScmConnectionDocument = `mutation CreateScmConnection ($attributes: ScmConnectionAttributes!) {
	createScmConnection(attributes: $attributes) {
		... ScmConnectionFragment
	}
}
fragment ScmConnectionFragment on ScmConnection {
	id
	name
	apiUrl
	baseUrl
	type
	username
	insertedAt
	updatedAt
}
`

func (c *Client) CreateScmConnection(ctx context.Context, attributes ScmConnectionAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateScmConnection, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateScmConnection
	if err := c.Client.Post(ctx, "CreateScmConnection", CreateScmConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateScmConnectionDocument = `mutation UpdateScmConnection ($id: ID!, $attributes: ScmConnectionAttributes!) {
	updateScmConnection(id: $id, attributes: $attributes) {
		... ScmConnectionFragment
	}
}
fragment ScmConnectionFragment on ScmConnection {
	id
	name
	apiUrl
	baseUrl
	type
	username
	insertedAt
	updatedAt
}
`

func (c *Client) UpdateScmConnection(ctx context.Context, id string, attributes ScmConnectionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateScmConnection, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateScmConnection
	if err := c.Client.Post(ctx, "UpdateScmConnection", UpdateScmConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteScmConnectionDocument = `mutation DeleteScmConnection ($id: ID!) {
	deleteScmConnection(id: $id) {
		... ScmConnectionFragment
	}
}
fragment ScmConnectionFragment on ScmConnection {
	id
	name
	apiUrl
	baseUrl
	type
	username
	insertedAt
	updatedAt
}
`

func (c *Client) DeleteScmConnection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteScmConnection, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteScmConnection
	if err := c.Client.Post(ctx, "DeleteScmConnection", DeleteScmConnectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPrAutomationDocument = `query GetPrAutomation ($id: ID!) {
	prAutomation(id: $id) {
		... PrAutomationFragment
	}
}
fragment PrAutomationFragment on PrAutomation {
	id
	name
	title
	addon
	message
	identifier
	insertedAt
	updatedAt
}
`

func (c *Client) GetPrAutomation(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPrAutomation, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetPrAutomation
	if err := c.Client.Post(ctx, "GetPrAutomation", GetPrAutomationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPrAutomationByNameDocument = `query GetPrAutomationByName ($name: String!) {
	prAutomation(name: $name) {
		... PrAutomationFragment
	}
}
fragment PrAutomationFragment on PrAutomation {
	id
	name
	title
	addon
	message
	identifier
	insertedAt
	updatedAt
}
`

func (c *Client) GetPrAutomationByName(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetPrAutomationByName, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetPrAutomationByName
	if err := c.Client.Post(ctx, "GetPrAutomationByName", GetPrAutomationByNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListPrAutomationsDocument = `query ListPrAutomations ($cursor: String, $before: String, $last: Int) {
	prAutomations(after: $cursor, first: 100, before: $before, last: $last) {
		edges {
			node {
				... PrAutomationFragment
			}
			cursor
		}
	}
}
fragment PrAutomationFragment on PrAutomation {
	id
	name
	title
	addon
	message
	identifier
	insertedAt
	updatedAt
}
`

func (c *Client) ListPrAutomations(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListPrAutomations, error) {
	vars := map[string]any{
		"cursor": cursor,
		"before": before,
		"last":   last,
	}

	var res ListPrAutomations
	if err := c.Client.Post(ctx, "ListPrAutomations", ListPrAutomationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePrAutomationDocument = `mutation CreatePrAutomation ($attributes: PrAutomationAttributes!) {
	createPrAutomation(attributes: $attributes) {
		... PrAutomationFragment
	}
}
fragment PrAutomationFragment on PrAutomation {
	id
	name
	title
	addon
	message
	identifier
	insertedAt
	updatedAt
}
`

func (c *Client) CreatePrAutomation(ctx context.Context, attributes PrAutomationAttributes, interceptors ...clientv2.RequestInterceptor) (*CreatePrAutomation, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreatePrAutomation
	if err := c.Client.Post(ctx, "CreatePrAutomation", CreatePrAutomationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePrAutomationDocument = `mutation UpdatePrAutomation ($id: ID!, $attributes: PrAutomationAttributes!) {
	updatePrAutomation(id: $id, attributes: $attributes) {
		... PrAutomationFragment
	}
}
fragment PrAutomationFragment on PrAutomation {
	id
	name
	title
	addon
	message
	identifier
	insertedAt
	updatedAt
}
`

func (c *Client) UpdatePrAutomation(ctx context.Context, id string, attributes PrAutomationAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdatePrAutomation, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdatePrAutomation
	if err := c.Client.Post(ctx, "UpdatePrAutomation", UpdatePrAutomationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePrAutomationDocument = `mutation DeletePrAutomation ($id: ID!) {
	deletePrAutomation(id: $id) {
		... PrAutomationFragment
	}
}
fragment PrAutomationFragment on PrAutomation {
	id
	name
	title
	addon
	message
	identifier
	insertedAt
	updatedAt
}
`

func (c *Client) DeletePrAutomation(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePrAutomation, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeletePrAutomation
	if err := c.Client.Post(ctx, "DeletePrAutomation", DeletePrAutomationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePullRequestDocument = `mutation CreatePullRequest ($id: ID!, $identifier: String, $branch: String, $context: Json) {
	createPullRequest(id: $id, identifier: $identifier, branch: $branch, context: $context) {
		... PullRequestFragment
	}
}
fragment PullRequestFragment on PullRequest {
	id
	status
	url
	title
	creator
}
`

func (c *Client) CreatePullRequest(ctx context.Context, id string, identifier *string, branch *string, context *string, interceptors ...clientv2.RequestInterceptor) (*CreatePullRequest, error) {
	vars := map[string]any{
		"id":         id,
		"identifier": identifier,
		"branch":     branch,
		"context":    context,
	}

	var res CreatePullRequest
	if err := c.Client.Post(ctx, "CreatePullRequest", CreatePullRequestDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPrGovernanceDocument = `query GetPrGovernance ($id: ID, $name: String) {
	prGovernance(id: $id, name: $name) {
		... PrGovernanceFragment
	}
}
fragment PrGovernanceFragment on PrGovernance {
	id
	name
}
`

func (c *Client) GetPrGovernance(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetPrGovernance, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetPrGovernance
	if err := c.Client.Post(ctx, "GetPrGovernance", GetPrGovernanceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePrGovernanceDocument = `mutation DeletePrGovernance ($id: ID!) {
	deletePrGovernance(id: $id) {
		... PrGovernanceFragment
	}
}
fragment PrGovernanceFragment on PrGovernance {
	id
	name
}
`

func (c *Client) DeletePrGovernance(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePrGovernance, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeletePrGovernance
	if err := c.Client.Post(ctx, "DeletePrGovernance", DeletePrGovernanceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertPrGovernanceDocument = `mutation UpsertPrGovernance ($attributes: PrGovernanceAttributes!) {
	upsertPrGovernance(attributes: $attributes) {
		... PrGovernanceFragment
	}
}
fragment PrGovernanceFragment on PrGovernance {
	id
	name
}
`

func (c *Client) UpsertPrGovernance(ctx context.Context, attributes PrGovernanceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertPrGovernance, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertPrGovernance
	if err := c.Client.Post(ctx, "UpsertPrGovernance", UpsertPrGovernanceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupDocument = `query GetGroup ($name: String!) {
	group(name: $name) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
`

func (c *Client) GetGroup(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetGroup, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetGroup
	if err := c.Client.Post(ctx, "GetGroup", GetGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupDocument = `mutation CreateGroup ($attributtes: GroupAttributes!) {
	createGroup(attributes: $attributtes) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
`

func (c *Client) CreateGroup(ctx context.Context, attributtes GroupAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error) {
	vars := map[string]any{
		"attributtes": attributtes,
	}

	var res CreateGroup
	if err := c.Client.Post(ctx, "CreateGroup", CreateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupDocument = `mutation UpdateGroup ($groupId: ID!, $attributtes: GroupAttributes!) {
	updateGroup(groupId: $groupId, attributes: $attributtes) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
`

func (c *Client) UpdateGroup(ctx context.Context, groupID string, attributtes GroupAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error) {
	vars := map[string]any{
		"groupId":     groupID,
		"attributtes": attributtes,
	}

	var res UpdateGroup
	if err := c.Client.Post(ctx, "UpdateGroup", UpdateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($groupId: ID!) {
	deleteGroup(groupId: $groupId) {
		... GroupFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
`

func (c *Client) DeleteGroup(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error) {
	vars := map[string]any{
		"groupId": groupID,
	}

	var res DeleteGroup
	if err := c.Client.Post(ctx, "DeleteGroup", DeleteGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListHelmRepositoriesDocument = `query ListHelmRepositories ($after: String, $first: Int, $before: String, $last: Int) {
	helmRepositories(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... HelmRepositoryFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment HelmRepositoryFragment on HelmRepository {
	id
	insertedAt
	updatedAt
	url
	provider
	health
}
`

func (c *Client) ListHelmRepositories(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListHelmRepositories, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListHelmRepositories
	if err := c.Client.Post(ctx, "ListHelmRepositories", ListHelmRepositoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHelmRepositoryDocument = `query GetHelmRepository ($url: String!) {
	helmRepository(url: $url) {
		... HelmRepositoryFragment
	}
}
fragment HelmRepositoryFragment on HelmRepository {
	id
	insertedAt
	updatedAt
	url
	provider
	health
}
`

func (c *Client) GetHelmRepository(ctx context.Context, url string, interceptors ...clientv2.RequestInterceptor) (*GetHelmRepository, error) {
	vars := map[string]any{
		"url": url,
	}

	var res GetHelmRepository
	if err := c.Client.Post(ctx, "GetHelmRepository", GetHelmRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertHelmRepositoryDocument = `mutation UpsertHelmRepository ($url: String!, $attributes: HelmRepositoryAttributes) {
	upsertHelmRepository(url: $url, attributes: $attributes) {
		... HelmRepositoryFragment
	}
}
fragment HelmRepositoryFragment on HelmRepository {
	id
	insertedAt
	updatedAt
	url
	provider
	health
}
`

func (c *Client) UpsertHelmRepository(ctx context.Context, url string, attributes *HelmRepositoryAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertHelmRepository, error) {
	vars := map[string]any{
		"url":        url,
		"attributes": attributes,
	}

	var res UpsertHelmRepository
	if err := c.Client.Post(ctx, "UpsertHelmRepository", UpsertHelmRepositoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const IngestClusterCostDocument = `mutation IngestClusterCost ($costs: CostIngestAttributes!) {
	ingestClusterCost(costs: $costs)
}
`

func (c *Client) IngestClusterCost(ctx context.Context, costs CostIngestAttributes, interceptors ...clientv2.RequestInterceptor) (*IngestClusterCost, error) {
	vars := map[string]any{
		"costs": costs,
	}

	var res IngestClusterCost
	if err := c.Client.Post(ctx, "IngestClusterCost", IngestClusterCostDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMCPServersDocument = `query GetMCPServers ($q: String, $first: Int, $after: String, $before: String, $last: Int) {
	mcpServers(q: $q, first: $first, after: $after, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... MCPServerFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment MCPServerFragment on McpServer {
	id
	name
	url
	authentication {
		plural
		headers {
			name
			value
		}
	}
	confirm
}
`

func (c *Client) GetMCPServers(ctx context.Context, q *string, first *int64, after *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*GetMCPServers, error) {
	vars := map[string]any{
		"q":      q,
		"first":  first,
		"after":  after,
		"before": before,
		"last":   last,
	}

	var res GetMCPServers
	if err := c.Client.Post(ctx, "GetMCPServers", GetMCPServersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetMCPServerDocument = `query GetMCPServer ($id: ID!) {
	mcpServer(id: $id) {
		... MCPServerFragment
	}
}
fragment MCPServerFragment on McpServer {
	id
	name
	url
	authentication {
		plural
		headers {
			name
			value
		}
	}
	confirm
}
`

func (c *Client) GetMCPServer(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetMCPServer, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetMCPServer
	if err := c.Client.Post(ctx, "GetMCPServer", GetMCPServerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertMCPServerDocument = `mutation UpsertMCPServer ($attributes: McpServerAttributes!) {
	upsertMcpServer(attributes: $attributes) {
		... MCPServerFragment
	}
}
fragment MCPServerFragment on McpServer {
	id
	name
	url
	authentication {
		plural
		headers {
			name
			value
		}
	}
	confirm
}
`

func (c *Client) UpsertMCPServer(ctx context.Context, attributes McpServerAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertMCPServer, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertMCPServer
	if err := c.Client.Post(ctx, "UpsertMCPServer", UpsertMCPServerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteMCPServerDocument = `mutation DeleteMCPServer ($id: ID!) {
	deleteMcpServer(id: $id) {
		id
	}
}
`

func (c *Client) DeleteMCPServer(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteMCPServer, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteMCPServer
	if err := c.Client.Post(ctx, "DeleteMCPServer", DeleteMCPServerDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListNamespacesDocument = `query ListNamespaces ($after: String, $first: Int, $before: String, $last: Int) {
	managedNamespaces(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... ManagedNamespaceEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ManagedNamespaceEdgeFragment on ManagedNamespaceEdge {
	cursor
	node {
		... ManagedNamespaceMinimalFragment
	}
}
fragment ManagedNamespaceMinimalFragment on ManagedNamespace {
	id
	name
	description
}
`

func (c *Client) ListNamespaces(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListNamespaces, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListNamespaces
	if err := c.Client.Post(ctx, "ListNamespaces", ListNamespacesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClusterNamespacesDocument = `query ListClusterNamespaces ($after: String, $first: Int, $before: String, $last: Int) {
	clusterManagedNamespaces(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... ManagedNamespaceEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ManagedNamespaceEdgeFragment on ManagedNamespaceEdge {
	cursor
	node {
		... ManagedNamespaceMinimalFragment
	}
}
fragment ManagedNamespaceMinimalFragment on ManagedNamespace {
	id
	name
	description
}
`

func (c *Client) ListClusterNamespaces(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterNamespaces, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListClusterNamespaces
	if err := c.Client.Post(ctx, "ListClusterNamespaces", ListClusterNamespacesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNamespaceDocument = `query GetNamespace ($id: ID!) {
	managedNamespace(id: $id) {
		... ManagedNamespaceFragment
	}
}
fragment ManagedNamespaceFragment on ManagedNamespace {
	id
	name
	description
	labels
	annotations
	pullSecrets
	service {
		... ServiceTemplateFragment
	}
	target {
		... ClusterTargetFragment
	}
	deletedAt
}
fragment ServiceTemplateFragment on ServiceTemplate {
	name
	namespace
	templated
	repositoryId
	contexts
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	kustomize {
		... KustomizeFragment
	}
	syncConfig {
		... SyncConfigFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment SyncConfigFragment on SyncConfig {
	createNamespace
	namespaceMetadata {
		... NamespaceMetadataFragment
	}
}
fragment NamespaceMetadataFragment on NamespaceMetadata {
	labels
	annotations
}
fragment ClusterTargetFragment on ClusterTarget {
	tags
	distro
}
`

func (c *Client) GetNamespace(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNamespace, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetNamespace
	if err := c.Client.Post(ctx, "GetNamespace", GetNamespaceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNamespaceByNameDocument = `query GetNamespaceByName ($name: String!) {
	managedNamespace(name: $name) {
		... ManagedNamespaceFragment
	}
}
fragment ManagedNamespaceFragment on ManagedNamespace {
	id
	name
	description
	labels
	annotations
	pullSecrets
	service {
		... ServiceTemplateFragment
	}
	target {
		... ClusterTargetFragment
	}
	deletedAt
}
fragment ServiceTemplateFragment on ServiceTemplate {
	name
	namespace
	templated
	repositoryId
	contexts
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	kustomize {
		... KustomizeFragment
	}
	syncConfig {
		... SyncConfigFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment SyncConfigFragment on SyncConfig {
	createNamespace
	namespaceMetadata {
		... NamespaceMetadataFragment
	}
}
fragment NamespaceMetadataFragment on NamespaceMetadata {
	labels
	annotations
}
fragment ClusterTargetFragment on ClusterTarget {
	tags
	distro
}
`

func (c *Client) GetNamespaceByName(ctx context.Context, name string, interceptors ...clientv2.RequestInterceptor) (*GetNamespaceByName, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetNamespaceByName
	if err := c.Client.Post(ctx, "GetNamespaceByName", GetNamespaceByNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateNamespaceDocument = `mutation CreateNamespace ($attributes: ManagedNamespaceAttributes!) {
	createManagedNamespace(attributes: $attributes) {
		... ManagedNamespaceFragment
	}
}
fragment ManagedNamespaceFragment on ManagedNamespace {
	id
	name
	description
	labels
	annotations
	pullSecrets
	service {
		... ServiceTemplateFragment
	}
	target {
		... ClusterTargetFragment
	}
	deletedAt
}
fragment ServiceTemplateFragment on ServiceTemplate {
	name
	namespace
	templated
	repositoryId
	contexts
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	kustomize {
		... KustomizeFragment
	}
	syncConfig {
		... SyncConfigFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment SyncConfigFragment on SyncConfig {
	createNamespace
	namespaceMetadata {
		... NamespaceMetadataFragment
	}
}
fragment NamespaceMetadataFragment on NamespaceMetadata {
	labels
	annotations
}
fragment ClusterTargetFragment on ClusterTarget {
	tags
	distro
}
`

func (c *Client) CreateNamespace(ctx context.Context, attributes ManagedNamespaceAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateNamespace, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateNamespace
	if err := c.Client.Post(ctx, "CreateNamespace", CreateNamespaceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateNamespaceDocument = `mutation UpdateNamespace ($id: ID!, $attributes: ManagedNamespaceAttributes!) {
	updateManagedNamespace(id: $id, attributes: $attributes) {
		... ManagedNamespaceFragment
	}
}
fragment ManagedNamespaceFragment on ManagedNamespace {
	id
	name
	description
	labels
	annotations
	pullSecrets
	service {
		... ServiceTemplateFragment
	}
	target {
		... ClusterTargetFragment
	}
	deletedAt
}
fragment ServiceTemplateFragment on ServiceTemplate {
	name
	namespace
	templated
	repositoryId
	contexts
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	kustomize {
		... KustomizeFragment
	}
	syncConfig {
		... SyncConfigFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment SyncConfigFragment on SyncConfig {
	createNamespace
	namespaceMetadata {
		... NamespaceMetadataFragment
	}
}
fragment NamespaceMetadataFragment on NamespaceMetadata {
	labels
	annotations
}
fragment ClusterTargetFragment on ClusterTarget {
	tags
	distro
}
`

func (c *Client) UpdateNamespace(ctx context.Context, id string, attributes ManagedNamespaceAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateNamespace, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateNamespace
	if err := c.Client.Post(ctx, "UpdateNamespace", UpdateNamespaceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteNamespaceDocument = `mutation DeleteNamespace ($id: ID!) {
	deleteManagedNamespace(id: $id) {
		id
	}
}
`

func (c *Client) DeleteNamespace(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteNamespace, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteNamespace
	if err := c.Client.Post(ctx, "DeleteNamespace", DeleteNamespaceDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertNotificationSinkDocument = `mutation UpsertNotificationSink ($attributes: NotificationSinkAttributes!) {
	upsertNotificationSink(attributes: $attributes) {
		... NotificationSinkFragment
	}
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertNotificationSink(ctx context.Context, attributes NotificationSinkAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertNotificationSink, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertNotificationSink
	if err := c.Client.Post(ctx, "UpsertNotificationSink", UpsertNotificationSinkDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteNotificationSinkDocument = `mutation DeleteNotificationSink ($id: ID!) {
	deleteNotificationSink(id: $id) {
		... NotificationSinkFragment
	}
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteNotificationSink(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteNotificationSink, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteNotificationSink
	if err := c.Client.Post(ctx, "DeleteNotificationSink", DeleteNotificationSinkDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNotificationSinkDocument = `query GetNotificationSink ($id: ID!) {
	notificationSink(id: $id) {
		... NotificationSinkFragment
	}
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetNotificationSink(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationSink, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetNotificationSink
	if err := c.Client.Post(ctx, "GetNotificationSink", GetNotificationSinkDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNotificationSinkByNameDocument = `query GetNotificationSinkByName ($name: String) {
	notificationSink(name: $name) {
		... NotificationSinkFragment
	}
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetNotificationSinkByName(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationSinkByName, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetNotificationSinkByName
	if err := c.Client.Post(ctx, "GetNotificationSinkByName", GetNotificationSinkByNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListNotificationSinksDocument = `query ListNotificationSinks ($after: String, $first: Int, $before: String, $last: Int) {
	notificationSinks(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... NotificationSinkEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment NotificationSinkEdgeFragment on NotificationSinkEdge {
	cursor
	node {
		... NotificationSinkFragment
	}
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) ListNotificationSinks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListNotificationSinks, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListNotificationSinks
	if err := c.Client.Post(ctx, "ListNotificationSinks", ListNotificationSinksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNotificationRouterDocument = `query GetNotificationRouter ($id: ID!) {
	notificationRouter(id: $id) {
		... NotificationRouterFragment
	}
}
fragment NotificationRouterFragment on NotificationRouter {
	id
	name
	sinks {
		... NotificationSinkFragment
	}
	events
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetNotificationRouter(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationRouter, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetNotificationRouter
	if err := c.Client.Post(ctx, "GetNotificationRouter", GetNotificationRouterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetNotificationRouterByNameDocument = `query GetNotificationRouterByName ($name: String) {
	notificationRouter(name: $name) {
		... NotificationRouterFragment
	}
}
fragment NotificationRouterFragment on NotificationRouter {
	id
	name
	sinks {
		... NotificationSinkFragment
	}
	events
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetNotificationRouterByName(ctx context.Context, name *string, interceptors ...clientv2.RequestInterceptor) (*GetNotificationRouterByName, error) {
	vars := map[string]any{
		"name": name,
	}

	var res GetNotificationRouterByName
	if err := c.Client.Post(ctx, "GetNotificationRouterByName", GetNotificationRouterByNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteNotificationRouterDocument = `mutation DeleteNotificationRouter ($id: ID!) {
	deleteNotificationRouter(id: $id) {
		... NotificationRouterFragment
	}
}
fragment NotificationRouterFragment on NotificationRouter {
	id
	name
	sinks {
		... NotificationSinkFragment
	}
	events
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteNotificationRouter(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteNotificationRouter, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteNotificationRouter
	if err := c.Client.Post(ctx, "DeleteNotificationRouter", DeleteNotificationRouterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertNotificationRouterDocument = `mutation UpsertNotificationRouter ($attributes: NotificationRouterAttributes!) {
	upsertNotificationRouter(attributes: $attributes) {
		... NotificationRouterFragment
	}
}
fragment NotificationRouterFragment on NotificationRouter {
	id
	name
	sinks {
		... NotificationSinkFragment
	}
	events
}
fragment NotificationSinkFragment on NotificationSink {
	id
	name
	type
	configuration {
		... SinkConfigurationFragment
	}
	notificationBindings {
		... PolicyBindingFragment
	}
}
fragment SinkConfigurationFragment on SinkConfiguration {
	id
	slack {
		... UrlSinkConfigurationFragment
	}
	teams {
		... UrlSinkConfigurationFragment
	}
}
fragment UrlSinkConfigurationFragment on UrlSinkConfiguration {
	url
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertNotificationRouter(ctx context.Context, attributes NotificationRouterAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertNotificationRouter, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertNotificationRouter
	if err := c.Client.Post(ctx, "UpsertNotificationRouter", UpsertNotificationRouterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOIDCProviderDocument = `mutation CreateOIDCProvider ($type: OidcProviderType!, $attributes: OidcProviderAttributes!) {
	createOidcProvider(type: $type, attributes: $attributes) {
		... OIDCProviderFragment
	}
}
fragment OIDCProviderFragment on OidcProvider {
	id
	name
	description
	clientId
	clientSecret
	authMethod
	redirectUris
	bindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) CreateOIDCProvider(ctx context.Context, typeArg OidcProviderType, attributes OidcProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateOIDCProvider, error) {
	vars := map[string]any{
		"type":       typeArg,
		"attributes": attributes,
	}

	var res CreateOIDCProvider
	if err := c.Client.Post(ctx, "CreateOIDCProvider", CreateOIDCProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOIDCProviderDocument = `mutation UpdateOIDCProvider ($id: ID!, $type: OidcProviderType!, $attributes: OidcProviderAttributes!) {
	updateOidcProvider(id: $id, type: $type, attributes: $attributes) {
		... OIDCProviderFragment
	}
}
fragment OIDCProviderFragment on OidcProvider {
	id
	name
	description
	clientId
	clientSecret
	authMethod
	redirectUris
	bindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpdateOIDCProvider(ctx context.Context, id string, typeArg OidcProviderType, attributes OidcProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateOIDCProvider, error) {
	vars := map[string]any{
		"id":         id,
		"type":       typeArg,
		"attributes": attributes,
	}

	var res UpdateOIDCProvider
	if err := c.Client.Post(ctx, "UpdateOIDCProvider", UpdateOIDCProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOIDCProviderDocument = `mutation DeleteOIDCProvider ($id: ID!, $type: OidcProviderType!) {
	deleteOidcProvider(id: $id, type: $type) {
		... OIDCProviderFragment
	}
}
fragment OIDCProviderFragment on OidcProvider {
	id
	name
	description
	clientId
	clientSecret
	authMethod
	redirectUris
	bindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteOIDCProvider(ctx context.Context, id string, typeArg OidcProviderType, interceptors ...clientv2.RequestInterceptor) (*DeleteOIDCProvider, error) {
	vars := map[string]any{
		"id":   id,
		"type": typeArg,
	}

	var res DeleteOIDCProvider
	if err := c.Client.Post(ctx, "DeleteOIDCProvider", DeleteOIDCProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListObservabilityProvidersDocument = `query ListObservabilityProviders ($after: String, $first: Int, $before: String, $last: Int) {
	observabilityProviders(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... ObservabilityProviderFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ObservabilityProviderFragment on ObservabilityProvider {
	id
	name
	type
	updatedAt
	insertedAt
}
`

func (c *Client) ListObservabilityProviders(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListObservabilityProviders, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListObservabilityProviders
	if err := c.Client.Post(ctx, "ListObservabilityProviders", ListObservabilityProvidersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetObservabilityProviderDocument = `query GetObservabilityProvider ($id: ID, $name: String) {
	observabilityProvider(id: $id, name: $name) {
		... ObservabilityProviderFragment
	}
}
fragment ObservabilityProviderFragment on ObservabilityProvider {
	id
	name
	type
	updatedAt
	insertedAt
}
`

func (c *Client) GetObservabilityProvider(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetObservabilityProvider, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetObservabilityProvider
	if err := c.Client.Post(ctx, "GetObservabilityProvider", GetObservabilityProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertObservabilityProviderDocument = `mutation UpsertObservabilityProvider ($attributes: ObservabilityProviderAttributes!) {
	upsertObservabilityProvider(attributes: $attributes) {
		... ObservabilityProviderFragment
	}
}
fragment ObservabilityProviderFragment on ObservabilityProvider {
	id
	name
	type
	updatedAt
	insertedAt
}
`

func (c *Client) UpsertObservabilityProvider(ctx context.Context, attributes ObservabilityProviderAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertObservabilityProvider, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertObservabilityProvider
	if err := c.Client.Post(ctx, "UpsertObservabilityProvider", UpsertObservabilityProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteObservabilityProviderDocument = `mutation DeleteObservabilityProvider ($id: ID!) {
	deleteObservabilityProvider(id: $id) {
		... ObservabilityProviderFragment
	}
}
fragment ObservabilityProviderFragment on ObservabilityProvider {
	id
	name
	type
	updatedAt
	insertedAt
}
`

func (c *Client) DeleteObservabilityProvider(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteObservabilityProvider, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteObservabilityProvider
	if err := c.Client.Post(ctx, "DeleteObservabilityProvider", DeleteObservabilityProviderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertObserverDocument = `mutation UpsertObserver ($attributes: ObserverAttributes!) {
	upsertObserver(attributes: $attributes) {
		... ObserverFragment
	}
}
fragment ObserverFragment on Observer {
	id
	name
	status
	crontab
	target {
		... ObserverTargetFragment
	}
	actions {
		... ObserverActionFragment
	}
	project {
		... ProjectFragment
	}
	errors {
		... ErrorFragment
	}
	insertedAt
	updatedAt
}
fragment ObserverTargetFragment on ObserverTarget {
	helm {
		... ObserverHelmRepoFragment
	}
	oci {
		... ObserverOciRepoFragment
	}
}
fragment ObserverHelmRepoFragment on ObserverHelmRepo {
	url
	chart
	provider
}
fragment ObserverOciRepoFragment on ObserverOciRepo {
	url
	provider
}
fragment ObserverActionFragment on ObserverAction {
	type
	configuration {
		... ObserverActionConfigurationFragment
	}
}
fragment ObserverActionConfigurationFragment on ObserverActionConfiguration {
	pr {
		... ObserverPrActionFragment
	}
	pipeline {
		... ObserverPipelineActionFragment
	}
}
fragment ObserverPrActionFragment on ObserverPrAction {
	automationId
	repository
	branchTemplate
	context
}
fragment ObserverPipelineActionFragment on ObserverPipelineAction {
	pipelineId
	context
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment ErrorFragment on ServiceError {
	source
	message
}
`

func (c *Client) UpsertObserver(ctx context.Context, attributes ObserverAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertObserver, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertObserver
	if err := c.Client.Post(ctx, "UpsertObserver", UpsertObserverDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteObserverDocument = `mutation DeleteObserver ($id: ID!) {
	deleteObserver(id: $id) {
		... ObserverFragment
	}
}
fragment ObserverFragment on Observer {
	id
	name
	status
	crontab
	target {
		... ObserverTargetFragment
	}
	actions {
		... ObserverActionFragment
	}
	project {
		... ProjectFragment
	}
	errors {
		... ErrorFragment
	}
	insertedAt
	updatedAt
}
fragment ObserverTargetFragment on ObserverTarget {
	helm {
		... ObserverHelmRepoFragment
	}
	oci {
		... ObserverOciRepoFragment
	}
}
fragment ObserverHelmRepoFragment on ObserverHelmRepo {
	url
	chart
	provider
}
fragment ObserverOciRepoFragment on ObserverOciRepo {
	url
	provider
}
fragment ObserverActionFragment on ObserverAction {
	type
	configuration {
		... ObserverActionConfigurationFragment
	}
}
fragment ObserverActionConfigurationFragment on ObserverActionConfiguration {
	pr {
		... ObserverPrActionFragment
	}
	pipeline {
		... ObserverPipelineActionFragment
	}
}
fragment ObserverPrActionFragment on ObserverPrAction {
	automationId
	repository
	branchTemplate
	context
}
fragment ObserverPipelineActionFragment on ObserverPipelineAction {
	pipelineId
	context
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment ErrorFragment on ServiceError {
	source
	message
}
`

func (c *Client) DeleteObserver(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteObserver, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteObserver
	if err := c.Client.Post(ctx, "DeleteObserver", DeleteObserverDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetObserverDocument = `query GetObserver ($id: ID, $name: String) {
	observer(id: $id, name: $name) {
		... ObserverFragment
	}
}
fragment ObserverFragment on Observer {
	id
	name
	status
	crontab
	target {
		... ObserverTargetFragment
	}
	actions {
		... ObserverActionFragment
	}
	project {
		... ProjectFragment
	}
	errors {
		... ErrorFragment
	}
	insertedAt
	updatedAt
}
fragment ObserverTargetFragment on ObserverTarget {
	helm {
		... ObserverHelmRepoFragment
	}
	oci {
		... ObserverOciRepoFragment
	}
}
fragment ObserverHelmRepoFragment on ObserverHelmRepo {
	url
	chart
	provider
}
fragment ObserverOciRepoFragment on ObserverOciRepo {
	url
	provider
}
fragment ObserverActionFragment on ObserverAction {
	type
	configuration {
		... ObserverActionConfigurationFragment
	}
}
fragment ObserverActionConfigurationFragment on ObserverActionConfiguration {
	pr {
		... ObserverPrActionFragment
	}
	pipeline {
		... ObserverPipelineActionFragment
	}
}
fragment ObserverPrActionFragment on ObserverPrAction {
	automationId
	repository
	branchTemplate
	context
}
fragment ObserverPipelineActionFragment on ObserverPipelineAction {
	pipelineId
	context
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment ErrorFragment on ServiceError {
	source
	message
}
`

func (c *Client) GetObserver(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetObserver, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetObserver
	if err := c.Client.Post(ctx, "GetObserver", GetObserverDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertPolicyConstraintsDocument = `mutation UpsertPolicyConstraints ($constraints: [PolicyConstraintAttributes!]) {
	upsertPolicyConstraints(constraints: $constraints)
}
`

func (c *Client) UpsertPolicyConstraints(ctx context.Context, constraints []*PolicyConstraintAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertPolicyConstraints, error) {
	vars := map[string]any{
		"constraints": constraints,
	}

	var res UpsertPolicyConstraints
	if err := c.Client.Post(ctx, "UpsertPolicyConstraints", UpsertPolicyConstraintsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListPolicyConstraintsDocument = `query ListPolicyConstraints ($after: String, $first: Int, $before: String, $last: Int, $namespace: String, $kind: String, $q: String) {
	policyConstraints(after: $after, first: $first, before: $before, last: $last, namespace: $namespace, kind: $kind, q: $q) {
		... PolicyConstraintConnectionFragment
	}
}
fragment PolicyConstraintConnectionFragment on PolicyConstraintConnection {
	pageInfo {
		... PageInfoFragment
	}
	edges {
		... PolicyConstraintEdgeFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment PolicyConstraintEdgeFragment on PolicyConstraintEdge {
	cursor
	node {
		... PolicyConstraintFragment
	}
}
fragment PolicyConstraintFragment on PolicyConstraint {
	id
	name
	description
	recommendation
	violationCount
	ref {
		... ConstraintRefFragment
	}
	violations {
		... ViolationFragment
	}
}
fragment ConstraintRefFragment on ConstraintRef {
	kind
	name
}
fragment ViolationFragment on Violation {
	id
	group
	version
	kind
	namespace
	name
	message
}
`

func (c *Client) ListPolicyConstraints(ctx context.Context, after *string, first *int64, before *string, last *int64, namespace *string, kind *string, q *string, interceptors ...clientv2.RequestInterceptor) (*ListPolicyConstraints, error) {
	vars := map[string]any{
		"after":     after,
		"first":     first,
		"before":    before,
		"last":      last,
		"namespace": namespace,
		"kind":      kind,
		"q":         q,
	}

	var res ListPolicyConstraints
	if err := c.Client.Post(ctx, "ListPolicyConstraints", ListPolicyConstraintsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListViolationStatisticsDocument = `query ListViolationStatistics ($field: ConstraintViolationField!) {
	violationStatistics(field: $field) {
		... ViolationStatisticFragment
	}
}
fragment ViolationStatisticFragment on ViolationStatistic {
	value
	violations
	count
}
`

func (c *Client) ListViolationStatistics(ctx context.Context, field ConstraintViolationField, interceptors ...clientv2.RequestInterceptor) (*ListViolationStatistics, error) {
	vars := map[string]any{
		"field": field,
	}

	var res ListViolationStatistics
	if err := c.Client.Post(ctx, "ListViolationStatistics", ListViolationStatisticsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonaDocument = `query GetPersona ($id: ID!) {
	persona(id: $id) {
		... PersonaFragment
	}
}
fragment PersonaFragment on Persona {
	id
	name
	description
	configuration {
		... PersonaConfigurationFragment
	}
	bindings {
		... PolicyBindingFragment
	}
}
fragment PersonaConfigurationFragment on PersonaConfiguration {
	all
	deployments {
		addOns
		clusters
		pipelines
		providers
		repositories
		services
	}
	home {
		manager
		security
	}
	sidebar {
		audits
		kubernetes
		pullRequests
		settings
		backups
		stacks
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetPersona(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPersona, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetPersona
	if err := c.Client.Post(ctx, "GetPersona", GetPersonaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePersonaDocument = `mutation CreatePersona ($attributes: PersonaAttributes!) {
	createPersona(attributes: $attributes) {
		... PersonaFragment
	}
}
fragment PersonaFragment on Persona {
	id
	name
	description
	configuration {
		... PersonaConfigurationFragment
	}
	bindings {
		... PolicyBindingFragment
	}
}
fragment PersonaConfigurationFragment on PersonaConfiguration {
	all
	deployments {
		addOns
		clusters
		pipelines
		providers
		repositories
		services
	}
	home {
		manager
		security
	}
	sidebar {
		audits
		kubernetes
		pullRequests
		settings
		backups
		stacks
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) CreatePersona(ctx context.Context, attributes PersonaAttributes, interceptors ...clientv2.RequestInterceptor) (*CreatePersona, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreatePersona
	if err := c.Client.Post(ctx, "CreatePersona", CreatePersonaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePersonaDocument = `mutation UpdatePersona ($id: ID!, $attributes: PersonaAttributes!) {
	updatePersona(id: $id, attributes: $attributes) {
		... PersonaFragment
	}
}
fragment PersonaFragment on Persona {
	id
	name
	description
	configuration {
		... PersonaConfigurationFragment
	}
	bindings {
		... PolicyBindingFragment
	}
}
fragment PersonaConfigurationFragment on PersonaConfiguration {
	all
	deployments {
		addOns
		clusters
		pipelines
		providers
		repositories
		services
	}
	home {
		manager
		security
	}
	sidebar {
		audits
		kubernetes
		pullRequests
		settings
		backups
		stacks
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpdatePersona(ctx context.Context, id string, attributes PersonaAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdatePersona, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdatePersona
	if err := c.Client.Post(ctx, "UpdatePersona", UpdatePersonaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePersonaDocument = `mutation DeletePersona ($id: ID!) {
	deletePersona(id: $id) {
		... PersonaFragment
	}
}
fragment PersonaFragment on Persona {
	id
	name
	description
	configuration {
		... PersonaConfigurationFragment
	}
	bindings {
		... PolicyBindingFragment
	}
}
fragment PersonaConfigurationFragment on PersonaConfiguration {
	all
	deployments {
		addOns
		clusters
		pipelines
		providers
		repositories
		services
	}
	home {
		manager
		security
	}
	sidebar {
		audits
		kubernetes
		pullRequests
		settings
		backups
		stacks
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeletePersona(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePersona, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeletePersona
	if err := c.Client.Post(ctx, "DeletePersona", DeletePersonaDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SavePipelineDocument = `mutation SavePipeline ($name: String!, $attributes: PipelineAttributes!) {
	savePipeline(name: $name, attributes: $attributes) {
		... PipelineFragmentMinimal
	}
}
fragment PipelineFragmentMinimal on Pipeline {
	id
	name
}
`

func (c *Client) SavePipeline(ctx context.Context, name string, attributes PipelineAttributes, interceptors ...clientv2.RequestInterceptor) (*SavePipeline, error) {
	vars := map[string]any{
		"name":       name,
		"attributes": attributes,
	}

	var res SavePipeline
	if err := c.Client.Post(ctx, "SavePipeline", SavePipelineDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePipelineDocument = `mutation DeletePipeline ($id: ID!) {
	deletePipeline(id: $id) {
		... PipelineFragmentId
	}
}
fragment PipelineFragmentId on Pipeline {
	id
}
`

func (c *Client) DeletePipeline(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePipeline, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeletePipeline
	if err := c.Client.Post(ctx, "DeletePipeline", DeletePipelineDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPipelineDocument = `query GetPipeline ($id: ID!) {
	pipeline(id: $id) {
		... PipelineFragmentMinimal
	}
}
fragment PipelineFragmentMinimal on Pipeline {
	id
	name
}
`

func (c *Client) GetPipeline(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPipeline, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetPipeline
	if err := c.Client.Post(ctx, "GetPipeline", GetPipelineDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPipelinesDocument = `query GetPipelines ($after: String) {
	pipelines(first: 100, after: $after) {
		edges {
			... PipelineEdgeFragment
		}
	}
}
fragment PipelineEdgeFragment on PipelineEdge {
	node {
		... PipelineFragment
	}
}
fragment PipelineFragment on Pipeline {
	id
	name
	stages {
		... PipelineStageFragment
	}
	edges {
		... PipelineStageEdgeFragment
	}
	project {
		... TinyProjectFragment
	}
}
fragment PipelineStageFragment on PipelineStage {
	id
	name
	services {
		service {
			... ServiceDeploymentBaseFragment
		}
		criteria {
			source {
				... ServiceDeploymentBaseFragment
			}
			secrets
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PipelineStageEdgeFragment on PipelineStageEdge {
	id
	from {
		... PipelineStageFragment
	}
	to {
		... PipelineStageFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
`

func (c *Client) GetPipelines(ctx context.Context, after *string, interceptors ...clientv2.RequestInterceptor) (*GetPipelines, error) {
	vars := map[string]any{
		"after": after,
	}

	var res GetPipelines
	if err := c.Client.Post(ctx, "GetPipelines", GetPipelinesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePipelineContextDocument = `mutation CreatePipelineContext ($pipelineId: ID!, $attributes: PipelineContextAttributes!) {
	createPipelineContext(pipelineId: $pipelineId, attributes: $attributes) {
		... PipelineContextFragment
	}
}
fragment PipelineContextFragment on PipelineContext {
	id
	context
}
`

func (c *Client) CreatePipelineContext(ctx context.Context, pipelineID string, attributes PipelineContextAttributes, interceptors ...clientv2.RequestInterceptor) (*CreatePipelineContext, error) {
	vars := map[string]any{
		"pipelineId": pipelineID,
		"attributes": attributes,
	}

	var res CreatePipelineContext
	if err := c.Client.Post(ctx, "CreatePipelineContext", CreatePipelineContextDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPipelineContextDocument = `query GetPipelineContext ($id: ID!) {
	pipelineContext(id: $id) {
		... PipelineContextFragment
	}
}
fragment PipelineContextFragment on PipelineContext {
	id
	context
}
`

func (c *Client) GetPipelineContext(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetPipelineContext, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetPipelineContext
	if err := c.Client.Post(ctx, "GetPipelineContext", GetPipelineContextDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListComplianceReportGeneratorsDocument = `query ListComplianceReportGenerators ($after: String, $before: String, $first: Int, $last: Int) {
	complianceReportGenerators(after: $after, before: $before, first: $first, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... ComplianceReportGeneratorFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ComplianceReportGeneratorFragment on ComplianceReportGenerator {
	id
	name
	format
	readBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) ListComplianceReportGenerators(ctx context.Context, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListComplianceReportGenerators, error) {
	vars := map[string]any{
		"after":  after,
		"before": before,
		"first":  first,
		"last":   last,
	}

	var res ListComplianceReportGenerators
	if err := c.Client.Post(ctx, "ListComplianceReportGenerators", ListComplianceReportGeneratorsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetComplianceReportGeneratorDocument = `query GetComplianceReportGenerator ($id: ID, $name: String) {
	complianceReportGenerator(id: $id, name: $name) {
		... ComplianceReportGeneratorFragment
	}
}
fragment ComplianceReportGeneratorFragment on ComplianceReportGenerator {
	id
	name
	format
	readBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetComplianceReportGenerator(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetComplianceReportGenerator, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetComplianceReportGenerator
	if err := c.Client.Post(ctx, "GetComplianceReportGenerator", GetComplianceReportGeneratorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertComplianceReportGeneratorDocument = `mutation UpsertComplianceReportGenerator ($attributes: ComplianceReportGeneratorAttributes!) {
	upsertComplianceReportGenerator(attributes: $attributes) {
		... ComplianceReportGeneratorFragment
	}
}
fragment ComplianceReportGeneratorFragment on ComplianceReportGenerator {
	id
	name
	format
	readBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertComplianceReportGenerator(ctx context.Context, attributes ComplianceReportGeneratorAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertComplianceReportGenerator, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertComplianceReportGenerator
	if err := c.Client.Post(ctx, "UpsertComplianceReportGenerator", UpsertComplianceReportGeneratorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteComplianceReportGeneratorDocument = `mutation DeleteComplianceReportGenerator ($id: ID!) {
	deleteComplianceReportGenerator(id: $id) {
		... ComplianceReportGeneratorFragment
	}
}
fragment ComplianceReportGeneratorFragment on ComplianceReportGenerator {
	id
	name
	format
	readBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteComplianceReportGenerator(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteComplianceReportGenerator, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteComplianceReportGenerator
	if err := c.Client.Post(ctx, "DeleteComplianceReportGenerator", DeleteComplianceReportGeneratorDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPreviewEnvironmentTemplateDocument = `query GetPreviewEnvironmentTemplate ($id: ID, $flowId: ID, $name: String) {
	previewEnvironmentTemplate(id: $id, flowId: $flowId, name: $name) {
		... PreviewEnvironmentTemplateFragment
	}
}
fragment PreviewEnvironmentTemplateFragment on PreviewEnvironmentTemplate {
	id
	name
	commentTemplate
	flow {
		id
	}
	connection {
		id
	}
	template {
		name
	}
}
`

func (c *Client) GetPreviewEnvironmentTemplate(ctx context.Context, id *string, flowID *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetPreviewEnvironmentTemplate, error) {
	vars := map[string]any{
		"id":     id,
		"flowId": flowID,
		"name":   name,
	}

	var res GetPreviewEnvironmentTemplate
	if err := c.Client.Post(ctx, "GetPreviewEnvironmentTemplate", GetPreviewEnvironmentTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertPreviewEnvironmentTemplateDocument = `mutation UpsertPreviewEnvironmentTemplate ($attributes: PreviewEnvironmentTemplateAttributes!) {
	upsertPreviewEnvironmentTemplate(attributes: $attributes) {
		... PreviewEnvironmentTemplateFragment
	}
}
fragment PreviewEnvironmentTemplateFragment on PreviewEnvironmentTemplate {
	id
	name
	commentTemplate
	flow {
		id
	}
	connection {
		id
	}
	template {
		name
	}
}
`

func (c *Client) UpsertPreviewEnvironmentTemplate(ctx context.Context, attributes PreviewEnvironmentTemplateAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertPreviewEnvironmentTemplate, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertPreviewEnvironmentTemplate
	if err := c.Client.Post(ctx, "UpsertPreviewEnvironmentTemplate", UpsertPreviewEnvironmentTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePreviewEnvironmentTemplateDocument = `mutation DeletePreviewEnvironmentTemplate ($id: ID!) {
	deletePreviewEnvironmentTemplate(id: $id) {
		id
	}
}
`

func (c *Client) DeletePreviewEnvironmentTemplate(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeletePreviewEnvironmentTemplate, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeletePreviewEnvironmentTemplate
	if err := c.Client.Post(ctx, "DeletePreviewEnvironmentTemplate", DeletePreviewEnvironmentTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListProjectsDocument = `query ListProjects ($after: String, $before: String, $first: Int, $last: Int, $q: String) {
	projects(after: $after, before: $before, first: $first, last: $last, q: $q) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... ProjectFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) ListProjects(ctx context.Context, after *string, before *string, first *int64, last *int64, q *string, interceptors ...clientv2.RequestInterceptor) (*ListProjects, error) {
	vars := map[string]any{
		"after":  after,
		"before": before,
		"first":  first,
		"last":   last,
		"q":      q,
	}

	var res ListProjects
	if err := c.Client.Post(ctx, "ListProjects", ListProjectsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetProjectDocument = `query GetProject ($id: ID, $name: String) {
	project(id: $id, name: $name) {
		... ProjectFragment
	}
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetProject(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetProject, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetProject
	if err := c.Client.Post(ctx, "GetProject", GetProjectDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProjectDocument = `mutation CreateProject ($attributes: ProjectAttributes!) {
	createProject(attributes: $attributes) {
		... ProjectFragment
	}
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) CreateProject(ctx context.Context, attributes ProjectAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateProject, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateProject
	if err := c.Client.Post(ctx, "CreateProject", CreateProjectDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateProjectDocument = `mutation UpdateProject ($id: ID!, $attributes: ProjectAttributes!) {
	updateProject(id: $id, attributes: $attributes) {
		... ProjectFragment
	}
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpdateProject(ctx context.Context, id string, attributes ProjectAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateProject, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateProject
	if err := c.Client.Post(ctx, "UpdateProject", UpdateProjectDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProjectDocument = `mutation DeleteProject ($id: ID!) {
	deleteProject(id: $id) {
		... ProjectFragment
	}
}
fragment ProjectFragment on Project {
	id
	insertedAt
	updatedAt
	name
	default
	description
	readBindings {
		... PolicyBindingFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteProject(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteProject, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteProject
	if err := c.Client.Post(ctx, "DeleteProject", DeleteProjectDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateProviderCredentialDocument = `mutation CreateProviderCredential ($attributes: ProviderCredentialAttributes!, $name: String!) {
	createProviderCredential(attributes: $attributes, name: $name) {
		... ProviderCredentialFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) CreateProviderCredential(ctx context.Context, attributes ProviderCredentialAttributes, name string, interceptors ...clientv2.RequestInterceptor) (*CreateProviderCredential, error) {
	vars := map[string]any{
		"attributes": attributes,
		"name":       name,
	}

	var res CreateProviderCredential
	if err := c.Client.Post(ctx, "CreateProviderCredential", CreateProviderCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteProviderCredentialDocument = `mutation DeleteProviderCredential ($id: ID!) {
	deleteProviderCredential(id: $id) {
		... ProviderCredentialFragment
	}
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) DeleteProviderCredential(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteProviderCredential, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteProviderCredential
	if err := c.Client.Post(ctx, "DeleteProviderCredential", DeleteProviderCredentialDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListProvidersDocument = `query ListProviders {
	clusterProviders(first: 100) {
		edges {
			node {
				... ClusterProviderFragment
			}
		}
	}
}
fragment ClusterProviderFragment on ClusterProvider {
	id
	name
	namespace
	cloud
	editable
	deletedAt
	repository {
		... GitRepositoryFragment
	}
	service {
		... ServiceDeploymentFragment
	}
	credentials {
		... ProviderCredentialFragment
	}
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment ServiceDeploymentFragment on ServiceDeployment {
	... ServiceDeploymentBaseFragment
	components {
		id
		uid
		name
		group
		kind
		namespace
		state
		synced
		version
		content {
			... ComponentContentFragment
		}
	}
	protect
	deletedAt
	sha
	tarball
	dryRun
	templated
	configuration {
		name
		value
	}
	flow {
		id
	}
	syncConfig {
		createNamespace
		enforceNamespace
		namespaceMetadata {
			labels
			annotations
		}
		diffNormalizers {
			... DiffNormalizerFragment
		}
	}
}
fragment ServiceDeploymentBaseFragment on ServiceDeployment {
	id
	name
	namespace
	version
	status
	kustomize {
		... KustomizeFragment
	}
	git {
		... GitRefFragment
	}
	helm {
		... HelmSpecFragment
	}
	repository {
		... GitRepositoryFragment
	}
}
fragment KustomizeFragment on Kustomize {
	path
	enableHelm
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment HelmSpecFragment on HelmSpec {
	valuesFiles
}
fragment ComponentContentFragment on ComponentContent {
	id
	live
	desired
}
fragment DiffNormalizerFragment on DiffNormalizer {
	namespace
	name
	kind
	backfill
	jsonPointers
}
fragment ProviderCredentialFragment on ProviderCredential {
	id
	name
	namespace
	kind
}
`

func (c *Client) ListProviders(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListProviders, error) {
	vars := map[string]any{}

	var res ListProviders
	if err := c.Client.Post(ctx, "ListProviders", ListProvidersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateRbacDocument = `mutation UpdateRbac ($rbac: RbacAttributes!, $serviceId: ID, $clusterId: ID, $providerId: ID) {
	updateRbac(rbac: $rbac, serviceId: $serviceId, clusterId: $clusterId, providerId: $providerId)
}
`

func (c *Client) UpdateRbac(ctx context.Context, rbac RbacAttributes, serviceID *string, clusterID *string, providerID *string, interceptors ...clientv2.RequestInterceptor) (*UpdateRbac, error) {
	vars := map[string]any{
		"rbac":       rbac,
		"serviceId":  serviceID,
		"clusterId":  clusterID,
		"providerId": providerID,
	}

	var res UpdateRbac
	if err := c.Client.Post(ctx, "UpdateRbac", UpdateRbacDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSentinelDocument = `mutation CreateSentinel ($attributes: SentinelAttributes) {
	createSentinel(attributes: $attributes) {
		... SentinelFragment
	}
}
fragment SentinelFragment on Sentinel {
	id
	name
	description
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	project {
		... TinyProjectFragment
	}
	checks {
		... SentinelCheckFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment SentinelCheckFragment on SentinelCheck {
	id
	name
	type
	ruleFile
	configuration {
		... SentinelCheckConfigurationFragment
	}
}
fragment SentinelCheckConfigurationFragment on SentinelCheckConfiguration {
	log {
		... SentinelCheckLogConfigurationFragment
	}
	kubernetes {
		... SentinelCheckKubernetesConfigurationFragment
	}
}
fragment SentinelCheckLogConfigurationFragment on SentinelCheckLogConfiguration {
	namespaces
	query
	clusterId
	facets {
		key
		value
	}
	duration
}
fragment SentinelCheckKubernetesConfigurationFragment on SentinelCheckKubernetesConfiguration {
	group
	version
	kind
	name
	namespace
}
`

func (c *Client) CreateSentinel(ctx context.Context, attributes *SentinelAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateSentinel, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateSentinel
	if err := c.Client.Post(ctx, "CreateSentinel", CreateSentinelDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSentinelDocument = `mutation UpdateSentinel ($id: ID!, $attributes: SentinelAttributes) {
	updateSentinel(id: $id, attributes: $attributes) {
		... SentinelFragment
	}
}
fragment SentinelFragment on Sentinel {
	id
	name
	description
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	project {
		... TinyProjectFragment
	}
	checks {
		... SentinelCheckFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment SentinelCheckFragment on SentinelCheck {
	id
	name
	type
	ruleFile
	configuration {
		... SentinelCheckConfigurationFragment
	}
}
fragment SentinelCheckConfigurationFragment on SentinelCheckConfiguration {
	log {
		... SentinelCheckLogConfigurationFragment
	}
	kubernetes {
		... SentinelCheckKubernetesConfigurationFragment
	}
}
fragment SentinelCheckLogConfigurationFragment on SentinelCheckLogConfiguration {
	namespaces
	query
	clusterId
	facets {
		key
		value
	}
	duration
}
fragment SentinelCheckKubernetesConfigurationFragment on SentinelCheckKubernetesConfiguration {
	group
	version
	kind
	name
	namespace
}
`

func (c *Client) UpdateSentinel(ctx context.Context, id string, attributes *SentinelAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateSentinel, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateSentinel
	if err := c.Client.Post(ctx, "UpdateSentinel", UpdateSentinelDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSentinelDocument = `mutation DeleteSentinel ($id: ID!) {
	deleteSentinel(id: $id) {
		id
	}
}
`

func (c *Client) DeleteSentinel(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteSentinel, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteSentinel
	if err := c.Client.Post(ctx, "DeleteSentinel", DeleteSentinelDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSentinelDocument = `query GetSentinel ($id: ID!) {
	sentinel(id: $id) {
		... SentinelFragment
	}
}
fragment SentinelFragment on Sentinel {
	id
	name
	description
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	project {
		... TinyProjectFragment
	}
	checks {
		... SentinelCheckFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment SentinelCheckFragment on SentinelCheck {
	id
	name
	type
	ruleFile
	configuration {
		... SentinelCheckConfigurationFragment
	}
}
fragment SentinelCheckConfigurationFragment on SentinelCheckConfiguration {
	log {
		... SentinelCheckLogConfigurationFragment
	}
	kubernetes {
		... SentinelCheckKubernetesConfigurationFragment
	}
}
fragment SentinelCheckLogConfigurationFragment on SentinelCheckLogConfiguration {
	namespaces
	query
	clusterId
	facets {
		key
		value
	}
	duration
}
fragment SentinelCheckKubernetesConfigurationFragment on SentinelCheckKubernetesConfiguration {
	group
	version
	kind
	name
	namespace
}
`

func (c *Client) GetSentinel(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetSentinel, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetSentinel
	if err := c.Client.Post(ctx, "GetSentinel", GetSentinelDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ServiceAccountsDocument = `query ServiceAccounts ($after: String, $first: Int, $before: String, $last: Int, $q: String) {
	serviceAccounts(after: $after, first: $first, before: $before, last: $last, q: $q) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... UserFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) ServiceAccounts(ctx context.Context, after *string, first *int64, before *string, last *int64, q *string, interceptors ...clientv2.RequestInterceptor) (*ServiceAccounts, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
		"q":      q,
	}

	var res ServiceAccounts
	if err := c.Client.Post(ctx, "ServiceAccounts", ServiceAccountsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateServiceAccountDocument = `mutation CreateServiceAccount ($attributes: ServiceAccountAttributes!) {
	createServiceAccount(attributes: $attributes) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) CreateServiceAccount(ctx context.Context, attributes ServiceAccountAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceAccount, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateServiceAccount
	if err := c.Client.Post(ctx, "CreateServiceAccount", CreateServiceAccountDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateServiceAccountDocument = `mutation UpdateServiceAccount ($id: ID!, $attributes: ServiceAccountAttributes!) {
	updateServiceAccount(id: $id, attributes: $attributes) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpdateServiceAccount(ctx context.Context, id string, attributes ServiceAccountAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateServiceAccount, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateServiceAccount
	if err := c.Client.Post(ctx, "UpdateServiceAccount", UpdateServiceAccountDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateServiceAccountTokenDocument = `mutation CreateServiceAccountToken ($id: ID!, $scopes: [ScopeAttributes]) {
	createServiceAccountToken(id: $id, scopes: $scopes) {
		... AccessTokenFragment
	}
}
fragment AccessTokenFragment on AccessToken {
	id
	token
}
`

func (c *Client) CreateServiceAccountToken(ctx context.Context, id string, scopes []*ScopeAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateServiceAccountToken, error) {
	vars := map[string]any{
		"id":     id,
		"scopes": scopes,
	}

	var res CreateServiceAccountToken
	if err := c.Client.Post(ctx, "CreateServiceAccountToken", CreateServiceAccountTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ShareSecretDocument = `mutation ShareSecret ($attributes: SharedSecretAttributes!) {
	shareSecret(attributes: $attributes) {
		name
		handle
		secret
		insertedAt
		updatedAt
	}
}
`

func (c *Client) ShareSecret(ctx context.Context, attributes SharedSecretAttributes, interceptors ...clientv2.RequestInterceptor) (*ShareSecret, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res ShareSecret
	if err := c.Client.Post(ctx, "ShareSecret", ShareSecretDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClusterStacksDocument = `query ListClusterStacks ($after: String, $first: Int, $before: String, $last: Int) {
	clusterStackRuns(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... StackRunEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment StackRunEdgeFragment on StackRunEdge {
	node {
		... StackRunFragment
	}
}
fragment StackRunFragment on StackRun {
	... StackRunBaseFragment
	approver {
		... UserFragment
	}
}
fragment StackRunBaseFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	variables
	dryRun
	stateUrls {
		terraform {
			address
			lock
			unlock
		}
	}
	pluralCreds {
		url
		token
	}
	actor {
		... UserFragment
	}
	stack {
		... InfrastructureStackFragment
	}
	state {
		... StackStateFragment
	}
	steps {
		... RunStepFragment
	}
	files {
		... StackFileFragment
	}
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	errors {
		... ServiceErrorFragment
	}
	violations {
		... StackPolicyViolationFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
fragment ServiceErrorFragment on ServiceError {
	source
	message
}
fragment StackPolicyViolationFragment on StackPolicyViolation {
	id
	title
	description
	policyId
	policyModule
	policyUrl
	severity
	resolution
	causes {
		... StackViolationCauseFragment
	}
}
fragment StackViolationCauseFragment on StackViolationCause {
	start
	end
	resource
	filename
	lines {
		... StackViolationCauseLineFragment
	}
}
fragment StackViolationCauseLineFragment on StackViolationCauseLine {
	first
	last
	content
	line
}
`

func (c *Client) ListClusterStacks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterStacks, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListClusterStacks
	if err := c.Client.Post(ctx, "ListClusterStacks", ListClusterStacksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClusterStackIdsDocument = `query ListClusterStackIds ($after: String, $first: Int, $before: String, $last: Int) {
	clusterStackRuns(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... StackRunIdEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment StackRunIdEdgeFragment on StackRunEdge {
	node {
		... StackRunIdFragment
	}
}
fragment StackRunIdFragment on StackRun {
	id
}
`

func (c *Client) ListClusterStackIds(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterStackIds, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListClusterStackIds
	if err := c.Client.Post(ctx, "ListClusterStackIds", ListClusterStackIdsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListClusterMinimalStacksDocument = `query ListClusterMinimalStacks ($after: String, $first: Int, $before: String, $last: Int) {
	clusterStackRuns(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... MinimalStackRunEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment MinimalStackRunEdgeFragment on StackRunEdge {
	node {
		... StackRunMinimalFragment
	}
}
fragment StackRunMinimalFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
`

func (c *Client) ListClusterMinimalStacks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListClusterMinimalStacks, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListClusterMinimalStacks
	if err := c.Client.Post(ctx, "ListClusterMinimalStacks", ListClusterMinimalStacksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListInfrastructureStacksDocument = `query ListInfrastructureStacks ($after: String, $first: Int, $before: String, $last: Int) {
	infrastructureStacks(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			... InfrastructureStackEdgeFragment
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment InfrastructureStackEdgeFragment on InfrastructureStackEdge {
	node {
		... InfrastructureStackFragment
	}
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
`

func (c *Client) ListInfrastructureStacks(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListInfrastructureStacks, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListInfrastructureStacks
	if err := c.Client.Post(ctx, "ListInfrastructureStacks", ListInfrastructureStacksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStackRunMinimalDocument = `query GetStackRunMinimal ($id: ID!) {
	stackRun(id: $id) {
		... StackRunMinimalFragment
	}
}
fragment StackRunMinimalFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
`

func (c *Client) GetStackRunMinimal(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackRunMinimal, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetStackRunMinimal
	if err := c.Client.Post(ctx, "GetStackRunMinimal", GetStackRunMinimalDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStackRunDocument = `query GetStackRun ($id: ID!) {
	stackRun(id: $id) {
		... StackRunFragment
	}
}
fragment StackRunFragment on StackRun {
	... StackRunBaseFragment
	approver {
		... UserFragment
	}
}
fragment StackRunBaseFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	variables
	dryRun
	stateUrls {
		terraform {
			address
			lock
			unlock
		}
	}
	pluralCreds {
		url
		token
	}
	actor {
		... UserFragment
	}
	stack {
		... InfrastructureStackFragment
	}
	state {
		... StackStateFragment
	}
	steps {
		... RunStepFragment
	}
	files {
		... StackFileFragment
	}
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	errors {
		... ServiceErrorFragment
	}
	violations {
		... StackPolicyViolationFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
fragment ServiceErrorFragment on ServiceError {
	source
	message
}
fragment StackPolicyViolationFragment on StackPolicyViolation {
	id
	title
	description
	policyId
	policyModule
	policyUrl
	severity
	resolution
	causes {
		... StackViolationCauseFragment
	}
}
fragment StackViolationCauseFragment on StackViolationCause {
	start
	end
	resource
	filename
	lines {
		... StackViolationCauseLineFragment
	}
}
fragment StackViolationCauseLineFragment on StackViolationCauseLine {
	first
	last
	content
	line
}
`

func (c *Client) GetStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetStackRun
	if err := c.Client.Post(ctx, "GetStackRun", GetStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStackRunBaseDocument = `query GetStackRunBase ($id: ID!) {
	stackRun(id: $id) {
		... StackRunBaseFragment
	}
}
fragment StackRunBaseFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	variables
	dryRun
	stateUrls {
		terraform {
			address
			lock
			unlock
		}
	}
	pluralCreds {
		url
		token
	}
	actor {
		... UserFragment
	}
	stack {
		... InfrastructureStackFragment
	}
	state {
		... StackStateFragment
	}
	steps {
		... RunStepFragment
	}
	files {
		... StackFileFragment
	}
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	errors {
		... ServiceErrorFragment
	}
	violations {
		... StackPolicyViolationFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
fragment ServiceErrorFragment on ServiceError {
	source
	message
}
fragment StackPolicyViolationFragment on StackPolicyViolation {
	id
	title
	description
	policyId
	policyModule
	policyUrl
	severity
	resolution
	causes {
		... StackViolationCauseFragment
	}
}
fragment StackViolationCauseFragment on StackViolationCause {
	start
	end
	resource
	filename
	lines {
		... StackViolationCauseLineFragment
	}
}
fragment StackViolationCauseLineFragment on StackViolationCauseLine {
	first
	last
	content
	line
}
`

func (c *Client) GetStackRunBase(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackRunBase, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetStackRunBase
	if err := c.Client.Post(ctx, "GetStackRunBase", GetStackRunBaseDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStackRunDocument = `mutation UpdateStackRun ($id: ID!, $attributes: StackRunAttributes!) {
	updateStackRun(id: $id, attributes: $attributes) {
		... StackRunBaseFragment
	}
}
fragment StackRunBaseFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	variables
	dryRun
	stateUrls {
		terraform {
			address
			lock
			unlock
		}
	}
	pluralCreds {
		url
		token
	}
	actor {
		... UserFragment
	}
	stack {
		... InfrastructureStackFragment
	}
	state {
		... StackStateFragment
	}
	steps {
		... RunStepFragment
	}
	files {
		... StackFileFragment
	}
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	errors {
		... ServiceErrorFragment
	}
	violations {
		... StackPolicyViolationFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
fragment ServiceErrorFragment on ServiceError {
	source
	message
}
fragment StackPolicyViolationFragment on StackPolicyViolation {
	id
	title
	description
	policyId
	policyModule
	policyUrl
	severity
	resolution
	causes {
		... StackViolationCauseFragment
	}
}
fragment StackViolationCauseFragment on StackViolationCause {
	start
	end
	resource
	filename
	lines {
		... StackViolationCauseLineFragment
	}
}
fragment StackViolationCauseLineFragment on StackViolationCauseLine {
	first
	last
	content
	line
}
`

func (c *Client) UpdateStackRun(ctx context.Context, id string, attributes StackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStackRun, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateStackRun
	if err := c.Client.Post(ctx, "UpdateStackRun", UpdateStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ApproveStackRunDocument = `mutation ApproveStackRun ($id: ID!) {
	approveStackRun(id: $id) {
		... StackRunIdFragment
	}
}
fragment StackRunIdFragment on StackRun {
	id
}
`

func (c *Client) ApproveStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*ApproveStackRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res ApproveStackRun
	if err := c.Client.Post(ctx, "ApproveStackRun", ApproveStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateStackDocument = `mutation CreateStack ($attributes: StackAttributes!) {
	createStack(attributes: $attributes) {
		... InfrastructureStackFragment
	}
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
`

func (c *Client) CreateStack(ctx context.Context, attributes StackAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateStack, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateStack
	if err := c.Client.Post(ctx, "CreateStack", CreateStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStackDocument = `mutation UpdateStack ($id: ID!, $attributes: StackAttributes!) {
	updateStack(id: $id, attributes: $attributes) {
		... InfrastructureStackFragment
	}
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
`

func (c *Client) UpdateStack(ctx context.Context, id string, attributes StackAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStack, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateStack
	if err := c.Client.Post(ctx, "UpdateStack", UpdateStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DetachStackDocument = `mutation DetachStack ($id: ID!) {
	detachStack(id: $id) {
		... InfrastructureStackIdFragment
	}
}
fragment InfrastructureStackIdFragment on InfrastructureStack {
	id
}
`

func (c *Client) DetachStack(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DetachStack, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DetachStack
	if err := c.Client.Post(ctx, "DetachStack", DetachStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteStackDocument = `mutation DeleteStack ($id: ID!) {
	deleteStack(id: $id) {
		... InfrastructureStackIdFragment
	}
}
fragment InfrastructureStackIdFragment on InfrastructureStack {
	id
}
`

func (c *Client) DeleteStack(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteStack, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteStack
	if err := c.Client.Post(ctx, "DeleteStack", DeleteStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInfrastructureStackDocument = `query GetInfrastructureStack ($id: ID, $name: String) {
	infrastructureStack(id: $id, name: $name) {
		... InfrastructureStackFragment
	}
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment UserFragment on User {
	name
	id
	email
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
`

func (c *Client) GetInfrastructureStack(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInfrastructureStack, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetInfrastructureStack
	if err := c.Client.Post(ctx, "GetInfrastructureStack", GetInfrastructureStackDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInfrastructureStackIDDocument = `query GetInfrastructureStackId ($id: ID, $name: String) {
	infrastructureStack(id: $id, name: $name) {
		... InfrastructureStackIdFragment
	}
}
fragment InfrastructureStackIdFragment on InfrastructureStack {
	id
}
`

func (c *Client) GetInfrastructureStackID(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInfrastructureStackID, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetInfrastructureStackID
	if err := c.Client.Post(ctx, "GetInfrastructureStackId", GetInfrastructureStackIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInfrastructureStackStatusDocument = `query GetInfrastructureStackStatus ($id: ID, $name: String) {
	infrastructureStack(id: $id, name: $name) {
		... InfrastructureStackStatusFragment
	}
}
fragment InfrastructureStackStatusFragment on InfrastructureStack {
	status
}
`

func (c *Client) GetInfrastructureStackStatus(ctx context.Context, id *string, name *string, interceptors ...clientv2.RequestInterceptor) (*GetInfrastructureStackStatus, error) {
	vars := map[string]any{
		"id":   id,
		"name": name,
	}

	var res GetInfrastructureStackStatus
	if err := c.Client.Post(ctx, "GetInfrastructureStackStatus", GetInfrastructureStackStatusDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CompletesStackRunDocument = `mutation CompletesStackRun ($id: ID!, $attributes: StackRunAttributes!) {
	completeStackRun(id: $id, attributes: $attributes) {
		... StackRunIdFragment
	}
}
fragment StackRunIdFragment on StackRun {
	id
}
`

func (c *Client) CompletesStackRun(ctx context.Context, id string, attributes StackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*CompletesStackRun, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res CompletesStackRun
	if err := c.Client.Post(ctx, "CompletesStackRun", CompletesStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddStackRunLogsDocument = `mutation AddStackRunLogs ($id: ID!, $attributes: RunLogAttributes!) {
	addRunLogs(stepId: $id, attributes: $attributes) {
		updatedAt
	}
}
`

func (c *Client) AddStackRunLogs(ctx context.Context, id string, attributes RunLogAttributes, interceptors ...clientv2.RequestInterceptor) (*AddStackRunLogs, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res AddStackRunLogs
	if err := c.Client.Post(ctx, "AddStackRunLogs", AddStackRunLogsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStackRunStepDocument = `mutation UpdateStackRunStep ($id: ID!, $attributes: RunStepAttributes!) {
	updateRunStep(id: $id, attributes: $attributes) {
		... RunStepFragment
	}
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
`

func (c *Client) UpdateStackRunStep(ctx context.Context, id string, attributes RunStepAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStackRunStep, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateStackRunStep
	if err := c.Client.Post(ctx, "UpdateStackRunStep", UpdateStackRunStepDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateCustomStackRunDocument = `mutation UpdateCustomStackRun ($id: ID!, $attributes: CustomStackRunAttributes!) {
	updateCustomStackRun(id: $id, attributes: $attributes) {
		... CustomStackRunFragment
	}
}
fragment CustomStackRunFragment on CustomStackRun {
	id
	name
	stack {
		id
	}
	documentation
	commands {
		... StackCommandFragment
	}
	configuration {
		... PrConfigurationFragment
	}
}
fragment StackCommandFragment on StackCommand {
	cmd
	args
	dir
}
fragment PrConfigurationFragment on PrConfiguration {
	type
	name
	default
	documentation
	longform
	placeholder
	optional
	condition {
		... PrConfigurationConditionFragment
	}
}
fragment PrConfigurationConditionFragment on PrConfigurationCondition {
	operation
	field
	value
}
`

func (c *Client) UpdateCustomStackRun(ctx context.Context, id string, attributes CustomStackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateCustomStackRun, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateCustomStackRun
	if err := c.Client.Post(ctx, "UpdateCustomStackRun", UpdateCustomStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateCustomStackRunDocument = `mutation CreateCustomStackRun ($attributes: CustomStackRunAttributes!) {
	createCustomStackRun(attributes: $attributes) {
		... CustomStackRunFragment
	}
}
fragment CustomStackRunFragment on CustomStackRun {
	id
	name
	stack {
		id
	}
	documentation
	commands {
		... StackCommandFragment
	}
	configuration {
		... PrConfigurationFragment
	}
}
fragment StackCommandFragment on StackCommand {
	cmd
	args
	dir
}
fragment PrConfigurationFragment on PrConfiguration {
	type
	name
	default
	documentation
	longform
	placeholder
	optional
	condition {
		... PrConfigurationConditionFragment
	}
}
fragment PrConfigurationConditionFragment on PrConfigurationCondition {
	operation
	field
	value
}
`

func (c *Client) CreateCustomStackRun(ctx context.Context, attributes CustomStackRunAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateCustomStackRun, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateCustomStackRun
	if err := c.Client.Post(ctx, "CreateCustomStackRun", CreateCustomStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteCustomStackRunDocument = `mutation DeleteCustomStackRun ($id: ID!) {
	deleteCustomStackRun(id: $id) {
		... CustomStackRunFragment
	}
}
fragment CustomStackRunFragment on CustomStackRun {
	id
	name
	stack {
		id
	}
	documentation
	commands {
		... StackCommandFragment
	}
	configuration {
		... PrConfigurationFragment
	}
}
fragment StackCommandFragment on StackCommand {
	cmd
	args
	dir
}
fragment PrConfigurationFragment on PrConfiguration {
	type
	name
	default
	documentation
	longform
	placeholder
	optional
	condition {
		... PrConfigurationConditionFragment
	}
}
fragment PrConfigurationConditionFragment on PrConfigurationCondition {
	operation
	field
	value
}
`

func (c *Client) DeleteCustomStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteCustomStackRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteCustomStackRun
	if err := c.Client.Post(ctx, "DeleteCustomStackRun", DeleteCustomStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetCustomStackRunDocument = `query GetCustomStackRun ($id: ID!) {
	customStackRun(id: $id) {
		... CustomStackRunFragment
	}
}
fragment CustomStackRunFragment on CustomStackRun {
	id
	name
	stack {
		id
	}
	documentation
	commands {
		... StackCommandFragment
	}
	configuration {
		... PrConfigurationFragment
	}
}
fragment StackCommandFragment on StackCommand {
	cmd
	args
	dir
}
fragment PrConfigurationFragment on PrConfiguration {
	type
	name
	default
	documentation
	longform
	placeholder
	optional
	condition {
		... PrConfigurationConditionFragment
	}
}
fragment PrConfigurationConditionFragment on PrConfigurationCondition {
	operation
	field
	value
}
`

func (c *Client) GetCustomStackRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetCustomStackRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetCustomStackRun
	if err := c.Client.Post(ctx, "GetCustomStackRun", GetCustomStackRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListStackRunsDocument = `query ListStackRuns ($id: ID!, $after: String, $before: String, $first: Int, $last: Int) {
	infrastructureStack(id: $id) {
		runs(after: $after, before: $before, first: $first, last: $last) {
			pageInfo {
				... PageInfoFragment
			}
			edges {
				node {
					... StackRunFragment
				}
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment StackRunFragment on StackRun {
	... StackRunBaseFragment
	approver {
		... UserFragment
	}
}
fragment StackRunBaseFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	variables
	dryRun
	stateUrls {
		terraform {
			address
			lock
			unlock
		}
	}
	pluralCreds {
		url
		token
	}
	actor {
		... UserFragment
	}
	stack {
		... InfrastructureStackFragment
	}
	state {
		... StackStateFragment
	}
	steps {
		... RunStepFragment
	}
	files {
		... StackFileFragment
	}
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	errors {
		... ServiceErrorFragment
	}
	violations {
		... StackPolicyViolationFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
fragment ServiceErrorFragment on ServiceError {
	source
	message
}
fragment StackPolicyViolationFragment on StackPolicyViolation {
	id
	title
	description
	policyId
	policyModule
	policyUrl
	severity
	resolution
	causes {
		... StackViolationCauseFragment
	}
}
fragment StackViolationCauseFragment on StackViolationCause {
	start
	end
	resource
	filename
	lines {
		... StackViolationCauseLineFragment
	}
}
fragment StackViolationCauseLineFragment on StackViolationCauseLine {
	first
	last
	content
	line
}
`

func (c *Client) ListStackRuns(ctx context.Context, id string, after *string, before *string, first *int64, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListStackRuns, error) {
	vars := map[string]any{
		"id":     id,
		"after":  after,
		"before": before,
		"first":  first,
		"last":   last,
	}

	var res ListStackRuns
	if err := c.Client.Post(ctx, "ListStackRuns", ListStackRunsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const TriggerRunDocument = `mutation TriggerRun ($id: ID!) {
	triggerRun(id: $id) {
		... StackRunBaseFragment
	}
}
fragment StackRunBaseFragment on StackRun {
	id
	type
	status
	approval
	approvedAt
	tarball
	workdir
	manageState
	variables
	dryRun
	stateUrls {
		terraform {
			address
			lock
			unlock
		}
	}
	pluralCreds {
		url
		token
	}
	actor {
		... UserFragment
	}
	stack {
		... InfrastructureStackFragment
	}
	state {
		... StackStateFragment
	}
	steps {
		... RunStepFragment
	}
	files {
		... StackFileFragment
	}
	git {
		... GitRefFragment
	}
	repository {
		... GitRepositoryFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	errors {
		... ServiceErrorFragment
	}
	violations {
		... StackPolicyViolationFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
fragment InfrastructureStackFragment on InfrastructureStack {
	id
	name
	type
	variables
	approval
	workdir
	manageState
	deletedAt
	git {
		... GitRefFragment
	}
	jobSpec {
		... JobSpecFragment
	}
	configuration {
		... StackConfigurationFragment
	}
	cluster {
		... TinyClusterFragment
	}
	project {
		... TinyProjectFragment
	}
	files {
		... StackFileFragment
	}
	environment {
		... StackEnvironmentFragment
	}
	output {
		... StackOutputFragment
	}
	state {
		... StackStateFragment
	}
	repository {
		... GitRepositoryFragment
	}
	writeBindings {
		... PolicyBindingFragment
	}
	readBindings {
		... PolicyBindingFragment
	}
	policyEngine {
		... PolicyEngineFragment
	}
}
fragment GitRefFragment on GitRef {
	folder
	ref
}
fragment JobSpecFragment on JobGateSpec {
	namespace
	raw
	containers {
		... ContainerSpecFragment
	}
	labels
	annotations
	serviceAccount
	requests {
		... ContainerResourcesFragment
	}
}
fragment ContainerSpecFragment on ContainerSpec {
	image
	args
	env {
		name
		value
	}
	envFrom {
		configMap
		secret
	}
}
fragment ContainerResourcesFragment on ContainerResources {
	requests {
		... ResourceRequestFragment
	}
	limits {
		... ResourceRequestFragment
	}
}
fragment ResourceRequestFragment on ResourceRequest {
	cpu
	memory
}
fragment StackConfigurationFragment on StackConfiguration {
	image
	version
	tag
	hooks {
		... StackHookFragment
	}
	terraform {
		parallelism
		refresh
	}
}
fragment StackHookFragment on StackHook {
	cmd
	args
	afterStage
}
fragment TinyClusterFragment on Cluster {
	id
	name
	handle
	self
	deletedAt
	project {
		... TinyProjectFragment
	}
}
fragment TinyProjectFragment on Project {
	id
	name
	default
}
fragment StackFileFragment on StackFile {
	path
	content
}
fragment StackEnvironmentFragment on StackEnvironment {
	name
	value
	secret
}
fragment StackOutputFragment on StackOutput {
	name
	value
	secret
}
fragment StackStateFragment on StackState {
	id
	plan
	state {
		... StackStateResourceFragment
	}
}
fragment StackStateResourceFragment on StackStateResource {
	identifier
	resource
	name
	configuration
	links
}
fragment GitRepositoryFragment on GitRepository {
	id
	error
	health
	authMethod
	url
	decrypt
}
fragment PolicyBindingFragment on PolicyBinding {
	id
	group {
		... GroupFragment
	}
	user {
		... UserFragment
	}
}
fragment GroupFragment on Group {
	id
	name
	description
	global
}
fragment PolicyEngineFragment on PolicyEngine {
	type
	maxSeverity
}
fragment RunStepFragment on RunStep {
	id
	status
	stage
	name
	cmd
	args
	requireApproval
	index
}
fragment ServiceErrorFragment on ServiceError {
	source
	message
}
fragment StackPolicyViolationFragment on StackPolicyViolation {
	id
	title
	description
	policyId
	policyModule
	policyUrl
	severity
	resolution
	causes {
		... StackViolationCauseFragment
	}
}
fragment StackViolationCauseFragment on StackViolationCause {
	start
	end
	resource
	filename
	lines {
		... StackViolationCauseLineFragment
	}
}
fragment StackViolationCauseLineFragment on StackViolationCauseLine {
	first
	last
	content
	line
}
`

func (c *Client) TriggerRun(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*TriggerRun, error) {
	vars := map[string]any{
		"id": id,
	}

	var res TriggerRun
	if err := c.Client.Post(ctx, "TriggerRun", TriggerRunDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetStackDefinitionDocument = `query GetStackDefinition ($id: ID!) {
	stackDefinition(id: $id) {
		... StackDefinitionFragment
	}
}
fragment StackDefinitionFragment on StackDefinition {
	id
	name
	description
	insertedAt
	updatedAt
	configuration {
		image
		tag
		version
		hooks {
			cmd
			args
			afterStage
		}
	}
	steps {
		cmd
		args
		stage
		requireApproval
	}
}
`

func (c *Client) GetStackDefinition(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetStackDefinition, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetStackDefinition
	if err := c.Client.Post(ctx, "GetStackDefinition", GetStackDefinitionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListStackDefinitionsDocument = `query ListStackDefinitions ($after: String, $first: Int, $before: String, $last: Int) {
	stackDefinitions(after: $after, first: $first, before: $before, last: $last) {
		pageInfo {
			... PageInfoFragment
		}
		edges {
			node {
				... StackDefinitionFragment
			}
		}
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	endCursor
}
fragment StackDefinitionFragment on StackDefinition {
	id
	name
	description
	insertedAt
	updatedAt
	configuration {
		image
		tag
		version
		hooks {
			cmd
			args
			afterStage
		}
	}
	steps {
		cmd
		args
		stage
		requireApproval
	}
}
`

func (c *Client) ListStackDefinitions(ctx context.Context, after *string, first *int64, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListStackDefinitions, error) {
	vars := map[string]any{
		"after":  after,
		"first":  first,
		"before": before,
		"last":   last,
	}

	var res ListStackDefinitions
	if err := c.Client.Post(ctx, "ListStackDefinitions", ListStackDefinitionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateStackDefinitionDocument = `mutation CreateStackDefinition ($attributes: StackDefinitionAttributes!) {
	createStackDefinition(attributes: $attributes) {
		... StackDefinitionFragment
	}
}
fragment StackDefinitionFragment on StackDefinition {
	id
	name
	description
	insertedAt
	updatedAt
	configuration {
		image
		tag
		version
		hooks {
			cmd
			args
			afterStage
		}
	}
	steps {
		cmd
		args
		stage
		requireApproval
	}
}
`

func (c *Client) CreateStackDefinition(ctx context.Context, attributes StackDefinitionAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateStackDefinition, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateStackDefinition
	if err := c.Client.Post(ctx, "CreateStackDefinition", CreateStackDefinitionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateStackDefinitionDocument = `mutation UpdateStackDefinition ($id: ID!, $attributes: StackDefinitionAttributes!) {
	updateStackDefinition(id: $id, attributes: $attributes) {
		... StackDefinitionFragment
	}
}
fragment StackDefinitionFragment on StackDefinition {
	id
	name
	description
	insertedAt
	updatedAt
	configuration {
		image
		tag
		version
		hooks {
			cmd
			args
			afterStage
		}
	}
	steps {
		cmd
		args
		stage
		requireApproval
	}
}
`

func (c *Client) UpdateStackDefinition(ctx context.Context, id string, attributes StackDefinitionAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateStackDefinition, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateStackDefinition
	if err := c.Client.Post(ctx, "UpdateStackDefinition", UpdateStackDefinitionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteStackDefinitionDocument = `mutation DeleteStackDefinition ($id: ID!) {
	deleteStackDefinition(id: $id) {
		... StackDefinitionFragment
	}
}
fragment StackDefinitionFragment on StackDefinition {
	id
	name
	description
	insertedAt
	updatedAt
	configuration {
		image
		tag
		version
		hooks {
			cmd
			args
			afterStage
		}
	}
	steps {
		cmd
		args
		stage
		requireApproval
	}
}
`

func (c *Client) DeleteStackDefinition(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteStackDefinition, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteStackDefinition
	if err := c.Client.Post(ctx, "DeleteStackDefinition", DeleteStackDefinitionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ListAccessTokensDocument = `query ListAccessTokens ($cursor: String, $before: String, $last: Int) {
	accessTokens(after: $cursor, first: 100, before: $before, last: $last) {
		edges {
			node {
				... AccessTokenFragment
			}
		}
	}
}
fragment AccessTokenFragment on AccessToken {
	id
	token
}
`

func (c *Client) ListAccessTokens(ctx context.Context, cursor *string, before *string, last *int64, interceptors ...clientv2.RequestInterceptor) (*ListAccessTokens, error) {
	vars := map[string]any{
		"cursor": cursor,
		"before": before,
		"last":   last,
	}

	var res ListAccessTokens
	if err := c.Client.Post(ctx, "ListAccessTokens", ListAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAccessTokenDocument = `query GetAccessToken ($id: ID!) {
	accessToken(id: $id) {
		... AccessTokenFragment
	}
}
fragment AccessTokenFragment on AccessToken {
	id
	token
}
`

func (c *Client) GetAccessToken(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*GetAccessToken, error) {
	vars := map[string]any{
		"id": id,
	}

	var res GetAccessToken
	if err := c.Client.Post(ctx, "GetAccessToken", GetAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const TokenExchangeDocument = `query TokenExchange ($token: String!) {
	tokenExchange(token: $token) {
		... UserFragment
		groups {
			id
			name
		}
		boundRoles {
			id
			name
		}
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) TokenExchange(ctx context.Context, token string, interceptors ...clientv2.RequestInterceptor) (*TokenExchange, error) {
	vars := map[string]any{
		"token": token,
	}

	var res TokenExchange
	if err := c.Client.Post(ctx, "TokenExchange", TokenExchangeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateAccessTokenDocument = `mutation CreateAccessToken {
	createAccessToken {
		... AccessTokenFragment
	}
}
fragment AccessTokenFragment on AccessToken {
	id
	token
}
`

func (c *Client) CreateAccessToken(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*CreateAccessToken, error) {
	vars := map[string]any{}

	var res CreateAccessToken
	if err := c.Client.Post(ctx, "CreateAccessToken", CreateAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAccessTokenDocument = `mutation DeleteAccessToken ($token: String!) {
	deleteAccessToken(token: $token) {
		... AccessTokenFragment
	}
}
fragment AccessTokenFragment on AccessToken {
	id
	token
}
`

func (c *Client) DeleteAccessToken(ctx context.Context, token string, interceptors ...clientv2.RequestInterceptor) (*DeleteAccessToken, error) {
	vars := map[string]any{
		"token": token,
	}

	var res DeleteAccessToken
	if err := c.Client.Post(ctx, "DeleteAccessToken", DeleteAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SaveUpgradeInsightsDocument = `mutation SaveUpgradeInsights ($insights: [UpgradeInsightAttributes], $addons: [CloudAddonAttributes]) {
	saveUpgradeInsights(insights: $insights, addons: $addons) {
		id
		name
		version
	}
}
`

func (c *Client) SaveUpgradeInsights(ctx context.Context, insights []*UpgradeInsightAttributes, addons []*CloudAddonAttributes, interceptors ...clientv2.RequestInterceptor) (*SaveUpgradeInsights, error) {
	vars := map[string]any{
		"insights": insights,
		"addons":   addons,
	}

	var res SaveUpgradeInsights
	if err := c.Client.Post(ctx, "SaveUpgradeInsights", SaveUpgradeInsightsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserDocument = `query GetUser ($email: String!) {
	user(email: $email) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) GetUser(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetUser, error) {
	vars := map[string]any{
		"email": email,
	}

	var res GetUser
	if err := c.Client.Post(ctx, "GetUser", GetUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserDocument = `mutation CreateUser ($attributes: UserAttributes!) {
	createUser(attributes: $attributes) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) CreateUser(ctx context.Context, attributes UserAttributes, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res CreateUser
	if err := c.Client.Post(ctx, "CreateUser", CreateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserDocument = `mutation UpdateUser ($id: ID, $attributes: UserAttributes!) {
	updateUser(id: $id, attributes: $attributes) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpdateUser(ctx context.Context, id *string, attributes UserAttributes, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error) {
	vars := map[string]any{
		"id":         id,
		"attributes": attributes,
	}

	var res UpdateUser
	if err := c.Client.Post(ctx, "UpdateUser", UpdateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertUserDocument = `mutation UpsertUser ($attributes: UserAttributes!) {
	upsertUser(attributes: $attributes) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) UpsertUser(ctx context.Context, attributes UserAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertUser, error) {
	vars := map[string]any{
		"attributes": attributes,
	}

	var res UpsertUser
	if err := c.Client.Post(ctx, "UpsertUser", UpsertUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteUserDocument = `mutation DeleteUser ($id: ID!) {
	deleteUser(id: $id) {
		... UserFragment
	}
}
fragment UserFragment on User {
	name
	id
	email
}
`

func (c *Client) DeleteUser(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error) {
	vars := map[string]any{
		"id": id,
	}

	var res DeleteUser
	if err := c.Client.Post(ctx, "DeleteUser", DeleteUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddGroupMemberDocument = `mutation AddGroupMember ($groupId: ID!, $userId: ID!) {
	createGroupMember(groupId: $groupId, userId: $userId) {
		... GroupMemberFragment
	}
}
fragment GroupMemberFragment on GroupMember {
	id
	user {
		id
	}
	group {
		id
	}
}
`

func (c *Client) AddGroupMember(ctx context.Context, groupID string, userID string, interceptors ...clientv2.RequestInterceptor) (*AddGroupMember, error) {
	vars := map[string]any{
		"groupId": groupID,
		"userId":  userID,
	}

	var res AddGroupMember
	if err := c.Client.Post(ctx, "AddGroupMember", AddGroupMemberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupMemberDocument = `mutation DeleteGroupMember ($userId: ID!, $groupId: ID!) {
	deleteGroupMember(userId: $userId, groupId: $groupId) {
		... GroupMemberFragment
	}
}
fragment GroupMemberFragment on GroupMember {
	id
	user {
		id
	}
	group {
		id
	}
}
`

func (c *Client) DeleteGroupMember(ctx context.Context, userID string, groupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroupMember, error) {
	vars := map[string]any{
		"userId":  userID,
		"groupId": groupID,
	}

	var res DeleteGroupMember
	if err := c.Client.Post(ctx, "DeleteGroupMember", DeleteGroupMemberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpsertVulnerabilitiesDocument = `mutation UpsertVulnerabilities ($vulnerabilities: [VulnerabilityReportAttributes]) {
	upsertVulnerabilities(vulnerabilities: $vulnerabilities)
}
`

func (c *Client) UpsertVulnerabilities(ctx context.Context, vulnerabilities []*VulnerabilityReportAttributes, interceptors ...clientv2.RequestInterceptor) (*UpsertVulnerabilities, error) {
	vars := map[string]any{
		"vulnerabilities": vulnerabilities,
	}

	var res UpsertVulnerabilities
	if err := c.Client.Post(ctx, "UpsertVulnerabilities", UpsertVulnerabilitiesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetAgentRuntimeDocument:                           "GetAgentRuntime",
	UpsertAgentRuntimeDocument:                        "UpsertAgentRuntime",
	DeleteAgentRuntimeDocument:                        "DeleteAgentRuntime",
	ListAgentRuntimesDocument:                         "ListAgentRuntimes",
	GetAgentRunDocument:                               "GetAgentRun",
	ListAgentRunsDocument:                             "ListAgentRuns",
	ListAgentRuntimePendingRunsDocument:               "ListAgentRuntimePendingRuns",
	CancelAgentRunDocument:                            "CancelAgentRun",
	CreateAgentRunDocument:                            "CreateAgentRun",
	UpdateAgentRunDocument:                            "UpdateAgentRun",
	UpdateAgentRunAnalysisDocument:                    "UpdateAgentRunAnalysis",
	UpdateAgentRunTodosDocument:                       "UpdateAgentRunTodos",
	CreateAgentPullRequestDocument:                    "CreateAgentPullRequest",
	AddClusterAuditLogDocument:                        "AddClusterAuditLog",
	ListScmWebhooksDocument:                           "ListScmWebhooks",
	GetScmWebhookDocument:                             "GetScmWebhook",
	CreateScmWebhookDocument:                          "CreateScmWebhook",
	CreateScmWebhookPointerDocument:                   "CreateScmWebhookPointer",
	DeleteScmWebhookDocument:                          "DeleteScmWebhook",
	ListObservabilityWebhooksDocument:                 "ListObservabilityWebhooks",
	GetObservabilityWebhookDocument:                   "GetObservabilityWebhook",
	UpsertObservabilityWebhookDocument:                "UpsertObservabilityWebhook",
	DeleteObservabilityWebhookDocument:                "DeleteObservabilityWebhook",
	CreateClusterBackupDocument:                       "CreateClusterBackup",
	GetClusterBackupDocument:                          "GetClusterBackup",
	UpdateClusterRestoreDocument:                      "UpdateClusterRestore",
	CreateClusterRestoreDocument:                      "CreateClusterRestore",
	GetClusterRestoreDocument:                         "GetClusterRestore",
	CreateBootstrapTokenDocument:                      "CreateBootstrapToken",
	DeleteBootstrapTokenDocument:                      "DeleteBootstrapToken",
	UpsertCatalogDocument:                             "UpsertCatalog",
	DeleteCatalogDocument:                             "DeleteCatalog",
	GetCatalogDocument:                                "GetCatalog",
	UpsertCloudConnectionDocument:                     "UpsertCloudConnection",
	DeleteCloudConnectionDocument:                     "DeleteCloudConnection",
	GetCloudConnectionDocument:                        "GetCloudConnection",
	CreateClusterDocument:                             "CreateCluster",
	UpdateClusterDocument:                             "UpdateCluster",
	DeleteClusterDocument:                             "DeleteCluster",
	DetachClusterDocument:                             "DetachCluster",
	CreateClusterProviderDocument:                     "CreateClusterProvider",
	UpdateClusterProviderDocument:                     "UpdateClusterProvider",
	DeleteClusterProviderDocument:                     "DeleteClusterProvider",
	PingClusterDocument:                               "PingCluster",
	RegisterRuntimeServicesDocument:                   "RegisterRuntimeServices",
	ListClustersDocument:                              "ListClusters",
	ListClustersWithParametersDocument:                "ListClustersWithParameters",
	GetClusterDocument:                                "GetCluster",
	GetTinyClusterDocument:                            "GetTinyCluster",
	GetAgentURLDocument:                               "GetAgentUrl",
	GetClusterWithTokenDocument:                       "GetClusterWithToken",
	GetClusterByHandleDocument:                        "GetClusterByHandle",
	GetClusterProviderDocument:                        "GetClusterProvider",
	GetClusterProviderByCloudDocument:                 "GetClusterProviderByCloud",
	ListClusterServicesDocument:                       "ListClusterServices",
	ListServiceDeploymentsDocument:                    "ListServiceDeployments",
	MyClusterDocument:                                 "MyCluster",
	UpsertVirtualClusterDocument:                      "UpsertVirtualCluster",
	GetGlobalServiceDeploymentDocument:                "GetGlobalServiceDeployment",
	CreateGlobalServiceDeploymentDocument:             "CreateGlobalServiceDeployment",
	CreateGlobalServiceDeploymentFromTemplateDocument: "CreateGlobalServiceDeploymentFromTemplate",
	UpdateGlobalServiceDeploymentDocument:             "UpdateGlobalServiceDeployment",
	DeleteGlobalServiceDeploymentDocument:             "DeleteGlobalServiceDeployment",
	CreateServiceDeploymentDocument:                   "CreateServiceDeployment",
	CreateServiceDeploymentWithHandleDocument:         "CreateServiceDeploymentWithHandle",
	DeleteServiceDeploymentDocument:                   "DeleteServiceDeployment",
	DetachServiceDeploymentDocument:                   "DetachServiceDeployment",
	UpdateServiceDeploymentDocument:                   "UpdateServiceDeployment",
	UpdateServiceDeploymentWithHandleDocument:         "UpdateServiceDeploymentWithHandle",
	CloneServiceDeploymentDocument:                    "CloneServiceDeployment",
	CloneServiceDeploymentWithHandleDocument:          "CloneServiceDeploymentWithHandle",
	RollbackServiceDocument:                           "RollbackService",
	UpdateServiceComponentsDocument:                   "updateServiceComponents",
	AddServiceErrorDocument:                           "AddServiceError",
	UpdateDeploymentSettingsDocument:                  "UpdateDeploymentSettings",
	GetDeploymentSettingsDocument:                     "GetDeploymentSettings",
	GetServiceDeploymentDocument:                      "GetServiceDeployment",
	GetServiceDeploymentComponentsDocument:            "GetServiceDeploymentComponents",
	GetServiceDeploymentForAgentDocument:              "GetServiceDeploymentForAgent",
	GetServiceDeploymentByHandleDocument:              "GetServiceDeploymentByHandle",
	ListServiceDeploymentDocument:                     "ListServiceDeployment",
	PagedClusterServicesDocument:                      "PagedClusterServices",
	PagedClusterServicesForAgentDocument:              "PagedClusterServicesForAgent",
	PagedClusterServiceIdsDocument:                    "PagedClusterServiceIds",
	ListServiceDeploymentByHandleDocument:             "ListServiceDeploymentByHandle",
	GetServiceContextDocument:                         "GetServiceContext",
	SaveServiceContextDocument:                        "SaveServiceContext",
	DeleteServiceContextDocument:                      "DeleteServiceContext",
	CreateGlobalServiceDocument:                       "CreateGlobalService",
	UpdateGlobalServiceDocument:                       "UpdateGlobalService",
	DeleteGlobalServiceDocument:                       "DeleteGlobalService",
	KickServiceDocument:                               "KickService",
	KickServiceByHandleDocument:                       "KickServiceByHandle",
	GetClusterRegistrationDocument:                    "GetClusterRegistration",
	GetClusterRegistrationsDocument:                   "GetClusterRegistrations",
	CreateClusterRegistrationDocument:                 "CreateClusterRegistration",
	UpdateClusterRegistrationDocument:                 "UpdateClusterRegistration",
	DeleteClusterRegistrationDocument:                 "DeleteClusterRegistration",
	CreateClusterIsoImageDocument:                     "CreateClusterIsoImage",
	UpdateClusterIsoImageDocument:                     "UpdateClusterIsoImage",
	DeleteClusterIsoImageDocument:                     "DeleteClusterIsoImage",
	GetClusterIsoImageDocument:                        "GetClusterIsoImage",
	GetFederatedCredentialDocument:                    "GetFederatedCredential",
	CreateFederatedCredentialDocument:                 "CreateFederatedCredential",
	DeleteFederatedCredentialDocument:                 "DeleteFederatedCredential",
	UpdateFederatedCredentialDocument:                 "UpdateFederatedCredential",
	GetFlowDocument:                                   "GetFlow",
	UpsertFlowDocument:                                "UpsertFlow",
	DeleteFlowDocument:                                "DeleteFlow",
	GetClusterGatesDocument:                           "GetClusterGates",
	PagedClusterGatesDocument:                         "PagedClusterGates",
	PagedClusterGateIDsDocument:                       "PagedClusterGateIDs",
	UpdateGateDocument:                                "updateGate",
	GetClusterGateDocument:                            "GetClusterGate",
	CreateGitRepositoryDocument:                       "CreateGitRepository",
	UpdateGitRepositoryDocument:                       "UpdateGitRepository",
	DeleteGitRepositoryDocument:                       "DeleteGitRepository",
	ListGitRepositoriesDocument:                       "ListGitRepositories",
	GetGitRepositoryDocument:                          "GetGitRepository",
	GetScmConnectionDocument:                          "GetScmConnection",
	GetScmConnectionByNameDocument:                    "GetScmConnectionByName",
	ListScmConnectionsDocument:                        "ListScmConnections",
	CreateScmConnectionDocument:                       "CreateScmConnection",
	UpdateScmConnectionDocument:                       "UpdateScmConnection",
	DeleteScmConnectionDocument:                       "DeleteScmConnection",
	GetPrAutomationDocument:                           "GetPrAutomation",
	GetPrAutomationByNameDocument:                     "GetPrAutomationByName",
	ListPrAutomationsDocument:                         "ListPrAutomations",
	CreatePrAutomationDocument:                        "CreatePrAutomation",
	UpdatePrAutomationDocument:                        "UpdatePrAutomation",
	DeletePrAutomationDocument:                        "DeletePrAutomation",
	CreatePullRequestDocument:                         "CreatePullRequest",
	GetPrGovernanceDocument:                           "GetPrGovernance",
	DeletePrGovernanceDocument:                        "DeletePrGovernance",
	UpsertPrGovernanceDocument:                        "UpsertPrGovernance",
	GetGroupDocument:                                  "GetGroup",
	CreateGroupDocument:                               "CreateGroup",
	UpdateGroupDocument:                               "UpdateGroup",
	DeleteGroupDocument:                               "DeleteGroup",
	ListHelmRepositoriesDocument:                      "ListHelmRepositories",
	GetHelmRepositoryDocument:                         "GetHelmRepository",
	UpsertHelmRepositoryDocument:                      "UpsertHelmRepository",
	IngestClusterCostDocument:                         "IngestClusterCost",
	GetMCPServersDocument:                             "GetMCPServers",
	GetMCPServerDocument:                              "GetMCPServer",
	UpsertMCPServerDocument:                           "UpsertMCPServer",
	DeleteMCPServerDocument:                           "DeleteMCPServer",
	ListNamespacesDocument:                            "ListNamespaces",
	ListClusterNamespacesDocument:                     "ListClusterNamespaces",
	GetNamespaceDocument:                              "GetNamespace",
	GetNamespaceByNameDocument:                        "GetNamespaceByName",
	CreateNamespaceDocument:                           "CreateNamespace",
	UpdateNamespaceDocument:                           "UpdateNamespace",
	DeleteNamespaceDocument:                           "DeleteNamespace",
	UpsertNotificationSinkDocument:                    "UpsertNotificationSink",
	DeleteNotificationSinkDocument:                    "DeleteNotificationSink",
	GetNotificationSinkDocument:                       "GetNotificationSink",
	GetNotificationSinkByNameDocument:                 "GetNotificationSinkByName",
	ListNotificationSinksDocument:                     "ListNotificationSinks",
	GetNotificationRouterDocument:                     "GetNotificationRouter",
	GetNotificationRouterByNameDocument:               "GetNotificationRouterByName",
	DeleteNotificationRouterDocument:                  "DeleteNotificationRouter",
	UpsertNotificationRouterDocument:                  "UpsertNotificationRouter",
	CreateOIDCProviderDocument:                        "CreateOIDCProvider",
	UpdateOIDCProviderDocument:                        "UpdateOIDCProvider",
	DeleteOIDCProviderDocument:                        "DeleteOIDCProvider",
	ListObservabilityProvidersDocument:                "ListObservabilityProviders",
	GetObservabilityProviderDocument:                  "GetObservabilityProvider",
	UpsertObservabilityProviderDocument:               "UpsertObservabilityProvider",
	DeleteObservabilityProviderDocument:               "DeleteObservabilityProvider",
	UpsertObserverDocument:                            "UpsertObserver",
	DeleteObserverDocument:                            "DeleteObserver",
	GetObserverDocument:                               "GetObserver",
	UpsertPolicyConstraintsDocument:                   "UpsertPolicyConstraints",
	ListPolicyConstraintsDocument:                     "ListPolicyConstraints",
	ListViolationStatisticsDocument:                   "ListViolationStatistics",
	GetPersonaDocument:                                "GetPersona",
	CreatePersonaDocument:                             "CreatePersona",
	UpdatePersonaDocument:                             "UpdatePersona",
	DeletePersonaDocument:                             "DeletePersona",
	SavePipelineDocument:                              "SavePipeline",
	DeletePipelineDocument:                            "DeletePipeline",
	GetPipelineDocument:                               "GetPipeline",
	GetPipelinesDocument:                              "GetPipelines",
	CreatePipelineContextDocument:                     "CreatePipelineContext",
	GetPipelineContextDocument:                        "GetPipelineContext",
	ListComplianceReportGeneratorsDocument:            "ListComplianceReportGenerators",
	GetComplianceReportGeneratorDocument:              "GetComplianceReportGenerator",
	UpsertComplianceReportGeneratorDocument:           "UpsertComplianceReportGenerator",
	DeleteComplianceReportGeneratorDocument:           "DeleteComplianceReportGenerator",
	GetPreviewEnvironmentTemplateDocument:             "GetPreviewEnvironmentTemplate",
	UpsertPreviewEnvironmentTemplateDocument:          "UpsertPreviewEnvironmentTemplate",
	DeletePreviewEnvironmentTemplateDocument:          "DeletePreviewEnvironmentTemplate",
	ListProjectsDocument:                              "ListProjects",
	GetProjectDocument:                                "GetProject",
	CreateProjectDocument:                             "CreateProject",
	UpdateProjectDocument:                             "UpdateProject",
	DeleteProjectDocument:                             "DeleteProject",
	CreateProviderCredentialDocument:                  "CreateProviderCredential",
	DeleteProviderCredentialDocument:                  "DeleteProviderCredential",
	ListProvidersDocument:                             "ListProviders",
	UpdateRbacDocument:                                "UpdateRbac",
	CreateSentinelDocument:                            "CreateSentinel",
	UpdateSentinelDocument:                            "UpdateSentinel",
	DeleteSentinelDocument:                            "DeleteSentinel",
	GetSentinelDocument:                               "GetSentinel",
	ServiceAccountsDocument:                           "ServiceAccounts",
	CreateServiceAccountDocument:                      "CreateServiceAccount",
	UpdateServiceAccountDocument:                      "UpdateServiceAccount",
	CreateServiceAccountTokenDocument:                 "CreateServiceAccountToken",
	ShareSecretDocument:                               "ShareSecret",
	ListClusterStacksDocument:                         "ListClusterStacks",
	ListClusterStackIdsDocument:                       "ListClusterStackIds",
	ListClusterMinimalStacksDocument:                  "ListClusterMinimalStacks",
	ListInfrastructureStacksDocument:                  "ListInfrastructureStacks",
	GetStackRunMinimalDocument:                        "GetStackRunMinimal",
	GetStackRunDocument:                               "GetStackRun",
	GetStackRunBaseDocument:                           "GetStackRunBase",
	UpdateStackRunDocument:                            "UpdateStackRun",
	ApproveStackRunDocument:                           "ApproveStackRun",
	CreateStackDocument:                               "CreateStack",
	UpdateStackDocument:                               "UpdateStack",
	DetachStackDocument:                               "DetachStack",
	DeleteStackDocument:                               "DeleteStack",
	GetInfrastructureStackDocument:                    "GetInfrastructureStack",
	GetInfrastructureStackIDDocument:                  "GetInfrastructureStackId",
	GetInfrastructureStackStatusDocument:              "GetInfrastructureStackStatus",
	CompletesStackRunDocument:                         "CompletesStackRun",
	AddStackRunLogsDocument:                           "AddStackRunLogs",
	UpdateStackRunStepDocument:                        "UpdateStackRunStep",
	UpdateCustomStackRunDocument:                      "UpdateCustomStackRun",
	CreateCustomStackRunDocument:                      "CreateCustomStackRun",
	DeleteCustomStackRunDocument:                      "DeleteCustomStackRun",
	GetCustomStackRunDocument:                         "GetCustomStackRun",
	ListStackRunsDocument:                             "ListStackRuns",
	TriggerRunDocument:                                "TriggerRun",
	GetStackDefinitionDocument:                        "GetStackDefinition",
	ListStackDefinitionsDocument:                      "ListStackDefinitions",
	CreateStackDefinitionDocument:                     "CreateStackDefinition",
	UpdateStackDefinitionDocument:                     "UpdateStackDefinition",
	DeleteStackDefinitionDocument:                     "DeleteStackDefinition",
	ListAccessTokensDocument:                          "ListAccessTokens",
	GetAccessTokenDocument:                            "GetAccessToken",
	TokenExchangeDocument:                             "TokenExchange",
	CreateAccessTokenDocument:                         "CreateAccessToken",
	DeleteAccessTokenDocument:                         "DeleteAccessToken",
	SaveUpgradeInsightsDocument:                       "SaveUpgradeInsights",
	GetUserDocument:                                   "GetUser",
	CreateUserDocument:                                "CreateUser",
	UpdateUserDocument:                                "UpdateUser",
	UpsertUserDocument:                                "UpsertUser",
	DeleteUserDocument:                                "DeleteUser",
	AddGroupMemberDocument:                            "AddGroupMember",
	DeleteGroupMemberDocument:                         "DeleteGroupMember",
	UpsertVulnerabilitiesDocument:                     "UpsertVulnerabilities",
}
