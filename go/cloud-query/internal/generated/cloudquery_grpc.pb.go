// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: cloudquery.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudQuery_Query_FullMethodName   = "/proto.CloudQuery/Query"
	CloudQuery_Schema_FullMethodName  = "/proto.CloudQuery/Schema"
	CloudQuery_Extract_FullMethodName = "/proto.CloudQuery/Extract"
)

// CloudQueryClient is the client API for CloudQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudQueryClient interface {
	Query(ctx context.Context, in *QueryInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryOutput], error)
	Schema(ctx context.Context, in *SchemaInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SchemaOutput], error)
	Extract(ctx context.Context, in *ExtractInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExtractOutput], error)
}

type cloudQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudQueryClient(cc grpc.ClientConnInterface) CloudQueryClient {
	return &cloudQueryClient{cc}
}

func (c *cloudQueryClient) Query(ctx context.Context, in *QueryInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueryOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudQuery_ServiceDesc.Streams[0], CloudQuery_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueryInput, QueryOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudQuery_QueryClient = grpc.ServerStreamingClient[QueryOutput]

func (c *cloudQueryClient) Schema(ctx context.Context, in *SchemaInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SchemaOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudQuery_ServiceDesc.Streams[1], CloudQuery_Schema_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SchemaInput, SchemaOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudQuery_SchemaClient = grpc.ServerStreamingClient[SchemaOutput]

func (c *cloudQueryClient) Extract(ctx context.Context, in *ExtractInput, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExtractOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CloudQuery_ServiceDesc.Streams[2], CloudQuery_Extract_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExtractInput, ExtractOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudQuery_ExtractClient = grpc.ServerStreamingClient[ExtractOutput]

// CloudQueryServer is the server API for CloudQuery service.
// All implementations must embed UnimplementedCloudQueryServer
// for forward compatibility.
type CloudQueryServer interface {
	Query(*QueryInput, grpc.ServerStreamingServer[QueryOutput]) error
	Schema(*SchemaInput, grpc.ServerStreamingServer[SchemaOutput]) error
	Extract(*ExtractInput, grpc.ServerStreamingServer[ExtractOutput]) error
	mustEmbedUnimplementedCloudQueryServer()
}

// UnimplementedCloudQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudQueryServer struct{}

func (UnimplementedCloudQueryServer) Query(*QueryInput, grpc.ServerStreamingServer[QueryOutput]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedCloudQueryServer) Schema(*SchemaInput, grpc.ServerStreamingServer[SchemaOutput]) error {
	return status.Errorf(codes.Unimplemented, "method Schema not implemented")
}
func (UnimplementedCloudQueryServer) Extract(*ExtractInput, grpc.ServerStreamingServer[ExtractOutput]) error {
	return status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedCloudQueryServer) mustEmbedUnimplementedCloudQueryServer() {}
func (UnimplementedCloudQueryServer) testEmbeddedByValue()                    {}

// UnsafeCloudQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudQueryServer will
// result in compilation errors.
type UnsafeCloudQueryServer interface {
	mustEmbedUnimplementedCloudQueryServer()
}

func RegisterCloudQueryServer(s grpc.ServiceRegistrar, srv CloudQueryServer) {
	// If the following call pancis, it indicates UnimplementedCloudQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudQuery_ServiceDesc, srv)
}

func _CloudQuery_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudQueryServer).Query(m, &grpc.GenericServerStream[QueryInput, QueryOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudQuery_QueryServer = grpc.ServerStreamingServer[QueryOutput]

func _CloudQuery_Schema_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SchemaInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudQueryServer).Schema(m, &grpc.GenericServerStream[SchemaInput, SchemaOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudQuery_SchemaServer = grpc.ServerStreamingServer[SchemaOutput]

func _CloudQuery_Extract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExtractInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudQueryServer).Extract(m, &grpc.GenericServerStream[ExtractInput, ExtractOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CloudQuery_ExtractServer = grpc.ServerStreamingServer[ExtractOutput]

// CloudQuery_ServiceDesc is the grpc.ServiceDesc for CloudQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CloudQuery",
	HandlerType: (*CloudQueryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _CloudQuery_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Schema",
			Handler:       _CloudQuery_Schema_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Extract",
			Handler:       _CloudQuery_Extract_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudquery.proto",
}
