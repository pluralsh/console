// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/pluralsh/console/go/datastore/api/v1alpha1"
)

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// DatabaseExists provides a mock function with given fields: database
func (_m *ClientMock) DatabaseExists(database string) (bool, error) {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for DatabaseExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(database)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(database)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(database)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientMock_DatabaseExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatabaseExists'
type ClientMock_DatabaseExists_Call struct {
	*mock.Call
}

// DatabaseExists is a helper method to define mock.On call
//   - database string
func (_e *ClientMock_Expecter) DatabaseExists(database interface{}) *ClientMock_DatabaseExists_Call {
	return &ClientMock_DatabaseExists_Call{Call: _e.mock.On("DatabaseExists", database)}
}

func (_c *ClientMock_DatabaseExists_Call) Run(run func(database string)) *ClientMock_DatabaseExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_DatabaseExists_Call) Return(_a0 bool, _a1 error) *ClientMock_DatabaseExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientMock_DatabaseExists_Call) RunAndReturn(run func(string) (bool, error)) *ClientMock_DatabaseExists_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDatabase provides a mock function with given fields: dbName
func (_m *ClientMock) DeleteDatabase(dbName string) error {
	ret := _m.Called(dbName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dbName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DeleteDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDatabase'
type ClientMock_DeleteDatabase_Call struct {
	*mock.Call
}

// DeleteDatabase is a helper method to define mock.On call
//   - dbName string
func (_e *ClientMock_Expecter) DeleteDatabase(dbName interface{}) *ClientMock_DeleteDatabase_Call {
	return &ClientMock_DeleteDatabase_Call{Call: _e.mock.On("DeleteDatabase", dbName)}
}

func (_c *ClientMock_DeleteDatabase_Call) Run(run func(dbName string)) *ClientMock_DeleteDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_DeleteDatabase_Call) Return(_a0 error) *ClientMock_DeleteDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DeleteDatabase_Call) RunAndReturn(run func(string) error) *ClientMock_DeleteDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: username
func (_m *ClientMock) DeleteUser(username string) error {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type ClientMock_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - username string
func (_e *ClientMock_Expecter) DeleteUser(username interface{}) *ClientMock_DeleteUser_Call {
	return &ClientMock_DeleteUser_Call{Call: _e.mock.On("DeleteUser", username)}
}

func (_c *ClientMock_DeleteUser_Call) Run(run func(username string)) *ClientMock_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_DeleteUser_Call) Return(_a0 error) *ClientMock_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_DeleteUser_Call) RunAndReturn(run func(string) error) *ClientMock_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx, _a1, credentials
func (_m *ClientMock) Init(ctx context.Context, _a1 client.Client, credentials *v1alpha1.PostgresCredentials) error {
	ret := _m.Called(ctx, _a1, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Client, *v1alpha1.PostgresCredentials) error); ok {
		r0 = rf(ctx, _a1, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type ClientMock_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 client.Client
//   - credentials *v1alpha1.PostgresCredentials
func (_e *ClientMock_Expecter) Init(ctx interface{}, _a1 interface{}, credentials interface{}) *ClientMock_Init_Call {
	return &ClientMock_Init_Call{Call: _e.mock.On("Init", ctx, _a1, credentials)}
}

func (_c *ClientMock_Init_Call) Run(run func(ctx context.Context, _a1 client.Client, credentials *v1alpha1.PostgresCredentials)) *ClientMock_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.Client), args[2].(*v1alpha1.PostgresCredentials))
	})
	return _c
}

func (_c *ClientMock_Init_Call) Return(_a0 error) *ClientMock_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_Init_Call) RunAndReturn(run func(context.Context, client.Client, *v1alpha1.PostgresCredentials) error) *ClientMock_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with no fields
func (_m *ClientMock) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type ClientMock_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *ClientMock_Expecter) Ping() *ClientMock_Ping_Call {
	return &ClientMock_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *ClientMock_Ping_Call) Run(run func()) *ClientMock_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ClientMock_Ping_Call) Return(_a0 error) *ClientMock_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_Ping_Call) RunAndReturn(run func() error) *ClientMock_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SetDatabaseOwner provides a mock function with given fields: database, username
func (_m *ClientMock) SetDatabaseOwner(database string, username string) error {
	ret := _m.Called(database, username)

	if len(ret) == 0 {
		panic("no return value specified for SetDatabaseOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(database, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_SetDatabaseOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDatabaseOwner'
type ClientMock_SetDatabaseOwner_Call struct {
	*mock.Call
}

// SetDatabaseOwner is a helper method to define mock.On call
//   - database string
//   - username string
func (_e *ClientMock_Expecter) SetDatabaseOwner(database interface{}, username interface{}) *ClientMock_SetDatabaseOwner_Call {
	return &ClientMock_SetDatabaseOwner_Call{Call: _e.mock.On("SetDatabaseOwner", database, username)}
}

func (_c *ClientMock_SetDatabaseOwner_Call) Run(run func(database string, username string)) *ClientMock_SetDatabaseOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_SetDatabaseOwner_Call) Return(_a0 error) *ClientMock_SetDatabaseOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_SetDatabaseOwner_Call) RunAndReturn(run func(string, string) error) *ClientMock_SetDatabaseOwner_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertDatabase provides a mock function with given fields: dbName
func (_m *ClientMock) UpsertDatabase(dbName string) error {
	ret := _m.Called(dbName)

	if len(ret) == 0 {
		panic("no return value specified for UpsertDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dbName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpsertDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertDatabase'
type ClientMock_UpsertDatabase_Call struct {
	*mock.Call
}

// UpsertDatabase is a helper method to define mock.On call
//   - dbName string
func (_e *ClientMock_Expecter) UpsertDatabase(dbName interface{}) *ClientMock_UpsertDatabase_Call {
	return &ClientMock_UpsertDatabase_Call{Call: _e.mock.On("UpsertDatabase", dbName)}
}

func (_c *ClientMock_UpsertDatabase_Call) Run(run func(dbName string)) *ClientMock_UpsertDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClientMock_UpsertDatabase_Call) Return(_a0 error) *ClientMock_UpsertDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpsertDatabase_Call) RunAndReturn(run func(string) error) *ClientMock_UpsertDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertUser provides a mock function with given fields: username, password
func (_m *ClientMock) UpsertUser(username string, password string) error {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientMock_UpsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUser'
type ClientMock_UpsertUser_Call struct {
	*mock.Call
}

// UpsertUser is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *ClientMock_Expecter) UpsertUser(username interface{}, password interface{}) *ClientMock_UpsertUser_Call {
	return &ClientMock_UpsertUser_Call{Call: _e.mock.On("UpsertUser", username, password)}
}

func (_c *ClientMock_UpsertUser_Call) Run(run func(username string, password string)) *ClientMock_UpsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ClientMock_UpsertUser_Call) Return(_a0 error) *ClientMock_UpsertUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClientMock_UpsertUser_Call) RunAndReturn(run func(string, string) error) *ClientMock_UpsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
