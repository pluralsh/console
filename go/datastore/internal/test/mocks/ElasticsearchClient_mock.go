// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	esapi "github.com/elastic/go-elasticsearch/v9/esapi"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/pluralsh/console/go/datastore/api/v1alpha1"
)

// ElasticsearchClientMock is an autogenerated mock type for the ElasticsearchClient type
type ElasticsearchClientMock struct {
	mock.Mock
}

type ElasticsearchClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ElasticsearchClientMock) EXPECT() *ElasticsearchClientMock_Expecter {
	return &ElasticsearchClientMock_Expecter{mock: &_m.Mock}
}

// ClusterHealth provides a mock function with no fields
func (_m *ElasticsearchClientMock) ClusterHealth() (*esapi.Response, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterHealth")
	}

	var r0 *esapi.Response
	var r1 error
	if rf, ok := ret.Get(0).(func() (*esapi.Response, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *esapi.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElasticsearchClientMock_ClusterHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterHealth'
type ElasticsearchClientMock_ClusterHealth_Call struct {
	*mock.Call
}

// ClusterHealth is a helper method to define mock.On call
func (_e *ElasticsearchClientMock_Expecter) ClusterHealth() *ElasticsearchClientMock_ClusterHealth_Call {
	return &ElasticsearchClientMock_ClusterHealth_Call{Call: _e.mock.On("ClusterHealth")}
}

func (_c *ElasticsearchClientMock_ClusterHealth_Call) Run(run func()) *ElasticsearchClientMock_ClusterHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ElasticsearchClientMock_ClusterHealth_Call) Return(_a0 *esapi.Response, _a1 error) *ElasticsearchClientMock_ClusterHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ElasticsearchClientMock_ClusterHealth_Call) RunAndReturn(run func() (*esapi.Response, error)) *ElasticsearchClientMock_ClusterHealth_Call {
	_c.Call.Return(run)
	return _c
}

// UseCredentials provides a mock function with given fields: ctx, _a1, credentials
func (_m *ElasticsearchClientMock) Init(ctx context.Context, _a1 client.Client, credentials *v1alpha1.ElasticsearchCredentials) error {
	ret := _m.Called(ctx, _a1, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.Client, *v1alpha1.ElasticsearchCredentials) error); ok {
		r0 = rf(ctx, _a1, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElasticsearchClientMock_UseCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type ElasticsearchClientMock_UseCredentials_Call struct {
	*mock.Call
}

// UseCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 client.Client
//   - credentials *v1alpha1.ElasticsearchCredentials
func (_e *ElasticsearchClientMock_Expecter) UseCredentials(ctx interface{}, _a1 interface{}, credentials interface{}) *ElasticsearchClientMock_UseCredentials_Call {
	return &ElasticsearchClientMock_UseCredentials_Call{Call: _e.mock.On("Init", ctx, _a1, credentials)}
}

func (_c *ElasticsearchClientMock_UseCredentials_Call) Run(run func(ctx context.Context, _a1 client.Client, credentials *v1alpha1.ElasticsearchCredentials)) *ElasticsearchClientMock_UseCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.Client), args[2].(*v1alpha1.ElasticsearchCredentials))
	})
	return _c
}

func (_c *ElasticsearchClientMock_UseCredentials_Call) Return(_a0 error) *ElasticsearchClientMock_UseCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElasticsearchClientMock_UseCredentials_Call) RunAndReturn(run func(context.Context, client.Client, *v1alpha1.ElasticsearchCredentials) error) *ElasticsearchClientMock_UseCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// NewElasticsearchClientMock creates a new instance of ElasticsearchClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewElasticsearchClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ElasticsearchClientMock {
	mock := &ElasticsearchClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
