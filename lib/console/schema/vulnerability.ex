defmodule Console.Schema.Vulnerability do
  use Piazza.Ecto.Schema
  alias Console.Schema.VulnerabilityReport
  alias Console.Utils.Vuln

  defenum Severity, unknown: 0, low: 1, medium: 2, high: 3, critical: 4, none: 5
  defenum AttackVector, network: 0, adjacent: 1, local: 2, physical: 3
  defenum UserInteraction, none: 0, required: 1

  defmodule CVSS do
    use Piazza.Ecto.Schema

    embedded_schema do
      field :v2_vector,  :string
      field :v3_vector,  :string
      field :v40_vector, :string
      field :v2_score,   :float
      field :v3_score,   :float
      field :v40_score,  :float
    end

    @valid ~w(v2_vector v3_vector v40_vector v2_score v3_score v40_score)a

    def changeset(model, attrs) do
      model
      |> cast(attrs, @valid)
    end
  end

  schema "vulnerabilities" do
    field :resource,          :string
    field :fixed_version,     :string
    field :installed_version, :string
    field :severity,          Severity
    field :score,             :float

    field :title,            :string
    field :description,      :binary
    field :cvss_source,      :string
    field :primary_link,     :string
    field :links,            {:array, :string}
    field :target,           :string
    field :class,            :string
    field :package_type,     :string
    field :pkg_path,         :string

    field :vuln_id,          :string

    field :published_date,     :utc_datetime_usec
    field :last_modified_date, :utc_datetime_usec

    embeds_one :cvss, CVSSBundle, on_replace: :update do
      field :attack_vector,       AttackVector
      field :attack_complexity,   Severity
      field :privileges_required, Severity
      field :user_interaction,    UserInteraction
      field :confidentiality,     Severity
      field :integrity,           Severity
      field :availability,        Severity

      embeds_one :redhat, CVSS, on_replace: :update
      embeds_one :nvidia, CVSS, on_replace: :update
    end

    belongs_to :report, VulnerabilityReport

    timestamps()
  end

  @valid ~w(
    resource
    fixed_version
    installed_version
    severity
    score
    title
    description
    cvss_source
    primary_link
    links
    target
    class
    package_type
    pkg_path
    published_date
    last_modified_date
    vuln_id
  )a

  def changeset(model, attrs \\ %{}) do
    model
    |> cast(attrs, @valid)
    |> foreign_key_constraint(:report_id)
    |> cast_embed(:cvss, with: &cvss_changeset/2)
  end

  defp cvss_changeset(model, attrs) do
    model
    |> cast(attrs, [])
    |> cast_embed(:nvidia)
    |> cast_embed(:redhat)
    |> parse_cvss_vector()
  end

  @vector ~w(
    attack_vector
    attack_complexity
    privileges_required
    user_interaction
    confidentiality
    integrity
    availability
  )a

  defp parse_cvss_vector(cs) do
    case {get_field(cs, :redhat), get_field(cs, :nvidia)} do
      {%CVSS{v3_vector: vec}, _} when is_binary(vec) ->
        cast(cs, Vuln.parse_v3_vector(vec), @vector)
      {_, %CVSS{v3_vector: vec}} when is_binary(vec) ->
        cast(cs, Vuln.parse_v3_vector(vec), @vector)
      _ -> cs
    end
  end
end
