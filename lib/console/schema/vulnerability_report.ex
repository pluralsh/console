defmodule Console.Schema.VulnerabilityReport do
  use Piazza.Ecto.Schema

  alias Console.Schema.{Cluster, Vulnerability, ServiceVuln, NamespaceVuln}

  defenum Grade, a: 0, b: 1, c: 2, d: 3, f: 4

  schema "vulnerability_reports" do
    field :artifact_url, :string
    field :grade,        Grade

    embeds_one :os, OS, on_replace: :update do
      field :eosl,   :boolean, default: false
      field :family, :string
      field :name,   :string
    end

    embeds_one :summary, Summary, on_replace: :update do
      field :critical_count, :integer
      field :high_count,     :integer
      field :medium_count,   :integer
      field :low_count,      :integer
      field :unknown_count,  :integer
      field :none_count,     :integer
    end

    embeds_one :artifact, Artifact, on_replace: :update do
      field :registry,   :string
      field :repository, :string
      field :digest,     :string
      field :tag,        :string
      field :mime,       :string
    end

    belongs_to :cluster, Cluster

    has_many :vulnerabilities, Vulnerability, on_replace: :delete, foreign_key: :report_id
    has_many :services,        ServiceVuln,   on_replace: :delete, foreign_key: :report_id
    has_many :namespaces,      NamespaceVuln, on_replace: :delete, foreign_key: :report_id

    timestamps()
  end

  def for_user(query \\ __MODULE__, user) do
    clusters = Cluster.for_user(user)
    from(p in query,
      join: c in subquery(clusters),
        as: :clusters,
        on: c.id == p.cluster_id
    )
  end

  def search(query \\ __MODULE__, q) do
    from(vr in query, where: ilike(vr.artifact_url, ^"%#{q}%"))
  end

  def for_clusters(query \\ __MODULE__, ids) do
    from(vr in query, where: vr.cluster_id in ^ids)
  end

  def for_cluster(query \\ __MODULE__, id) do
    from(vr in query, where: vr.cluster_id == ^id)
  end

  def ordered(query \\ __MODULE__, order \\ [asc: :artifact_url]) do
    from(vr in query, order_by: ^order)
  end

  def distinct(query), do: from(p in query, distinct: true)

  @valid ~w(artifact_url grade cluster_id)a

  def changeset(model, attrs \\ %{}) do
    model
    |> cast(attrs, @valid)
    |> cast_assoc(:vulnerabilities)
    |> cast_assoc(:services)
    |> cast_assoc(:namespaces)
    |> foreign_key_constraint(:cluster_id)
    |> cast_embed(:os, with: &os_changeset/2)
    |> cast_embed(:summary, with: &summary_changeset/2)
    |> cast_embed(:artifact, with: &artifact_changeset/2)
    |> add_grade()
  end

  defp os_changeset(model, attrs) do
    model
    |> cast(attrs, ~w(eosl family name)a)
  end

  defp summary_changeset(model, attrs) do
    model
    |> cast(attrs, ~w(none_count low_count medium_count high_count critical_count)a)
  end

  defp artifact_changeset(model, attrs) do
    model
    |> cast(attrs, ~w(registry repository digest tag mime)a)
    |> validate_required([:repository])
  end

  defp add_grade(cs) do
    case get_field(cs, :summary) do
      %__MODULE__.Summary{critical_count: c} when c > 0 -> put_change(cs, :grade, :f)
      %__MODULE__.Summary{high_count: c} when c > 0 -> put_change(cs, :grade, :d)
      %__MODULE__.Summary{medium_count: c} when c > 0 -> put_change(cs, :grade, :c)
      %__MODULE__.Summary{low_count: c} when c > 0 -> put_change(cs, :grade, :b)
      _ -> put_change(cs, :grade, :a)
    end
  end
end
